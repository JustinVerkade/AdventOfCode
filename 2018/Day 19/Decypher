// RAW INSTRUCTIONS
addi 1 16 1     // 0: registers[1] = registers[1] + 16
seti 1 5 5      // 1: registers[5] = 1
seti 1 2 3      // 2: registers[3] = 1
mulr 5 3 2      // 3: registers[2] = registers[5] * registers[3]
eqrr 2 4 2      // 4: registers[2] = registers[2] == registers[4]
addr 2 1 1      // 5: registers[1] = registers[2] + registers[1]
addi 1 1 1      // 6: registers[1] = registers[1] + 1;
addr 5 0 0      // 7: registers[0] = registers[5] + registers[0]
addi 3 1 3      // 8: registers[3] = registers[3] + 1
gtrr 3 4 2      // 9: registers[2] = registers[3] > registers[4]
addr 1 2 1      //10: registers[1] = registers[1] + registers[2]
seti 2 6 1      //11: registers[1] = 2
addi 5 1 5      //12: registers[5] = registers[5] + 1
gtrr 5 4 2      //13: registers[2] = registers[5] > registers[4]
addr 2 1 1      //14: registers[1] = registers[2] + registers[1]
seti 1 8 1      //15: registers[1] = 1
mulr 1 1 1      //16: registers[1] = registers[1] * registers[1]
addi 4 2 4      //17: registers[4] = registers[4] + 2
mulr 4 4 4      //18: registers[4] = registers[4] * registers[4]
mulr 1 4 4      //19: registers[4] = registers[1] * registers[4]
muli 4 11 4     //20: registers[4] = registers[4] * 11
addi 2 5 2      //21: registers[2] = registers[2] + 5
mulr 2 1 2      //22: registers[2] = registers[2] * registers[1]
addi 2 12 2     //23: registers[2] = registers[2] + 12
addr 4 2 4      //24: registers[4] = registers[4] + registers[2]
addr 1 0 1      //25: registers[1] = registers[1] + registers[0]
seti 0 4 1      //26: registers[1] = 0
setr 1 4 2      //27: registers[2] = registers[1]
mulr 2 1 2      //28: registers[2] = registers[2] * registers[1]
addr 1 2 2      //29: registers[2] = registers[1] + registers[2]
mulr 1 2 2      //30: registers[2] = registers[1] * registers[2]
muli 2 14 2     //31: registers[2] = registers[2] * 14
mulr 2 1 2      //32: registers[2] = registers[2] * registers[1]
addr 4 2 4      //33: registers[4] = registers[4] + registers[2]
seti 0 3 0      //34: registers[0] = 0
seti 0 7 1      //35: registers[1] = 0

// SIMPLIFIED
int32_t a;
int32_t ip;
int32_t c;
int32_t d;
int32_t e;
int32_t f;

addi 1 16 1     // 0: ip += 16
seti 1 5 5      // 1: f = 1
seti 1 2 3      // 2: d = 1
mulr 5 3 2      // 3: c = f * d
eqrr 2 4 2      // 4: c = c == e
addr 2 1 1      // 5: ip += c
addi 1 1 1      // 6: ip += 1
addr 5 0 0      // 7: a += f
addi 3 1 3      // 8: d += 1
gtrr 3 4 2      // 9: c = d > e
addr 1 2 1      //10: ip += c
seti 2 6 1      //11: ip = 2
addi 5 1 5      //12: f += 1
gtrr 5 4 2      //13: c = f > e
addr 2 1 1      //14: ip += c
seti 1 8 1      //15: ip = 1
mulr 1 1 1      //16: ip = ip * ip
addi 4 2 4      //17: e += 2
mulr 4 4 4      //18: e = e * e
mulr 1 4 4      //19: e *= ip
muli 4 11 4     //20: e *= 11
addi 2 5 2      //21: c += 5
mulr 2 1 2      //22: c *= ip
addi 2 12 2     //23: c += 12
addr 4 2 4      //24: e += c
addr 1 0 1      //25: ip += a
seti 0 4 1      //26: ip = 0
setr 1 4 2      //27: c = ip
mulr 2 1 2      //28: c *= ip
addr 1 2 2      //29: c += ip
mulr 1 2 2      //30: c *= ip
muli 2 14 2     //31: c *= 14
mulr 2 1 2      //32: c *= ip
addr 4 2 4      //33: e += c
seti 0 3 0      //34: a = 0
seti 0 7 1      //35: ip = 0

// SIMPLIFIED
int32_t a;
int32_t ip;
int32_t c;
int32_t d;
int32_t e;
int32_t f;

addi 1 16 1     // 0: ip += 16
seti 1 5 5      // 1: f = 1
seti 1 2 3      // 2: d = 1
mulr 5 3 2      // 3: c = f * d
eqrr 2 4 2      // 4: c = c == e
addr 2 1 1      // 5: ip += c
addi 1 1 1      // 6: ip += 1
addr 5 0 0      // 7: a += f
addi 3 1 3      // 8: d += 1
gtrr 3 4 2      // 9: c = d > e
addr 1 2 1      //10: ip += c
seti 2 6 1      //11: ip = 2
addi 5 1 5      //12: f += 1
gtrr 5 4 2      //13: c = f > e
addr 2 1 1      //14: ip += c
seti 1 8 1      //15: ip = 1
mulr 1 1 1      //16: ip = 16 * 16
addi 4 2 4      //17: e += 2
mulr 4 4 4      //18: e = e * e
mulr 1 4 4      //19: e *= 19
muli 4 11 4     //20: e *= 11
addi 2 5 2      //21: c += 5
mulr 2 1 2      //22: c *= 22
addi 2 12 2     //23: c += 12
addr 4 2 4      //24: e += c
addr 1 0 1      //25: ip += a
seti 0 4 1      //26: ip = 0
setr 1 4 2      //27: c = 27
mulr 2 1 2      //28: c *= 28
addr 1 2 2      //29: c += 29
mulr 1 2 2      //30: c *= 30
muli 2 14 2     //31: c *= 14
mulr 2 1 2      //32: c *= 32
addr 4 2 4      //33: e += c
seti 0 3 0      //34: a = 0
seti 0 7 1      //35: ip = 0