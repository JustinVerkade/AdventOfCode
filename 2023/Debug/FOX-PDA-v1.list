
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015954  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08015b28  08015b28  00025b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f84  08015f84  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  08015f84  08015f84  00025f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f8c  08015f8c  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f8c  08015f8c  00025f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f90  08015f90  00025f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08015f94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045c0  200002fc  08016290  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048bc  08016290  000348bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000301c1  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b00  00000000  00000000  000604ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  00066ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002160  00000000  00000000  00069438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030b46  00000000  00000000  0006b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003150e  00000000  00000000  0009c0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108af6  00000000  00000000  000cd5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d60e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a704  00000000  00000000  001d6134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015b0c 	.word	0x08015b0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	08015b0c 	.word	0x08015b0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MDT0096AIH_TransmitCmd>:
//####################//
//- Command transmit -//
//####################//

void MDT0096AIH_TransmitCmd(MDT0096AIH_t *me, uint8_t cmd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	// init port
	MDT0096AIH_InactiveRS(me);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6858      	ldr	r0, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	891b      	ldrh	r3, [r3, #8]
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	f002 fc18 	bl	8003738 <HAL_GPIO_WritePin>
	MDT0096AIH_ActiveCS(me);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6958      	ldr	r0, [r3, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	8b1b      	ldrh	r3, [r3, #24]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	f002 fc10 	bl	8003738 <HAL_GPIO_WritePin>

	// transfer data
	uint8_t buffer[] = {cmd};
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(me->spih, buffer, 1, 1000);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f107 010c 	add.w	r1, r7, #12
 8000f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f007 fd46 	bl	80089ba <HAL_SPI_Transmit>

	// deactivate port
	MDT0096AIH_InactiveCS(me);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6958      	ldr	r0, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	8b1b      	ldrh	r3, [r3, #24]
 8000f36:	2201      	movs	r2, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f002 fbfd 	bl	8003738 <HAL_GPIO_WritePin>
	MDT0096AIH_ActiveRS(me);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6858      	ldr	r0, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	891b      	ldrh	r3, [r3, #8]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f002 fbf5 	bl	8003738 <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <MDT0096AIH_TransmitCmdByte>:
//#########################//
//- Command byte transmit -//
//#########################//

static void MDT0096AIH_TransmitCmdByte(MDT0096AIH_t *me, uint8_t cmd, uint8_t *data, uint8_t len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	461a      	mov	r2, r3
 8000f62:	460b      	mov	r3, r1
 8000f64:	72fb      	strb	r3, [r7, #11]
 8000f66:	4613      	mov	r3, r2
 8000f68:	72bb      	strb	r3, [r7, #10]
	// init port
	MDT0096AIH_InactiveRS(me);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6858      	ldr	r0, [r3, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	891b      	ldrh	r3, [r3, #8]
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	f002 fbdf 	bl	8003738 <HAL_GPIO_WritePin>
	MDT0096AIH_ActiveCS(me);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6958      	ldr	r0, [r3, #20]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	8b1b      	ldrh	r3, [r3, #24]
 8000f82:	2200      	movs	r2, #0
 8000f84:	4619      	mov	r1, r3
 8000f86:	f002 fbd7 	bl	8003738 <HAL_GPIO_WritePin>

	// transfer data
	uint8_t buffer[] = {cmd};
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(me->spih, buffer, 1, 1000);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	f107 0114 	add.w	r1, r7, #20
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f007 fd0d 	bl	80089ba <HAL_SPI_Transmit>

	// set transmit data
	MDT0096AIH_ActiveRS(me);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6858      	ldr	r0, [r3, #4]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	891b      	ldrh	r3, [r3, #8]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	f002 fbc4 	bl	8003738 <HAL_GPIO_WritePin>

	// transmit data
	HAL_SPI_Transmit(me->spih, data, len, 1000);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	7abb      	ldrb	r3, [r7, #10]
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	f007 fcfc 	bl	80089ba <HAL_SPI_Transmit>

	// deactivate port
	MDT0096AIH_InactiveCS(me);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6958      	ldr	r0, [r3, #20]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8b1b      	ldrh	r3, [r3, #24]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f002 fbb3 	bl	8003738 <HAL_GPIO_WritePin>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <MDT0096AIH_Init>:
		uint16_t pin_num_rs,
		GPIO_TypeDef *pin_bank_rst,
		uint16_t pin_num_rst,
		GPIO_TypeDef *pin_bank_cs,
		uint16_t pin_num_cs)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	807b      	strh	r3, [r7, #2]
	// link struct data

	// SPI
	me->spih = spih;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	601a      	str	r2, [r3, #0]

	// GPIO
	me->pin_bank_rs = pin_bank_rs;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	605a      	str	r2, [r3, #4]
	me->pin_num_rs = pin_num_rs;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	811a      	strh	r2, [r3, #8]
	me->pin_bank_rst = pin_bank_rst;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001000:	60da      	str	r2, [r3, #12]
	me->pin_num_rst = pin_num_rst;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001006:	821a      	strh	r2, [r3, #16]
	me->pin_bank_cs = pin_bank_cs;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800100c:	615a      	str	r2, [r3, #20]
	me->pin_num_cs = pin_num_cs;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001012:	831a      	strh	r2, [r3, #24]

	// set prefixes
	MDT0096AIH_ActiveRS(me);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6858      	ldr	r0, [r3, #4]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	891b      	ldrh	r3, [r3, #8]
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	f002 fb8a 	bl	8003738 <HAL_GPIO_WritePin>
	MDT0096AIH_InactiveCS(me);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6958      	ldr	r0, [r3, #20]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	8b1b      	ldrh	r3, [r3, #24]
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	f002 fb82 	bl	8003738 <HAL_GPIO_WritePin>
	MDT0096AIH_InactiveRST(me);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	68d8      	ldr	r0, [r3, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	8a1b      	ldrh	r3, [r3, #16]
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	f002 fb7a 	bl	8003738 <HAL_GPIO_WritePin>

	// hardware reset
	MDT0096AIH_Reset(me);
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f857 	bl	80010f8 <MDT0096AIH_Reset>

	// init display
	MDT0096AIH_TransmitCmd(me, MDT0096AIH_SLPOUT); // get out of sleep
 800104a:	2111      	movs	r1, #17
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff ff4d 	bl	8000eec <MDT0096AIH_TransmitCmd>

	HAL_Delay(100);
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f001 fa48 	bl	80024e8 <HAL_Delay>

	MDT0096AIH_TransmitCmd(me, MDT0096AIH_NORON);  // normal display mode on
 8001058:	2113      	movs	r1, #19
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff ff46 	bl	8000eec <MDT0096AIH_TransmitCmd>

	HAL_Delay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
 8001062:	f001 fa41 	bl	80024e8 <HAL_Delay>

	MDT0096AIH_TransmitCmd(me, MDT0096AIH_DISPON); // display on
 8001066:	2129      	movs	r1, #41	; 0x29
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f7ff ff3f 	bl	8000eec <MDT0096AIH_TransmitCmd>

	HAL_Delay(100);
 800106e:	2064      	movs	r0, #100	; 0x64
 8001070:	f001 fa3a 	bl	80024e8 <HAL_Delay>

	MDT0096AIH_TransmitCmd(me, MDT0096AIH_INVON); // invert buffer
 8001074:	2121      	movs	r1, #33	; 0x21
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff ff38 	bl	8000eec <MDT0096AIH_TransmitCmd>

	HAL_Delay(100);
 800107c:	2064      	movs	r0, #100	; 0x64
 800107e:	f001 fa33 	bl	80024e8 <HAL_Delay>

	// set BGR to RGB color code
	// invert column index
	uint8_t madctl_buffer[] = {0b00001000};
 8001082:	2308      	movs	r3, #8
 8001084:	773b      	strb	r3, [r7, #28]
	MDT0096AIH_TransmitCmdByte(me, MDT0096AIH_MADCTL, madctl_buffer, 1);
 8001086:	f107 021c 	add.w	r2, r7, #28
 800108a:	2301      	movs	r3, #1
 800108c:	2136      	movs	r1, #54	; 0x36
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff ff61 	bl	8000f56 <MDT0096AIH_TransmitCmdByte>

	HAL_Delay(100);
 8001094:	2064      	movs	r0, #100	; 0x64
 8001096:	f001 fa27 	bl	80024e8 <HAL_Delay>

	// define row window 0 -> 160
	uint8_t raset_buffer[] = {0, 1, 0, 160};
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MDT0096AIH_Init+0x114>)
 800109c:	61bb      	str	r3, [r7, #24]
	MDT0096AIH_TransmitCmdByte(me, MDT0096AIH_RASET, raset_buffer, 4);
 800109e:	f107 0218 	add.w	r2, r7, #24
 80010a2:	2304      	movs	r3, #4
 80010a4:	212b      	movs	r1, #43	; 0x2b
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff ff55 	bl	8000f56 <MDT0096AIH_TransmitCmdByte>

	HAL_Delay(100);
 80010ac:	2064      	movs	r0, #100	; 0x64
 80010ae:	f001 fa1b 	bl	80024e8 <HAL_Delay>

	// define column window
	uint8_t caset_buffer[] = {0, 26, 0, 25+80};
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MDT0096AIH_Init+0x118>)
 80010b4:	617b      	str	r3, [r7, #20]
	MDT0096AIH_TransmitCmdByte(me, MDT0096AIH_CASET, caset_buffer, 4);
 80010b6:	f107 0214 	add.w	r2, r7, #20
 80010ba:	2304      	movs	r3, #4
 80010bc:	212a      	movs	r1, #42	; 0x2a
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f7ff ff49 	bl	8000f56 <MDT0096AIH_TransmitCmdByte>

	HAL_Delay(100);
 80010c4:	2064      	movs	r0, #100	; 0x64
 80010c6:	f001 fa0f 	bl	80024e8 <HAL_Delay>

	MDT0096AIH_TransmitCmd(me, MDT0096AIH_RAMWR);  // display write
 80010ca:	212c      	movs	r1, #44	; 0x2c
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff ff0d 	bl	8000eec <MDT0096AIH_TransmitCmd>
//		MDT0096AIH_TransmitData(me, 0xFF);
//		MDT0096AIH_TransmitData(me, 0xFF);
//	}
//	MDT0096AIH_InactiveCS(me);
//
	HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	; 0x64
 80010d4:	f001 fa08 	bl	80024e8 <HAL_Delay>

	MDT0096AIH_ActiveCS(me);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6958      	ldr	r0, [r3, #20]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8b1b      	ldrh	r3, [r3, #24]
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	f002 fb28 	bl	8003738 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	a0000100 	.word	0xa0000100
 80010f4:	69001a00 	.word	0x69001a00

080010f8 <MDT0096AIH_Reset>:
//#########//
//- Reset -//
//#########//

void MDT0096AIH_Reset(MDT0096AIH_t *me)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	MDT0096AIH_ActiveRST(me);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68d8      	ldr	r0, [r3, #12]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8a1b      	ldrh	r3, [r3, #16]
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	f002 fb14 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001110:	2064      	movs	r0, #100	; 0x64
 8001112:	f001 f9e9 	bl	80024e8 <HAL_Delay>
	MDT0096AIH_InactiveRST(me);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68d8      	ldr	r0, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	8a1b      	ldrh	r3, [r3, #16]
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f002 fb09 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001126:	20c8      	movs	r0, #200	; 0xc8
 8001128:	f001 f9de 	bl	80024e8 <HAL_Delay>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	f5ad 4d16 	sub.w	sp, sp, #38400	; 0x9600
 800113a:	b086      	sub	sp, #24
 800113c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800113e:	f001 f976 	bl	800242e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001142:	f000 f865 	bl	8001210 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001146:	f000 fafb 	bl	8001740 <MX_GPIO_Init>
	MX_DMA_Init();
 800114a:	f000 fa61 	bl	8001610 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 800114e:	f000 f92d 	bl	80013ac <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8001152:	f00c fd99 	bl	800dc88 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8001156:	f010 ff17 	bl	8011f88 <MX_USB_DEVICE_Init>
	MX_USB_HOST_Init();
 800115a:	f011 fc71 	bl	8012a40 <MX_USB_HOST_Init>
	MX_USART1_UART_Init();
 800115e:	f000 fa27 	bl	80015b0 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8001162:	f000 f983 	bl	800146c <MX_TIM1_Init>
	MX_TIM11_Init();
 8001166:	f000 f9d5 	bl	8001514 <MX_TIM11_Init>
	MX_ADC1_Init();
 800116a:	f000 f8bf 	bl	80012ec <MX_ADC1_Init>
	MX_FMC_Init();
 800116e:	f000 fa85 	bl	800167c <MX_FMC_Init>
	MX_SPI1_Init();
 8001172:	f000 f93d 	bl	80013f0 <MX_SPI1_Init>
	//
	//	// system init terminal log
	//	System_initLog(&system_state);
	//	System_selfTestLog(&system_state);

	HAL_Delay(1000);
 8001176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117a:	f001 f9b5 	bl	80024e8 <HAL_Delay>

	// init display
	MDT0096AIH_Init(&oled, &hspi1,
 800117e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001182:	9303      	str	r3, [sp, #12]
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <main+0xcc>)
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <main+0xcc>)
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001196:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <main+0xcc>)
 8001198:	491a      	ldr	r1, [pc, #104]	; (8001204 <main+0xd0>)
 800119a:	481b      	ldr	r0, [pc, #108]	; (8001208 <main+0xd4>)
 800119c:	f7ff ff1e 	bl	8000fdc <MDT0096AIH_Init>
			OLED_RS_GPIO_Port, OLED_RS_Pin,
			OLED_RST_GPIO_Port, OLED_RST_Pin,
			OLED_CS_GPIO_Port, OLED_CS_Pin);

	uint8_t frame_buffer[38400];// = (uint8_t*)SRAM_ADDRESS;
	uint8_t brightness = 0x00;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f249 6207 	movw	r2, #38407	; 0x9607
 80011a6:	443a      	add	r2, r7
 80011a8:	7013      	strb	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		brightness += 1;
 80011aa:	f249 6307 	movw	r3, #38407	; 0x9607
 80011ae:	443b      	add	r3, r7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	f249 6207 	movw	r2, #38407	; 0x9607
 80011b8:	443a      	add	r2, r7
 80011ba:	7013      	strb	r3, [r2, #0]
		memset(frame_buffer, brightness, 38400);
 80011bc:	f249 6307 	movw	r3, #38407	; 0x9607
 80011c0:	443b      	add	r3, r7
 80011c2:	7819      	ldrb	r1, [r3, #0]
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <main+0xd8>)
 80011c6:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 80011ca:	f103 0308 	add.w	r3, r3, #8
 80011ce:	443b      	add	r3, r7
 80011d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011d4:	4618      	mov	r0, r3
 80011d6:	f011 ff85 	bl	80130e4 <memset>
		HAL_SPI_Transmit_DMA(&hspi1, frame_buffer, 38400);
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <main+0xd8>)
 80011dc:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 80011e0:	f103 0308 	add.w	r3, r3, #8
 80011e4:	443b      	add	r3, r7
 80011e6:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <main+0xd0>)
 80011ee:	f007 fd53 	bl	8008c98 <HAL_SPI_Transmit_DMA>
		HAL_Delay(16);
 80011f2:	2010      	movs	r0, #16
 80011f4:	f001 f978 	bl	80024e8 <HAL_Delay>
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 80011f8:	f011 fc48 	bl	8012a8c <MX_USB_HOST_Process>
		brightness += 1;
 80011fc:	e7d5      	b.n	80011aa <main+0x76>
 80011fe:	bf00      	nop
 8001200:	40020400 	.word	0x40020400
 8001204:	20000504 	.word	0x20000504
 8001208:	200027a8 	.word	0x200027a8
 800120c:	ffff69fc 	.word	0xffff69fc

08001210 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	; 0x50
 8001214:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f011 ff60 	bl	80130e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001234:	f005 faa6 	bl	8006784 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <SystemClock_Config+0xd4>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a29      	ldr	r2, [pc, #164]	; (80012e4 <SystemClock_Config+0xd4>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <SystemClock_Config+0xd4>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <SystemClock_Config+0xd8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <SystemClock_Config+0xd8>)
 8001256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <SystemClock_Config+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800127c:	2308      	movs	r3, #8
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001280:	23d8      	movs	r3, #216	; 0xd8
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001284:	2302      	movs	r3, #2
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001288:	2309      	movs	r3, #9
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4618      	mov	r0, r3
 8001292:	f005 fad7 	bl	8006844 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x90>
	{
		Error_Handler();
 800129c:	f000 fb90 	bl	80019c0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012a0:	f005 fa80 	bl	80067a4 <HAL_PWREx_EnableOverDrive>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80012aa:	f000 fb89 	bl	80019c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2107      	movs	r1, #7
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 fd5d 	bl	8006d8c <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0xcc>
	{
		Error_Handler();
 80012d8:	f000 fb72 	bl	80019c0 <Error_Handler>
	}
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	; 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_ADC1_Init+0xb4>)
 8001300:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <MX_ADC1_Init+0xb8>)
 8001302:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <MX_ADC1_Init+0xb4>)
 8001306:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800130a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MX_ADC1_Init+0xb4>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MX_ADC1_Init+0xb4>)
 8001314:	2201      	movs	r2, #1
 8001316:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_ADC1_Init+0xb4>)
 800131a:	2201      	movs	r2, #1
 800131c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_ADC1_Init+0xb4>)
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_ADC1_Init+0xb4>)
 8001328:	2200      	movs	r2, #0
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_ADC1_Init+0xb4>)
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <MX_ADC1_Init+0xbc>)
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_ADC1_Init+0xb4>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_ADC1_Init+0xb4>)
 800133a:	2202      	movs	r2, #2
 800133c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_ADC1_Init+0xb4>)
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_ADC1_Init+0xb4>)
 8001348:	2201      	movs	r2, #1
 800134a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_ADC1_Init+0xb4>)
 800134e:	f001 f8ef 	bl	8002530 <HAL_ADC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001358:	f000 fb32 	bl	80019c0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001360:	2301      	movs	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001364:	2306      	movs	r3, #6
 8001366:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_ADC1_Init+0xb4>)
 800136e:	f001 f923 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001378:	f000 fb22 	bl	80019c0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800137c:	2302      	movs	r3, #2
 800137e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001380:	2302      	movs	r3, #2
 8001382:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_ADC1_Init+0xb4>)
 800138a:	f001 f915 	bl	80025b8 <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001394:	f000 fb14 	bl	80019c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000318 	.word	0x20000318
 80013a4:	40012000 	.word	0x40012000
 80013a8:	0f000001 	.word	0x0f000001

080013ac <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <MX_SDMMC1_SD_Init+0x3c>)
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <MX_SDMMC1_SD_Init+0x40>)
 80013b4:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_SDMMC1_SD_Init+0x3c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_SDMMC1_SD_Init+0x3c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_SDMMC1_SD_Init+0x3c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_SDMMC1_SD_Init+0x3c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_SDMMC1_SD_Init+0x3c>)
 80013d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d4:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 4;
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <MX_SDMMC1_SD_Init+0x3c>)
 80013d8:	2204      	movs	r2, #4
 80013da:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <MX_SDMMC1_SD_Init+0x3c>)
 80013de:	f006 fab1 	bl	8007944 <HAL_SD_Init>
	/* USER CODE END SDMMC1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003c0 	.word	0x200003c0
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_SPI1_Init+0x74>)
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <MX_SPI1_Init+0x78>)
 80013f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_SPI1_Init+0x74>)
 80013fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001400:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_SPI1_Init+0x74>)
 8001404:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001408:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_SPI1_Init+0x74>)
 800140c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001410:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_SPI1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_SPI1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_SPI1_Init+0x74>)
 8001420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001424:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_SPI1_Init+0x74>)
 8001428:	2208      	movs	r2, #8
 800142a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <MX_SPI1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_SPI1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_SPI1_Init+0x74>)
 8001440:	2207      	movs	r2, #7
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_SPI1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_SPI1_Init+0x74>)
 800144c:	2208      	movs	r2, #8
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_SPI1_Init+0x74>)
 8001452:	f007 fa07 	bl	8008864 <HAL_SPI_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_SPI1_Init+0x70>
	{
		Error_Handler();
 800145c:	f000 fab0 	bl	80019c0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000504 	.word	0x20000504
 8001468:	40013000 	.word	0x40013000

0800146c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <MX_TIM1_Init+0xa0>)
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <MX_TIM1_Init+0xa4>)
 800148e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_TIM1_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_TIM1_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_TIM1_Init+0xa0>)
 800149e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_TIM1_Init+0xa0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_TIM1_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <MX_TIM1_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b6:	4815      	ldr	r0, [pc, #84]	; (800150c <MX_TIM1_Init+0xa0>)
 80014b8:	f008 f868 	bl	800958c <HAL_TIM_Base_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 80014c2:	f000 fa7d 	bl	80019c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ca:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	480e      	ldr	r0, [pc, #56]	; (800150c <MX_TIM1_Init+0xa0>)
 80014d4:	f008 fa26 	bl	8009924 <HAL_TIM_ConfigClockSource>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 80014de:	f000 fa6f 	bl	80019c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_TIM1_Init+0xa0>)
 80014f4:	f008 fe78 	bl	800a1e8 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 80014fe:	f000 fa5f 	bl	80019c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200005c8 	.word	0x200005c8
 8001510:	40010000 	.word	0x40010000

08001514 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <MX_TIM11_Init+0x94>)
 800152e:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <MX_TIM11_Init+0x98>)
 8001530:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_TIM11_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_TIM11_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_TIM11_Init+0x94>)
 8001540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001544:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_TIM11_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_TIM11_Init+0x94>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001552:	4815      	ldr	r0, [pc, #84]	; (80015a8 <MX_TIM11_Init+0x94>)
 8001554:	f008 f81a 	bl	800958c <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM11_Init+0x4e>
	{
		Error_Handler();
 800155e:	f000 fa2f 	bl	80019c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_TIM11_Init+0x94>)
 8001564:	f008 f869 	bl	800963a <HAL_TIM_PWM_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM11_Init+0x5e>
	{
		Error_Handler();
 800156e:	f000 fa27 	bl	80019c0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM11_Init+0x94>)
 800158a:	f008 f8b7 	bl	80096fc <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM11_Init+0x84>
	{
		Error_Handler();
 8001594:	f000 fa14 	bl	80019c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM11_Init+0x94>)
 800159a:	f000 fcc9 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000614 	.word	0x20000614
 80015ac:	40014800 	.word	0x40014800

080015b0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <MX_USART1_UART_Init+0x5c>)
 80015b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART1_UART_Init+0x58>)
 80015f4:	f008 fe86 	bl	800a304 <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80015fe:	f000 f9df 	bl	80019c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000660 	.word	0x20000660
 800160c:	40011000 	.word	0x40011000

08001610 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_DMA_Init+0x68>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <MX_DMA_Init+0x68>)
 800161c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_DMA_Init+0x68>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2038      	movs	r0, #56	; 0x38
 8001634:	f001 faeb 	bl	8002c0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001638:	2038      	movs	r0, #56	; 0x38
 800163a:	f001 fb04 	bl	8002c46 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	203b      	movs	r0, #59	; 0x3b
 8001644:	f001 fae3 	bl	8002c0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001648:	203b      	movs	r0, #59	; 0x3b
 800164a:	f001 fafc 	bl	8002c46 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2044      	movs	r0, #68	; 0x44
 8001654:	f001 fadb 	bl	8002c0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001658:	2044      	movs	r0, #68	; 0x44
 800165a:	f001 faf4 	bl	8002c46 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2045      	movs	r0, #69	; 0x45
 8001664:	f001 fad3 	bl	8002c0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001668:	2045      	movs	r0, #69	; 0x45
 800166a:	f001 faec 	bl	8002c46 <HAL_NVIC_EnableIRQ>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <MX_FMC_Init+0xbc>)
 8001696:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800169a:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <MX_FMC_Init+0xbc>)
 800169e:	4a27      	ldr	r2, [pc, #156]	; (800173c <MX_FMC_Init+0xc0>)
 80016a0:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_FMC_Init+0xbc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_FMC_Init+0xbc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <MX_FMC_Init+0xbc>)
 80016b0:	2204      	movs	r2, #4
 80016b2:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <MX_FMC_Init+0xbc>)
 80016b6:	2210      	movs	r2, #16
 80016b8:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_FMC_Init+0xbc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MX_FMC_Init+0xbc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_FMC_Init+0xbc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_FMC_Init+0xbc>)
 80016ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_FMC_Init+0xbc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_FMC_Init+0xbc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <MX_FMC_Init+0xbc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_FMC_Init+0xbc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_FMC_Init+0xbc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_FMC_Init+0xbc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_FMC_Init+0xbc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 5;
 80016fe:	2305      	movs	r3, #5
 8001700:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 8001702:	230f      	movs	r3, #15
 8001704:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 8;
 8001706:	2308      	movs	r3, #8
 8001708:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 1;
 800170a:	2301      	movs	r3, #1
 800170c:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 800170e:	2310      	movs	r3, #16
 8001710:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 8001712:	2311      	movs	r3, #17
 8001714:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_FMC_Init+0xbc>)
 8001722:	f007 feeb 	bl	80094fc <HAL_SRAM_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_FMC_Init+0xb4>
	{
		Error_Handler( );
 800172c:	f000 f948 	bl	80019c0 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200006e8 	.word	0x200006e8
 800173c:	a0000104 	.word	0xa0000104

08001740 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	; 0x38
 8001744:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001756:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a91      	ldr	r2, [pc, #580]	; (80019a0 <MX_GPIO_Init+0x260>)
 800175c:	f043 0310 	orr.w	r3, r3, #16
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b8f      	ldr	r3, [pc, #572]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b8c      	ldr	r3, [pc, #560]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a8b      	ldr	r2, [pc, #556]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <MX_GPIO_Init+0x260>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001786:	4b86      	ldr	r3, [pc, #536]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a85      	ldr	r2, [pc, #532]	; (80019a0 <MX_GPIO_Init+0x260>)
 800178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b83      	ldr	r3, [pc, #524]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a7f      	ldr	r2, [pc, #508]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	4b7a      	ldr	r3, [pc, #488]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a79      	ldr	r2, [pc, #484]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b77      	ldr	r3, [pc, #476]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a73      	ldr	r2, [pc, #460]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b71      	ldr	r3, [pc, #452]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80017e6:	4b6e      	ldr	r3, [pc, #440]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a6d      	ldr	r2, [pc, #436]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b6b      	ldr	r3, [pc, #428]	; (80019a0 <MX_GPIO_Init+0x260>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80017fe:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a67      	ldr	r2, [pc, #412]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001804:	f043 0320 	orr.w	r3, r3, #32
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <MX_GPIO_Init+0x260>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001816:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a61      	ldr	r2, [pc, #388]	; (80019a0 <MX_GPIO_Init+0x260>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <MX_GPIO_Init+0x260>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, WIFI_ENABLE_Pin|OLED_RST_Pin|OLED_CS_Pin|OLED_RS_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001834:	485b      	ldr	r0, [pc, #364]	; (80019a4 <MX_GPIO_Init+0x264>)
 8001836:	f001 ff7f 	bl	8003738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2104      	movs	r1, #4
 800183e:	485a      	ldr	r0, [pc, #360]	; (80019a8 <MX_GPIO_Init+0x268>)
 8001840:	f001 ff7a 	bl	8003738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	4858      	ldr	r0, [pc, #352]	; (80019ac <MX_GPIO_Init+0x26c>)
 800184a:	f001 ff75 	bl	8003738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	21c0      	movs	r1, #192	; 0xc0
 8001852:	4857      	ldr	r0, [pc, #348]	; (80019b0 <MX_GPIO_Init+0x270>)
 8001854:	f001 ff70 	bl	8003738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : WIFI_ENABLE_Pin */
	GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 8001858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	484c      	ldr	r0, [pc, #304]	; (80019a4 <MX_GPIO_Init+0x264>)
 8001872:	f001 fd9d 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8001876:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4849      	ldr	r0, [pc, #292]	; (80019b0 <MX_GPIO_Init+0x270>)
 800188c:	f001 fd90 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB13 PB1 PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_0;
 8001890:	f242 0313 	movw	r3, #8211	; 0x2013
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	483f      	ldr	r0, [pc, #252]	; (80019a4 <MX_GPIO_Init+0x264>)
 80018a6:	f001 fd83 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA3 PA7 */
	GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 80018aa:	f248 63c8 	movw	r3, #34504	; 0x86c8
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_3|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	483d      	ldr	r0, [pc, #244]	; (80019b4 <MX_GPIO_Init+0x274>)
 80018c0:	f001 fd76 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018c4:	2340      	movs	r3, #64	; 0x40
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4838      	ldr	r0, [pc, #224]	; (80019b8 <MX_GPIO_Init+0x278>)
 80018d8:	f001 fd6a 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI1 PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 80018dc:	230b      	movs	r3, #11
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	482e      	ldr	r0, [pc, #184]	; (80019a8 <MX_GPIO_Init+0x268>)
 80018f0:	f001 fd5e 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_HOST_VBUF_Pin */
	GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 80018f4:	2304      	movs	r3, #4
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4827      	ldr	r0, [pc, #156]	; (80019a8 <MX_GPIO_Init+0x268>)
 800190c:	f001 fd50 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001910:	23a0      	movs	r3, #160	; 0xa0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	4822      	ldr	r0, [pc, #136]	; (80019ac <MX_GPIO_Init+0x26c>)
 8001924:	f001 fd44 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 8001928:	2340      	movs	r3, #64	; 0x40
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	481b      	ldr	r0, [pc, #108]	; (80019ac <MX_GPIO_Init+0x26c>)
 8001940:	f001 fd36 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001948:	2301      	movs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	4815      	ldr	r0, [pc, #84]	; (80019b0 <MX_GPIO_Init+0x270>)
 800195c:	f001 fd28 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OLED_RST_Pin OLED_CS_Pin OLED_RS_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_CS_Pin|OLED_RS_Pin;
 8001960:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800196e:	2301      	movs	r3, #1
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	480a      	ldr	r0, [pc, #40]	; (80019a4 <MX_GPIO_Init+0x264>)
 800197a:	f001 fd19 	bl	80033b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800197e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	480a      	ldr	r0, [pc, #40]	; (80019bc <MX_GPIO_Init+0x27c>)
 8001994:	f001 fd0c 	bl	80033b0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001998:	bf00      	nop
 800199a:	3738      	adds	r7, #56	; 0x38
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40021800 	.word	0x40021800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40021400 	.word	0x40021400

080019c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c6:	b672      	cpsid	i
}
 80019c8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	// reset pins
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	481d      	ldr	r0, [pc, #116]	; (8001a44 <Error_Handler+0x84>)
 80019d0:	f001 feb2 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	481a      	ldr	r0, [pc, #104]	; (8001a44 <Error_Handler+0x84>)
 80019da:	f001 fead 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	2140      	movs	r1, #64	; 0x40
 80019e2:	4819      	ldr	r0, [pc, #100]	; (8001a48 <Error_Handler+0x88>)
 80019e4:	f001 fea8 	bl	8003738 <HAL_GPIO_WritePin>

	// blink error code
	while (1)
	{
		switch(system_state.error)
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <Error_Handler+0x8c>)
 80019ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d010      	beq.n	8001a18 <Error_Handler+0x58>
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	dc17      	bgt.n	8001a2a <Error_Handler+0x6a>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <Error_Handler+0x44>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d005      	beq.n	8001a0e <Error_Handler+0x4e>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;

		default:
			break;
 8001a02:	e012      	b.n	8001a2a <Error_Handler+0x6a>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001a04:	2140      	movs	r1, #64	; 0x40
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <Error_Handler+0x84>)
 8001a08:	f001 feaf 	bl	800376a <HAL_GPIO_TogglePin>
			break;
 8001a0c:	e00e      	b.n	8001a2c <Error_Handler+0x6c>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <Error_Handler+0x84>)
 8001a12:	f001 feaa 	bl	800376a <HAL_GPIO_TogglePin>
			break;
 8001a16:	e009      	b.n	8001a2c <Error_Handler+0x6c>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001a18:	2140      	movs	r1, #64	; 0x40
 8001a1a:	480a      	ldr	r0, [pc, #40]	; (8001a44 <Error_Handler+0x84>)
 8001a1c:	f001 fea5 	bl	800376a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	4808      	ldr	r0, [pc, #32]	; (8001a44 <Error_Handler+0x84>)
 8001a24:	f001 fea1 	bl	800376a <HAL_GPIO_TogglePin>
			break;
 8001a28:	e000      	b.n	8001a2c <Error_Handler+0x6c>
			break;
 8001a2a:	bf00      	nop
		}

		// loop delay
		for(volatile uint32_t t=0; t<2000000; t++);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	e002      	b.n	8001a38 <Error_Handler+0x78>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3301      	adds	r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <Error_Handler+0x90>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d9f8      	bls.n	8001a32 <Error_Handler+0x72>
		switch(system_state.error)
 8001a40:	e7d2      	b.n	80019e8 <Error_Handler+0x28>
 8001a42:	bf00      	nop
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	20000734 	.word	0x20000734
 8001a50:	001e847f 	.word	0x001e847f

08001a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_MspInit+0x44>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <HAL_MspInit+0x44>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_MspInit+0x44>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_MspInit+0x44>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_MspInit+0x44>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_MspInit+0x44>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <HAL_ADC_MspInit+0xd4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d153      	bne.n	8001b66 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_ADC_MspInit+0xd8>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <HAL_ADC_MspInit+0xd8>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_ADC_MspInit+0xd8>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_ADC_MspInit+0xd8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_ADC_MspInit+0xd8>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_ADC_MspInit+0xd8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001aee:	2305      	movs	r3, #5
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af2:	2303      	movs	r3, #3
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	481d      	ldr	r0, [pc, #116]	; (8001b78 <HAL_ADC_MspInit+0xdc>)
 8001b02:	f001 fc55 	bl	80033b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b08:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_ADC_MspInit+0xe4>)
 8001b0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b4a:	480c      	ldr	r0, [pc, #48]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b4c:	f001 f896 	bl	8002c7c <HAL_DMA_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001b56:	f7ff ff33 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_ADC_MspInit+0xe0>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40012000 	.word	0x40012000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	20000360 	.word	0x20000360
 8001b80:	40026410 	.word	0x40026410

08001b84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0ac      	sub	sp, #176	; 0xb0
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b9c:	f107 0318 	add.w	r3, r7, #24
 8001ba0:	2284      	movs	r2, #132	; 0x84
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f011 fa9d 	bl	80130e4 <memset>
  if(hsd->Instance==SDMMC1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a70      	ldr	r2, [pc, #448]	; (8001d70 <HAL_SD_MspInit+0x1ec>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f040 80d8 	bne.w	8001d66 <HAL_SD_MspInit+0x1e2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001bb6:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001bba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 fb01 	bl	80071d4 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001bd8:	f7ff fef2 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001bdc:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	4a64      	ldr	r2, [pc, #400]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001be2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be6:	6453      	str	r3, [r2, #68]	; 0x44
 8001be8:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001c12:	f043 0308 	orr.w	r3, r3, #8
 8001c16:	6313      	str	r3, [r2, #48]	; 0x30
 8001c18:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_SD_MspInit+0x1f0>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001c24:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c3e:	230c      	movs	r3, #12
 8001c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	484b      	ldr	r0, [pc, #300]	; (8001d78 <HAL_SD_MspInit+0x1f4>)
 8001c4c:	f001 fbb0 	bl	80033b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c50:	2304      	movs	r3, #4
 8001c52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c72:	4619      	mov	r1, r3
 8001c74:	4841      	ldr	r0, [pc, #260]	; (8001d7c <HAL_SD_MspInit+0x1f8>)
 8001c76:	f001 fb9b 	bl	80033b0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001c7c:	4a41      	ldr	r2, [pc, #260]	; (8001d84 <HAL_SD_MspInit+0x200>)
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c86:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c9c:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001caa:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001cae:	2220      	movs	r2, #32
 8001cb0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001cba:	2204      	movs	r2, #4
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001cc6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001cce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001cd4:	482a      	ldr	r0, [pc, #168]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001cd6:	f000 ffd1 	bl	8002c7c <HAL_DMA_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001ce0:	f7ff fe6e 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a26      	ldr	r2, [pc, #152]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <HAL_SD_MspInit+0x1fc>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001cf2:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <HAL_SD_MspInit+0x208>)
 8001cf4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001cf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d10:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d18:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d20:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d24:	2220      	movs	r2, #32
 8001d26:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d30:	2204      	movs	r2, #4
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d36:	2203      	movs	r2, #3
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d40:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001d4a:	480f      	ldr	r0, [pc, #60]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d4c:	f000 ff96 	bl	8002c7c <HAL_DMA_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001d56:	f7ff fe33 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d60:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_SD_MspInit+0x204>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	37b0      	adds	r7, #176	; 0xb0
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	20000444 	.word	0x20000444
 8001d84:	40026458 	.word	0x40026458
 8001d88:	200004a4 	.word	0x200004a4
 8001d8c:	400264a0 	.word	0x400264a0

08001d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <HAL_SPI_MspInit+0x120>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d179      	bne.n	8001ea6 <HAL_SPI_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a3f      	ldr	r2, [pc, #252]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a39      	ldr	r2, [pc, #228]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_SPI_MspInit+0x124>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2302      	movs	r3, #2
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4828      	ldr	r0, [pc, #160]	; (8001eb8 <HAL_SPI_MspInit+0x128>)
 8001e16:	f001 facb 	bl	80033b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e26:	2302      	movs	r3, #2
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4821      	ldr	r0, [pc, #132]	; (8001ebc <HAL_SPI_MspInit+0x12c>)
 8001e36:	f001 fabb 	bl	80033b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8001e3a:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e3c:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <HAL_SPI_MspInit+0x134>)
 8001e3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e42:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_DISABLE;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e72:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e7a:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e7c:	f000 fefe 	bl	8002c7c <HAL_DMA_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001e86:	f7ff fd9b 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
 8001e90:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <HAL_SPI_MspInit+0x130>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2023      	movs	r0, #35	; 0x23
 8001e9c:	f000 feb7 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ea0:	2023      	movs	r0, #35	; 0x23
 8001ea2:	f000 fed0 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3728      	adds	r7, #40	; 0x28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40013000 	.word	0x40013000
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	20000568 	.word	0x20000568
 8001ec4:	40026488 	.word	0x40026488

08001ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <HAL_TIM_Base_MspInit+0x5c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_TIM_Base_MspInit+0x60>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_TIM_Base_MspInit+0x60>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_TIM_Base_MspInit+0x60>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001ef2:	e010      	b.n	8001f16 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_TIM_Base_MspInit+0x64>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10b      	bne.n	8001f16 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_TIM_Base_MspInit+0x60>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_TIM_Base_MspInit+0x60>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <HAL_TIM_Base_MspInit+0x60>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40014800 	.word	0x40014800

08001f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <HAL_TIM_MspPostInit+0x64>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d11b      	bne.n	8001f8a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_TIM_MspPostInit+0x68>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <HAL_TIM_MspPostInit+0x68>)
 8001f58:	f043 0320 	orr.w	r3, r3, #32
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_TIM_MspPostInit+0x68>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <HAL_TIM_MspPostInit+0x6c>)
 8001f86:	f001 fa13 	bl	80033b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40014800 	.word	0x40014800
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40021400 	.word	0x40021400

08001fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0aa      	sub	sp, #168	; 0xa8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	2284      	movs	r2, #132	; 0x84
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f011 f88f 	bl	80130e4 <memset>
  if(huart->Instance==USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a21      	ldr	r2, [pc, #132]	; (8002050 <HAL_UART_MspInit+0xb0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d13a      	bne.n	8002046 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fd0:	2340      	movs	r3, #64	; 0x40
 8001fd2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f005 f8f9 	bl	80071d4 <HAL_RCCEx_PeriphCLKConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe8:	f7ff fcea 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_UART_MspInit+0xb4>)
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_UART_MspInit+0xb4>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_UART_MspInit+0xb4>)
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_UART_MspInit+0xb4>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a12      	ldr	r2, [pc, #72]	; (8002054 <HAL_UART_MspInit+0xb4>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	6313      	str	r3, [r2, #48]	; 0x30
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_UART_MspInit+0xb4>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 800201c:	23c0      	movs	r3, #192	; 0xc0
 800201e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002034:	2307      	movs	r3, #7
 8002036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <HAL_UART_MspInit+0xb8>)
 8002042:	f001 f9b5 	bl	80033b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002046:	bf00      	nop
 8002048:	37a8      	adds	r7, #168	; 0xa8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40011000 	.word	0x40011000
 8002054:	40023800 	.word	0x40023800
 8002058:	40020400 	.word	0x40020400

0800205c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_FMC_MspInit+0xc4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d14e      	bne.n	8002116 <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_FMC_MspInit+0xc4>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_FMC_MspInit+0xc8>)
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	4a28      	ldr	r2, [pc, #160]	; (8002124 <HAL_FMC_MspInit+0xc8>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6393      	str	r3, [r2, #56]	; 0x38
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_FMC_MspInit+0xc8>)
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8002096:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 800209a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020a8:	230c      	movs	r3, #12
 80020aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	481d      	ldr	r0, [pc, #116]	; (8002128 <HAL_FMC_MspInit+0xcc>)
 80020b2:	f001 f97d 	bl	80033b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 80020b6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80020ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020c8:	230c      	movs	r3, #12
 80020ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4816      	ldr	r0, [pc, #88]	; (800212c <HAL_FMC_MspInit+0xd0>)
 80020d2:	f001 f96d 	bl	80033b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80020d6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80020da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020e8:	230c      	movs	r3, #12
 80020ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	4619      	mov	r1, r3
 80020f0:	480f      	ldr	r0, [pc, #60]	; (8002130 <HAL_FMC_MspInit+0xd4>)
 80020f2:	f001 f95d 	bl	80033b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80020f6:	233f      	movs	r3, #63	; 0x3f
 80020f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002106:	230c      	movs	r3, #12
 8002108:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <HAL_FMC_MspInit+0xd8>)
 8002110:	f001 f94e 	bl	80033b0 <HAL_GPIO_Init>
 8002114:	e000      	b.n	8002118 <HAL_FMC_MspInit+0xbc>
    return;
 8002116:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200027c4 	.word	0x200027c4
 8002124:	40023800 	.word	0x40023800
 8002128:	40021000 	.word	0x40021000
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40021400 	.word	0x40021400
 8002134:	40021800 	.word	0x40021800

08002138 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002140:	f7ff ff8c 	bl	800205c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <NMI_Handler+0x4>

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler+0x4>

08002158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <MemManage_Handler+0x4>

0800215e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <BusFault_Handler+0x4>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <UsageFault_Handler+0x4>

0800216a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002198:	f000 f986 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}

080021a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <SPI1_IRQHandler+0x10>)
 80021a6:	f006 fe6b 	bl	8008e80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000504 	.word	0x20000504

080021b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <DMA2_Stream0_IRQHandler+0x10>)
 80021ba:	f000 fe8f 	bl	8002edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000360 	.word	0x20000360

080021c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <DMA2_Stream3_IRQHandler+0x10>)
 80021ce:	f000 fe85 	bl	8002edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000444 	.word	0x20000444

080021dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <OTG_FS_IRQHandler+0x10>)
 80021e2:	f001 fd47 	bl	8003c74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200045a8 	.word	0x200045a8

080021f0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <DMA2_Stream5_IRQHandler+0x10>)
 80021f6:	f000 fe71 	bl	8002edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000568 	.word	0x20000568

08002204 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <DMA2_Stream6_IRQHandler+0x10>)
 800220a:	f000 fe67 	bl	8002edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200004a4 	.word	0x200004a4

08002218 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <OTG_HS_IRQHandler+0x10>)
 800221e:	f003 f93f 	bl	80054a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20003cc4 	.word	0x20003cc4

0800222c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return 1;
 8002230:	2301      	movs	r3, #1
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_kill>:

int _kill(int pid, int sig)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002246:	f010 ff13 	bl	8013070 <__errno>
 800224a:	4603      	mov	r3, r0
 800224c:	2216      	movs	r2, #22
 800224e:	601a      	str	r2, [r3, #0]
  return -1;
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_exit>:

void _exit (int status)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffe7 	bl	800223c <_kill>
  while (1) {}    /* Make sure we hang here */
 800226e:	e7fe      	b.n	800226e <_exit+0x12>

08002270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e00a      	b.n	8002298 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002282:	f3af 8000 	nop.w
 8002286:	4601      	mov	r1, r0
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	dbf0      	blt.n	8002282 <_read+0x12>
  }

  return len;
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e009      	b.n	80022d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbf1      	blt.n	80022bc <_write+0x12>
  }
  return len;
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_close>:

int _close(int file)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230a:	605a      	str	r2, [r3, #4]
  return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_isatty>:

int _isatty(int file)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <_sbrk+0x5c>)
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <_sbrk+0x60>)
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <_sbrk+0x64>)
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <_sbrk+0x68>)
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	429a      	cmp	r2, r3
 800237a:	d207      	bcs.n	800238c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800237c:	f010 fe78 	bl	8013070 <__errno>
 8002380:	4603      	mov	r3, r0
 8002382:	220c      	movs	r2, #12
 8002384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	e009      	b.n	80023a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <_sbrk+0x64>)
 800239c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20050000 	.word	0x20050000
 80023ac:	00000400 	.word	0x00000400
 80023b0:	200027c8 	.word	0x200027c8
 80023b4:	200048c0 	.word	0x200048c0

080023b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <SystemInit+0x20>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <SystemInit+0x20>)
 80023c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023e2:	490e      	ldr	r1, [pc, #56]	; (800241c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f8:	4c0b      	ldr	r4, [pc, #44]	; (8002428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002406:	f7ff ffd7 	bl	80023b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240a:	f010 fe37 	bl	801307c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7fe fe91 	bl	8001134 <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002414:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8002420:	08015f94 	.word	0x08015f94
  ldr r2, =_sbss
 8002424:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8002428:	200048bc 	.word	0x200048bc

0800242c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC_IRQHandler>

0800242e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002432:	2003      	movs	r0, #3
 8002434:	f000 fbe0 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002438:	200f      	movs	r0, #15
 800243a:	f000 f805 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243e:	f7ff fb09 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fbfb 	bl	8002c62 <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 fbc3 	bl	8002c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008
 80024cc:	200027cc 	.word	0x200027cc

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200027cc 	.word	0x200027cc

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff ffee 	bl	80024d0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffde 	bl	80024d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008

08002530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e031      	b.n	80025aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff faa4 	bl	8001a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_ADC_Init+0x84>)
 8002574:	4013      	ands	r3, r2
 8002576:	f043 0202 	orr.w	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f970 	bl	8002864 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
 800259a:	e001      	b.n	80025a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	ffffeefd 	.word	0xffffeefd

080025b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1c>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e136      	b.n	8002842 <HAL_ADC_ConfigChannel+0x28a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d93a      	bls.n	800265a <HAL_ADC_ConfigChannel+0xa2>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ec:	d035      	beq.n	800265a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68d9      	ldr	r1, [r3, #12]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	3b1e      	subs	r3, #30
 8002604:	2207      	movs	r2, #7
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	400a      	ands	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a8d      	ldr	r2, [pc, #564]	; (8002850 <HAL_ADC_ConfigChannel+0x298>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10a      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	061a      	lsls	r2, r3, #24
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002632:	e035      	b.n	80026a0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68d9      	ldr	r1, [r3, #12]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	4618      	mov	r0, r3
 8002646:	4603      	mov	r3, r0
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4403      	add	r3, r0
 800264c:	3b1e      	subs	r3, #30
 800264e:	409a      	lsls	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002658:	e022      	b.n	80026a0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6919      	ldr	r1, [r3, #16]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	2207      	movs	r2, #7
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43da      	mvns	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	400a      	ands	r2, r1
 800267c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6919      	ldr	r1, [r3, #16]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4618      	mov	r0, r3
 8002690:	4603      	mov	r3, r0
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4403      	add	r3, r0
 8002696:	409a      	lsls	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d824      	bhi.n	80026f2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b05      	subs	r3, #5
 80026ba:	221f      	movs	r2, #31
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43da      	mvns	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	400a      	ands	r2, r1
 80026c8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b05      	subs	r3, #5
 80026e4:	fa00 f203 	lsl.w	r2, r0, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34
 80026f0:	e04c      	b.n	800278c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d824      	bhi.n	8002744 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	3b23      	subs	r3, #35	; 0x23
 800270c:	221f      	movs	r2, #31
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	400a      	ands	r2, r1
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	3b23      	subs	r3, #35	; 0x23
 8002736:	fa00 f203 	lsl.w	r2, r0, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
 8002742:	e023      	b.n	800278c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	3b41      	subs	r3, #65	; 0x41
 8002756:	221f      	movs	r2, #31
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43da      	mvns	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	400a      	ands	r2, r1
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	4618      	mov	r0, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b41      	subs	r3, #65	; 0x41
 8002780:	fa00 f203 	lsl.w	r2, r0, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a30      	ldr	r2, [pc, #192]	; (8002854 <HAL_ADC_ConfigChannel+0x29c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1f4>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800279e:	d105      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027a0:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a2c      	ldr	r2, [pc, #176]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 80027a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027aa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a28      	ldr	r2, [pc, #160]	; (8002854 <HAL_ADC_ConfigChannel+0x29c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10f      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x21e>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b12      	cmp	r3, #18
 80027bc:	d10b      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a25      	ldr	r2, [pc, #148]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027c8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 80027d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027d4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <HAL_ADC_ConfigChannel+0x29c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d12b      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x280>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <HAL_ADC_ConfigChannel+0x298>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <HAL_ADC_ConfigChannel+0x23a>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b11      	cmp	r3, #17
 80027f0:	d122      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027fc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4a15      	ldr	r2, [pc, #84]	; (8002858 <HAL_ADC_ConfigChannel+0x2a0>)
 8002804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002808:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_ADC_ConfigChannel+0x298>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d111      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_ADC_ConfigChannel+0x2a4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a11      	ldr	r2, [pc, #68]	; (8002860 <HAL_ADC_ConfigChannel+0x2a8>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0c9a      	lsrs	r2, r3, #18
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800282a:	e002      	b.n	8002832 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3b01      	subs	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f9      	bne.n	800282c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	10000012 	.word	0x10000012
 8002854:	40012000 	.word	0x40012000
 8002858:	40012300 	.word	0x40012300
 800285c:	20000000 	.word	0x20000000
 8002860:	431bde83 	.word	0x431bde83

08002864 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800286c:	4b78      	ldr	r3, [pc, #480]	; (8002a50 <ADC_Init+0x1ec>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a77      	ldr	r2, [pc, #476]	; (8002a50 <ADC_Init+0x1ec>)
 8002872:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002876:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002878:	4b75      	ldr	r3, [pc, #468]	; (8002a50 <ADC_Init+0x1ec>)
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4973      	ldr	r1, [pc, #460]	; (8002a50 <ADC_Init+0x1ec>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	021a      	lsls	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <ADC_Init+0x1f0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6899      	ldr	r1, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e00f      	b.n	800295e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800294c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800295c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0202 	bic.w	r2, r2, #2
 800296c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	005a      	lsls	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	3b01      	subs	r3, #1
 80029b8:	035a      	lsls	r2, r3, #13
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	e007      	b.n	80029d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	051a      	lsls	r2, r3, #20
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a16:	025a      	lsls	r2, r3, #9
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	029a      	lsls	r2, r3, #10
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40012300 	.word	0x40012300
 8002a54:	0f000001 	.word	0x0f000001

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <__NVIC_SetPriorityGrouping+0x40>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <__NVIC_SetPriorityGrouping+0x40>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60d3      	str	r3, [r2, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00
 8002a9c:	05fa0000 	.word	0x05fa0000

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4907      	ldr	r1, [pc, #28]	; (8002af4 <__NVIC_EnableIRQ+0x38>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
         );
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc4:	d301      	bcc.n	8002bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00f      	b.n	8002bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bca:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <SysTick_Config+0x40>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd2:	210f      	movs	r1, #15
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f7ff ff8e 	bl	8002af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <SysTick_Config+0x40>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <SysTick_Config+0x40>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000e010 	.word	0xe000e010

08002bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff29 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c20:	f7ff ff3e 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ff8e 	bl	8002b4c <NVIC_EncodePriority>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff5d 	bl	8002af8 <__NVIC_SetPriority>
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff31 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ffa2 	bl	8002bb4 <SysTick_Config>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff fc22 	bl	80024d0 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e099      	b.n	8002dcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb8:	e00f      	b.n	8002cda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cba:	f7ff fc09 	bl	80024d0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d908      	bls.n	8002cda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e078      	b.n	8002dcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e8      	bne.n	8002cba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <HAL_DMA_Init+0x158>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 0307 	bic.w	r3, r3, #7
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d117      	bne.n	8002d9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00e      	beq.n	8002d9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa99 	bl	80032b8 <DMA_CheckFifoParam>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2240      	movs	r2, #64	; 0x40
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e016      	b.n	8002dcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa50 	bl	800324c <DMA_CalcBaseAndBitshift>
 8002dac:	4603      	mov	r3, r0
 8002dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	223f      	movs	r2, #63	; 0x3f
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	f010803f 	.word	0xf010803f

08002dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_DMA_Start_IT+0x26>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e048      	b.n	8002e90 <HAL_DMA_Start_IT+0xb8>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d137      	bne.n	8002e82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f9e2 	bl	80031f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0216 	orr.w	r2, r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e56:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0208 	orr.w	r2, r2, #8
 8002e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e005      	b.n	8002e8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00c      	b.n	8002ed0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2205      	movs	r2, #5
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ee8:	4b8e      	ldr	r3, [pc, #568]	; (8003124 <HAL_DMA_IRQHandler+0x248>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a8e      	ldr	r2, [pc, #568]	; (8003128 <HAL_DMA_IRQHandler+0x24c>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0a9b      	lsrs	r3, r3, #10
 8002ef4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f06:	2208      	movs	r2, #8
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01a      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0204 	bic.w	r2, r2, #4
 8002f2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	2208      	movs	r2, #8
 8002f36:	409a      	lsls	r2, r3
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	2204      	movs	r2, #4
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0204 	orr.w	r2, r3, #4
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	2210      	movs	r2, #16
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d043      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03c      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d018      	beq.n	800301e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d108      	bne.n	800300c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d024      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
 800300a:	e01f      	b.n	800304c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
 800301c:	e016      	b.n	800304c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0208 	bic.w	r2, r2, #8
 800303a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	2220      	movs	r2, #32
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 808f 	beq.w	800317c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8087 	beq.w	800317c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003072:	2220      	movs	r2, #32
 8003074:	409a      	lsls	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b05      	cmp	r3, #5
 8003084:	d136      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0216 	bic.w	r2, r2, #22
 8003094:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <HAL_DMA_IRQHandler+0x1da>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0208 	bic.w	r2, r2, #8
 80030c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	223f      	movs	r2, #63	; 0x3f
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d07e      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
        }
        return;
 80030f2:	e079      	b.n	80031e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01d      	beq.n	800313e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	2b00      	cmp	r3, #0
 8003116:	d031      	beq.n	800317c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	e02c      	b.n	800317c <HAL_DMA_IRQHandler+0x2a0>
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000
 8003128:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d023      	beq.n	800317c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e01e      	b.n	800317c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10f      	bne.n	800316c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0210 	bic.w	r2, r2, #16
 800315a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	2b00      	cmp	r3, #0
 8003182:	d032      	beq.n	80031ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d022      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2205      	movs	r2, #5
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d307      	bcc.n	80031c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f2      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x2cc>
 80031c2:	e000      	b.n	80031c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
 80031e6:	e000      	b.n	80031ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80031e8:	bf00      	nop
    }
  }
}
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800320c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d108      	bne.n	8003230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800322e:	e007      	b.n	8003240 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	60da      	str	r2, [r3, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	3b10      	subs	r3, #16
 800325c:	4a13      	ldr	r2, [pc, #76]	; (80032ac <DMA_CalcBaseAndBitshift+0x60>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003266:	4a12      	ldr	r2, [pc, #72]	; (80032b0 <DMA_CalcBaseAndBitshift+0x64>)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d908      	bls.n	800328c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003282:	4013      	ands	r3, r2
 8003284:	1d1a      	adds	r2, r3, #4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	659a      	str	r2, [r3, #88]	; 0x58
 800328a:	e006      	b.n	800329a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	aaaaaaab 	.word	0xaaaaaaab
 80032b0:	08015b8c 	.word	0x08015b8c
 80032b4:	fffffc00 	.word	0xfffffc00

080032b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11f      	bne.n	8003312 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d856      	bhi.n	8003386 <DMA_CheckFifoParam+0xce>
 80032d8:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <DMA_CheckFifoParam+0x28>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	080032f1 	.word	0x080032f1
 80032e4:	08003303 	.word	0x08003303
 80032e8:	080032f1 	.word	0x080032f1
 80032ec:	08003387 	.word	0x08003387
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d046      	beq.n	800338a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003300:	e043      	b.n	800338a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800330a:	d140      	bne.n	800338e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003310:	e03d      	b.n	800338e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	d121      	bne.n	8003360 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d837      	bhi.n	8003392 <DMA_CheckFifoParam+0xda>
 8003322:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <DMA_CheckFifoParam+0x70>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003339 	.word	0x08003339
 800332c:	0800333f 	.word	0x0800333f
 8003330:	08003339 	.word	0x08003339
 8003334:	08003351 	.word	0x08003351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      break;
 800333c:	e030      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d025      	beq.n	8003396 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800334e:	e022      	b.n	8003396 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003358:	d11f      	bne.n	800339a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800335e:	e01c      	b.n	800339a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d903      	bls.n	800336e <DMA_CheckFifoParam+0xb6>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d003      	beq.n	8003374 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800336c:	e018      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      break;
 8003372:	e015      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00e      	beq.n	800339e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e00b      	b.n	800339e <DMA_CheckFifoParam+0xe6>
      break;
 8003386:	bf00      	nop
 8003388:	e00a      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
 800338c:	e008      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 800338e:	bf00      	nop
 8003390:	e006      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
 8003394:	e004      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003396:	bf00      	nop
 8003398:	e002      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <DMA_CheckFifoParam+0xe8>
      break;
 800339e:	bf00      	nop
    }
  } 
  
  return status; 
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop

080033b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e175      	b.n	80036bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 8164 	bne.w	80036b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d005      	beq.n	8003406 <HAL_GPIO_Init+0x56>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d130      	bne.n	8003468 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 0201 	and.w	r2, r3, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b03      	cmp	r3, #3
 8003472:	d017      	beq.n	80034a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d123      	bne.n	80034f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80be 	beq.w	80036b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_GPIO_Init+0x324>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a65      	ldr	r2, [pc, #404]	; (80036d4 <HAL_GPIO_Init+0x324>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_GPIO_Init+0x324>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003552:	4a61      	ldr	r2, [pc, #388]	; (80036d8 <HAL_GPIO_Init+0x328>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a58      	ldr	r2, [pc, #352]	; (80036dc <HAL_GPIO_Init+0x32c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d037      	beq.n	80035ee <HAL_GPIO_Init+0x23e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <HAL_GPIO_Init+0x330>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_GPIO_Init+0x23a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a56      	ldr	r2, [pc, #344]	; (80036e4 <HAL_GPIO_Init+0x334>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <HAL_GPIO_Init+0x236>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a55      	ldr	r2, [pc, #340]	; (80036e8 <HAL_GPIO_Init+0x338>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d025      	beq.n	80035e2 <HAL_GPIO_Init+0x232>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a54      	ldr	r2, [pc, #336]	; (80036ec <HAL_GPIO_Init+0x33c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <HAL_GPIO_Init+0x22e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a53      	ldr	r2, [pc, #332]	; (80036f0 <HAL_GPIO_Init+0x340>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x22a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a52      	ldr	r2, [pc, #328]	; (80036f4 <HAL_GPIO_Init+0x344>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x226>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a51      	ldr	r2, [pc, #324]	; (80036f8 <HAL_GPIO_Init+0x348>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x222>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a50      	ldr	r2, [pc, #320]	; (80036fc <HAL_GPIO_Init+0x34c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x21e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4f      	ldr	r2, [pc, #316]	; (8003700 <HAL_GPIO_Init+0x350>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x21a>
 80035c6:	2309      	movs	r3, #9
 80035c8:	e012      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035ca:	230a      	movs	r3, #10
 80035cc:	e010      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035ce:	2308      	movs	r3, #8
 80035d0:	e00e      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e00c      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035d6:	2306      	movs	r3, #6
 80035d8:	e00a      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035da:	2305      	movs	r3, #5
 80035dc:	e008      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035de:	2304      	movs	r3, #4
 80035e0:	e006      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035e2:	2303      	movs	r3, #3
 80035e4:	e004      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e002      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_GPIO_Init+0x240>
 80035ee:	2300      	movs	r3, #0
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f002 0203 	and.w	r2, r2, #3
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	4093      	lsls	r3, r2
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003600:	4935      	ldr	r1, [pc, #212]	; (80036d8 <HAL_GPIO_Init+0x328>)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	3302      	adds	r3, #2
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <HAL_GPIO_Init+0x354>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003632:	4a34      	ldr	r2, [pc, #208]	; (8003704 <HAL_GPIO_Init+0x354>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <HAL_GPIO_Init+0x354>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800365c:	4a29      	ldr	r2, [pc, #164]	; (8003704 <HAL_GPIO_Init+0x354>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003662:	4b28      	ldr	r3, [pc, #160]	; (8003704 <HAL_GPIO_Init+0x354>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003686:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_GPIO_Init+0x354>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_GPIO_Init+0x354>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <HAL_GPIO_Init+0x354>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3301      	adds	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	f67f ae86 	bls.w	80033d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3724      	adds	r7, #36	; 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40020400 	.word	0x40020400
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020c00 	.word	0x40020c00
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40021400 	.word	0x40021400
 80036f4:	40021800 	.word	0x40021800
 80036f8:	40021c00 	.word	0x40021c00
 80036fc:	40022000 	.word	0x40022000
 8003700:	40022400 	.word	0x40022400
 8003704:	40013c00 	.word	0x40013c00

08003708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e001      	b.n	800372a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003754:	e003      	b.n	800375e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	619a      	str	r2, [r3, #24]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800377c:	887a      	ldrh	r2, [r7, #2]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4013      	ands	r3, r2
 8003782:	041a      	lsls	r2, r3, #16
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43d9      	mvns	r1, r3
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	400b      	ands	r3, r1
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	619a      	str	r2, [r3, #24]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800379e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a0:	b08f      	sub	sp, #60	; 0x3c
 80037a2:	af0a      	add	r7, sp, #40	; 0x28
 80037a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e054      	b.n	800385a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f00f f996 	bl	8012afc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2203      	movs	r2, #3
 80037d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f008 f92f 	bl	800ba52 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	687e      	ldr	r6, [r7, #4]
 80037fc:	466d      	mov	r5, sp
 80037fe:	f106 0410 	add.w	r4, r6, #16
 8003802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800380e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003812:	1d33      	adds	r3, r6, #4
 8003814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f008 f810 	bl	800b83c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f008 f926 	bl	800ba74 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	687e      	ldr	r6, [r7, #4]
 8003830:	466d      	mov	r5, sp
 8003832:	f106 0410 	add.w	r4, r6, #16
 8003836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800383c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003842:	e885 0003 	stmia.w	r5, {r0, r1}
 8003846:	1d33      	adds	r3, r6, #4
 8003848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800384a:	6838      	ldr	r0, [r7, #0]
 800384c:	f009 fc62 	bl	800d114 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003862 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003862:	b590      	push	{r4, r7, lr}
 8003864:	b089      	sub	sp, #36	; 0x24
 8003866:	af04      	add	r7, sp, #16
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	4608      	mov	r0, r1
 800386c:	4611      	mov	r1, r2
 800386e:	461a      	mov	r2, r3
 8003870:	4603      	mov	r3, r0
 8003872:	70fb      	strb	r3, [r7, #3]
 8003874:	460b      	mov	r3, r1
 8003876:	70bb      	strb	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_HCD_HC_Init+0x28>
 8003886:	2302      	movs	r3, #2
 8003888:	e076      	b.n	8003978 <HAL_HCD_HC_Init+0x116>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	333d      	adds	r3, #61	; 0x3d
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	212c      	movs	r1, #44	; 0x2c
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	3338      	adds	r3, #56	; 0x38
 80038b2:	787a      	ldrb	r2, [r7, #1]
 80038b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3340      	adds	r3, #64	; 0x40
 80038c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038c6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3339      	adds	r3, #57	; 0x39
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	333f      	adds	r3, #63	; 0x3f
 80038e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80038ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	78ba      	ldrb	r2, [r7, #2]
 80038f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038f6:	b2d0      	uxtb	r0, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	333a      	adds	r3, #58	; 0x3a
 8003904:	4602      	mov	r2, r0
 8003906:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003908:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da09      	bge.n	8003924 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	333b      	adds	r3, #59	; 0x3b
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e008      	b.n	8003936 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	333b      	adds	r3, #59	; 0x3b
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	333c      	adds	r3, #60	; 0x3c
 8003944:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003948:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	787c      	ldrb	r4, [r7, #1]
 8003950:	78ba      	ldrb	r2, [r7, #2]
 8003952:	78f9      	ldrb	r1, [r7, #3]
 8003954:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003956:	9302      	str	r3, [sp, #8]
 8003958:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4623      	mov	r3, r4
 8003966:	f009 fd4f 	bl	800d408 <USB_HC_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_HCD_HC_Halt+0x1e>
 800399a:	2302      	movs	r3, #2
 800399c:	e00f      	b.n	80039be <HAL_HCD_HC_Halt+0x3e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f009 ff9f 	bl	800d8f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	4608      	mov	r0, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	461a      	mov	r2, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	70fb      	strb	r3, [r7, #3]
 80039da:	460b      	mov	r3, r1
 80039dc:	70bb      	strb	r3, [r7, #2]
 80039de:	4613      	mov	r3, r2
 80039e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	333b      	adds	r3, #59	; 0x3b
 80039f0:	78ba      	ldrb	r2, [r7, #2]
 80039f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	333f      	adds	r3, #63	; 0x3f
 8003a02:	787a      	ldrb	r2, [r7, #1]
 8003a04:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a06:	7c3b      	ldrb	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d112      	bne.n	8003a32 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	212c      	movs	r1, #44	; 0x2c
 8003a12:	fb01 f303 	mul.w	r3, r1, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	3342      	adds	r3, #66	; 0x42
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	333d      	adds	r3, #61	; 0x3d
 8003a2c:	7f3a      	ldrb	r2, [r7, #28]
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e008      	b.n	8003a44 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	212c      	movs	r1, #44	; 0x2c
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3342      	adds	r3, #66	; 0x42
 8003a40:	2202      	movs	r2, #2
 8003a42:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a44:	787b      	ldrb	r3, [r7, #1]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	f200 80c6 	bhi.w	8003bd8 <HAL_HCD_HC_SubmitRequest+0x210>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003bc5 	.word	0x08003bc5
 8003a5c:	08003ac9 	.word	0x08003ac9
 8003a60:	08003b47 	.word	0x08003b47
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003a64:	7c3b      	ldrb	r3, [r7, #16]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	f040 80b8 	bne.w	8003bdc <HAL_HCD_HC_SubmitRequest+0x214>
 8003a6c:	78bb      	ldrb	r3, [r7, #2]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 80b4 	bne.w	8003bdc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003a74:	8b3b      	ldrh	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3355      	adds	r3, #85	; 0x55
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3355      	adds	r3, #85	; 0x55
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3342      	adds	r3, #66	; 0x42
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003ab2:	e093      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	3342      	adds	r3, #66	; 0x42
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	701a      	strb	r2, [r3, #0]
      break;
 8003ac6:	e089      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ac8:	78bb      	ldrb	r3, [r7, #2]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11d      	bne.n	8003b0a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3355      	adds	r3, #85	; 0x55
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3342      	adds	r3, #66	; 0x42
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003af4:	e073      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3342      	adds	r3, #66	; 0x42
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
      break;
 8003b08:	e069      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	3354      	adds	r3, #84	; 0x54
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	3342      	adds	r3, #66	; 0x42
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
      break;
 8003b30:	e055      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3342      	adds	r3, #66	; 0x42
 8003b40:	2202      	movs	r2, #2
 8003b42:	701a      	strb	r2, [r3, #0]
      break;
 8003b44:	e04b      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b46:	78bb      	ldrb	r3, [r7, #2]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11d      	bne.n	8003b88 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3355      	adds	r3, #85	; 0x55
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	212c      	movs	r1, #44	; 0x2c
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3342      	adds	r3, #66	; 0x42
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b72:	e034      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3342      	adds	r3, #66	; 0x42
 8003b82:	2202      	movs	r2, #2
 8003b84:	701a      	strb	r2, [r3, #0]
      break;
 8003b86:	e02a      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	3354      	adds	r3, #84	; 0x54
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3342      	adds	r3, #66	; 0x42
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
      break;
 8003bae:	e016      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3342      	adds	r3, #66	; 0x42
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	701a      	strb	r2, [r3, #0]
      break;
 8003bc2:	e00c      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	212c      	movs	r1, #44	; 0x2c
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	3342      	adds	r3, #66	; 0x42
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003bdc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	212c      	movs	r1, #44	; 0x2c
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	3344      	adds	r3, #68	; 0x44
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	8b3a      	ldrh	r2, [r7, #24]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	202c      	movs	r0, #44	; 0x2c
 8003bf8:	fb00 f303 	mul.w	r3, r0, r3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334c      	adds	r3, #76	; 0x4c
 8003c00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3360      	adds	r3, #96	; 0x60
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3350      	adds	r3, #80	; 0x50
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	3339      	adds	r3, #57	; 0x39
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3361      	adds	r3, #97	; 0x61
 8003c46:	2200      	movs	r2, #0
 8003c48:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	222c      	movs	r2, #44	; 0x2c
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	3338      	adds	r3, #56	; 0x38
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	18d1      	adds	r1, r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	f009 fcf2 	bl	800d64c <USB_HC_StartXfer>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop

08003c74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f009 f97e 	bl	800cf8c <USB_GetMode>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	f040 80f6 	bne.w	8003e84 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f009 f8c1 	bl	800ce24 <USB_ReadInterrupts>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80ec 	beq.w	8003e82 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f009 f8b8 	bl	800ce24 <USB_ReadInterrupts>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cbe:	d104      	bne.n	8003cca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f009 f8a8 	bl	800ce24 <USB_ReadInterrupts>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cde:	d104      	bne.n	8003cea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ce8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f009 f898 	bl	800ce24 <USB_ReadInterrupts>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cfe:	d104      	bne.n	8003d0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f009 f888 	bl	800ce24 <USB_ReadInterrupts>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d103      	bne.n	8003d26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2202      	movs	r2, #2
 8003d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f009 f87a 	bl	800ce24 <USB_ReadInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3a:	d11c      	bne.n	8003d76 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d56:	2110      	movs	r1, #16
 8003d58:	6938      	ldr	r0, [r7, #16]
 8003d5a:	f008 f835 	bl	800bdc8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d5e:	6938      	ldr	r0, [r7, #16]
 8003d60:	f008 f866 	bl	800be30 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f009 fa86 	bl	800d27c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f00e ff51 	bl	8012c18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f009 f852 	bl	800ce24 <USB_ReadInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d8a:	d102      	bne.n	8003d92 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f001 f9ce 	bl	800512e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f009 f844 	bl	800ce24 <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d106      	bne.n	8003db4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f00e ff1a 	bl	8012be0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2208      	movs	r2, #8
 8003db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f009 f833 	bl	800ce24 <USB_ReadInterrupts>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d101      	bne.n	8003dcc <HAL_HCD_IRQHandler+0x158>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_HCD_IRQHandler+0x15a>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d012      	beq.n	8003df8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699a      	ldr	r2, [r3, #24]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0210 	bic.w	r2, r2, #16
 8003de0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f001 f8d1 	bl	8004f8a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0210 	orr.w	r2, r2, #16
 8003df6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f009 f811 	bl	800ce24 <USB_ReadInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e0c:	d13a      	bne.n	8003e84 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f009 fd5c 	bl	800d8d0 <USB_HC_ReadInterrupt>
 8003e18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e025      	b.n	8003e6c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d018      	beq.n	8003e66 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4a:	d106      	bne.n	8003e5a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8ab 	bl	8003fae <HCD_HC_IN_IRQHandler>
 8003e58:	e005      	b.n	8003e66 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fcc6 	bl	80047f2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3d4      	bcc.n	8003e20 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e7e:	615a      	str	r2, [r3, #20]
 8003e80:	e000      	b.n	8003e84 <HAL_HCD_IRQHandler+0x210>
      return;
 8003e82:	bf00      	nop
    }
  }
}
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_HCD_Start+0x16>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e013      	b.n	8003ec8 <HAL_HCD_Start+0x3e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2101      	movs	r1, #1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f009 fa48 	bl	800d344 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f007 fdb9 	bl	800ba30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_HCD_Stop+0x16>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e00d      	b.n	8003f02 <HAL_HCD_Stop+0x32>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f009 fe36 	bl	800db64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f009 f9ea 	bl	800d2f0 <USB_ResetPort>
 8003f1c:	4603      	mov	r3, r0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	212c      	movs	r1, #44	; 0x2c
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3360      	adds	r3, #96	; 0x60
 8003f40:	781b      	ldrb	r3, [r3, #0]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	3350      	adds	r3, #80	; 0x50
 8003f68:	681b      	ldr	r3, [r3, #0]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f009 fa2e 	bl	800d3e4 <USB_GetCurrentFrame>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f009 fa09 	bl	800d3b6 <USB_GetHostSpeed>
 8003fa4:	4603      	mov	r3, r0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b086      	sub	sp, #24
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f008 ff39 	bl	800ce4a <USB_ReadChInterrupts>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d11a      	bne.n	8004018 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3361      	adds	r3, #97	; 0x61
 8004002:	2207      	movs	r2, #7
 8004004:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f009 fc6e 	bl	800d8f2 <USB_HC_Halt>
 8004016:	e0a2      	b.n	800415e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f008 ff11 	bl	800ce4a <USB_ReadChInterrupts>
 8004028:	4603      	mov	r3, r0
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d11b      	bne.n	800406c <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	461a      	mov	r2, r3
 8004042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004046:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	212c      	movs	r1, #44	; 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	3361      	adds	r3, #97	; 0x61
 8004056:	2208      	movs	r2, #8
 8004058:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f009 fc44 	bl	800d8f2 <USB_HC_Halt>
 800406a:	e078      	b.n	800415e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f008 fee7 	bl	800ce4a <USB_ReadChInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d11a      	bne.n	80040bc <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	461a      	mov	r2, r3
 8004094:	2308      	movs	r3, #8
 8004096:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	212c      	movs	r1, #44	; 0x2c
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	4413      	add	r3, r2
 80040a4:	3361      	adds	r3, #97	; 0x61
 80040a6:	2206      	movs	r2, #6
 80040a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f009 fc1c 	bl	800d8f2 <USB_HC_Halt>
 80040ba:	e050      	b.n	800415e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f008 febf 	bl	800ce4a <USB_ReadChInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d11b      	bne.n	8004110 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	461a      	mov	r2, r3
 80040e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3361      	adds	r3, #97	; 0x61
 80040fa:	2209      	movs	r2, #9
 80040fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f009 fbf2 	bl	800d8f2 <USB_HC_Halt>
 800410e:	e026      	b.n	800415e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f008 fe95 	bl	800ce4a <USB_ReadChInterrupts>
 8004120:	4603      	mov	r3, r0
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d119      	bne.n	800415e <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4413      	add	r3, r2
 8004132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004136:	461a      	mov	r2, r3
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	3361      	adds	r3, #97	; 0x61
 800414a:	2207      	movs	r2, #7
 800414c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f009 fbca 	bl	800d8f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f008 fe6e 	bl	800ce4a <USB_ReadChInterrupts>
 800416e:	4603      	mov	r3, r0
 8004170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004178:	d112      	bne.n	80041a0 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f009 fbb4 	bl	800d8f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004196:	461a      	mov	r2, r3
 8004198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800419c:	6093      	str	r3, [r2, #8]
 800419e:	e325      	b.n	80047ec <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f008 fe4d 	bl	800ce4a <USB_ReadChInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	f040 80e8 	bne.w	800438c <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c8:	461a      	mov	r2, r3
 80041ca:	2320      	movs	r3, #32
 80041cc:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d019      	beq.n	800420a <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	3348      	adds	r3, #72	; 0x48
 80041e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	0159      	lsls	r1, r3, #5
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	440b      	add	r3, r1
 80041ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80041f8:	1ad2      	subs	r2, r2, r3
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	202c      	movs	r0, #44	; 0x2c
 8004200:	fb00 f303 	mul.w	r3, r0, r3
 8004204:	440b      	add	r3, r1
 8004206:	3350      	adds	r3, #80	; 0x50
 8004208:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	3361      	adds	r3, #97	; 0x61
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	335c      	adds	r3, #92	; 0x5c
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	461a      	mov	r2, r3
 800423c:	2301      	movs	r3, #1
 800423e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	333f      	adds	r3, #63	; 0x3f
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	333f      	adds	r3, #63	; 0x3f
 8004262:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004264:	2b02      	cmp	r3, #2
 8004266:	d111      	bne.n	800428c <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f009 fb3d 	bl	800d8f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	461a      	mov	r2, r3
 8004286:	2310      	movs	r3, #16
 8004288:	6093      	str	r3, [r2, #8]
 800428a:	e03a      	b.n	8004302 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	333f      	adds	r3, #63	; 0x3f
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d009      	beq.n	80042b4 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	333f      	adds	r3, #63	; 0x3f
 80042ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d126      	bne.n	8004302 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	0151      	lsls	r1, r2, #5
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	440a      	add	r2, r1
 80042ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	212c      	movs	r1, #44	; 0x2c
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	3360      	adds	r3, #96	; 0x60
 80042e2:	2201      	movs	r2, #1
 80042e4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	b2d9      	uxtb	r1, r3
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	202c      	movs	r0, #44	; 0x2c
 80042f0:	fb00 f303 	mul.w	r3, r0, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3360      	adds	r3, #96	; 0x60
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f00e fc99 	bl	8012c34 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d12b      	bne.n	8004362 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	212c      	movs	r1, #44	; 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	3348      	adds	r3, #72	; 0x48
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	202c      	movs	r0, #44	; 0x2c
 8004320:	fb00 f202 	mul.w	r2, r0, r2
 8004324:	440a      	add	r2, r1
 8004326:	3240      	adds	r2, #64	; 0x40
 8004328:	8812      	ldrh	r2, [r2, #0]
 800432a:	fbb3 f3f2 	udiv	r3, r3, r2
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 825a 	beq.w	80047ec <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	212c      	movs	r1, #44	; 0x2c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	3354      	adds	r3, #84	; 0x54
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f083 0301 	eor.w	r3, r3, #1
 800434c:	b2d8      	uxtb	r0, r3
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	3354      	adds	r3, #84	; 0x54
 800435c:	4602      	mov	r2, r0
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e244      	b.n	80047ec <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	212c      	movs	r1, #44	; 0x2c
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	4413      	add	r3, r2
 800436e:	3354      	adds	r3, #84	; 0x54
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2d8      	uxtb	r0, r3
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3354      	adds	r3, #84	; 0x54
 8004386:	4602      	mov	r2, r0
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e22f      	b.n	80047ec <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f008 fd57 	bl	800ce4a <USB_ReadChInterrupts>
 800439c:	4603      	mov	r3, r0
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d109      	bne.n	80043ba <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b2:	461a      	mov	r2, r3
 80043b4:	2320      	movs	r3, #32
 80043b6:	6093      	str	r3, [r2, #8]
 80043b8:	e218      	b.n	80047ec <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f008 fd40 	bl	800ce4a <USB_ReadChInterrupts>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	f040 816b 	bne.w	80046ac <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	461a      	mov	r2, r3
 80043e4:	2302      	movs	r3, #2
 80043e6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	3361      	adds	r3, #97	; 0x61
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d112      	bne.n	8004422 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	212c      	movs	r1, #44	; 0x2c
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	3361      	adds	r3, #97	; 0x61
 800440a:	2202      	movs	r2, #2
 800440c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	3360      	adds	r3, #96	; 0x60
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e135      	b.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	3361      	adds	r3, #97	; 0x61
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b06      	cmp	r3, #6
 8004434:	d112      	bne.n	800445c <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	212c      	movs	r1, #44	; 0x2c
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	4413      	add	r3, r2
 8004442:	3361      	adds	r3, #97	; 0x61
 8004444:	2202      	movs	r2, #2
 8004446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	212c      	movs	r1, #44	; 0x2c
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	3360      	adds	r3, #96	; 0x60
 8004456:	2205      	movs	r2, #5
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e118      	b.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3361      	adds	r3, #97	; 0x61
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b07      	cmp	r3, #7
 800446e:	d009      	beq.n	8004484 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	4413      	add	r3, r2
 800447c:	3361      	adds	r3, #97	; 0x61
 800447e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004480:	2b09      	cmp	r3, #9
 8004482:	d159      	bne.n	8004538 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3361      	adds	r3, #97	; 0x61
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	212c      	movs	r1, #44	; 0x2c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	335c      	adds	r3, #92	; 0x5c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	202c      	movs	r0, #44	; 0x2c
 80044ae:	fb00 f303 	mul.w	r3, r0, r3
 80044b2:	440b      	add	r3, r1
 80044b4:	335c      	adds	r3, #92	; 0x5c
 80044b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	212c      	movs	r1, #44	; 0x2c
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	335c      	adds	r3, #92	; 0x5c
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d912      	bls.n	80044f2 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	335c      	adds	r3, #92	; 0x5c
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3360      	adds	r3, #96	; 0x60
 80044ec:	2204      	movs	r2, #4
 80044ee:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044f0:	e0cd      	b.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3360      	adds	r3, #96	; 0x60
 8004500:	2202      	movs	r2, #2
 8004502:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800451a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004522:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004536:	e0aa      	b.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3361      	adds	r3, #97	; 0x61
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b05      	cmp	r3, #5
 800454a:	d109      	bne.n	8004560 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	3361      	adds	r3, #97	; 0x61
 800455a:	2202      	movs	r2, #2
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e096      	b.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3361      	adds	r3, #97	; 0x61
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b03      	cmp	r3, #3
 8004572:	d109      	bne.n	8004588 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3361      	adds	r3, #97	; 0x61
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e082      	b.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	3361      	adds	r3, #97	; 0x61
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b04      	cmp	r3, #4
 800459a:	d13f      	bne.n	800461c <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3361      	adds	r3, #97	; 0x61
 80045aa:	2202      	movs	r2, #2
 80045ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	3360      	adds	r3, #96	; 0x60
 80045bc:	2202      	movs	r2, #2
 80045be:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	212c      	movs	r1, #44	; 0x2c
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	4413      	add	r3, r2
 80045cc:	333f      	adds	r3, #63	; 0x3f
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	212c      	movs	r1, #44	; 0x2c
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	333f      	adds	r3, #63	; 0x3f
 80045e2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d152      	bne.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fe:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004606:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e038      	b.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3361      	adds	r3, #97	; 0x61
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d123      	bne.n	8004678 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3361      	adds	r3, #97	; 0x61
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	335c      	adds	r3, #92	; 0x5c
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	202c      	movs	r0, #44	; 0x2c
 800465a:	fb00 f303 	mul.w	r3, r0, r3
 800465e:	440b      	add	r3, r1
 8004660:	335c      	adds	r3, #92	; 0x5c
 8004662:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3360      	adds	r3, #96	; 0x60
 8004672:	2204      	movs	r2, #4
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e00a      	b.n	800468e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3361      	adds	r3, #97	; 0x61
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b02      	cmp	r3, #2
 800468a:	f000 80ae 	beq.w	80047ea <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	b2d9      	uxtb	r1, r3
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	202c      	movs	r0, #44	; 0x2c
 8004698:	fb00 f303 	mul.w	r3, r0, r3
 800469c:	4413      	add	r3, r2
 800469e:	3360      	adds	r3, #96	; 0x60
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f00e fac5 	bl	8012c34 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046aa:	e09f      	b.n	80047ec <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f008 fbc7 	bl	800ce4a <USB_ReadChInterrupts>
 80046bc:	4603      	mov	r3, r0
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d123      	bne.n	800470e <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d2:	461a      	mov	r2, r3
 80046d4:	2340      	movs	r3, #64	; 0x40
 80046d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	212c      	movs	r1, #44	; 0x2c
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	4413      	add	r3, r2
 80046e4:	3361      	adds	r3, #97	; 0x61
 80046e6:	2205      	movs	r2, #5
 80046e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	212c      	movs	r1, #44	; 0x2c
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	335c      	adds	r3, #92	; 0x5c
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f009 f8f3 	bl	800d8f2 <USB_HC_Halt>
 800470c:	e06e      	b.n	80047ec <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	4611      	mov	r1, r2
 8004718:	4618      	mov	r0, r3
 800471a:	f008 fb96 	bl	800ce4a <USB_ReadChInterrupts>
 800471e:	4603      	mov	r3, r0
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b10      	cmp	r3, #16
 8004726:	d161      	bne.n	80047ec <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	212c      	movs	r1, #44	; 0x2c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	333f      	adds	r3, #63	; 0x3f
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d11a      	bne.n	8004772 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	335c      	adds	r3, #92	; 0x5c
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3361      	adds	r3, #97	; 0x61
 800475c:	2204      	movs	r2, #4
 800475e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f009 f8c1 	bl	800d8f2 <USB_HC_Halt>
 8004770:	e031      	b.n	80047d6 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	333f      	adds	r3, #63	; 0x3f
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	333f      	adds	r3, #63	; 0x3f
 8004794:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004796:	2b02      	cmp	r3, #2
 8004798:	d11d      	bne.n	80047d6 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	212c      	movs	r1, #44	; 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	335c      	adds	r3, #92	; 0x5c
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d110      	bne.n	80047d6 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3361      	adds	r3, #97	; 0x61
 80047c2:	2204      	movs	r2, #4
 80047c4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f009 f88e 	bl	800d8f2 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e2:	461a      	mov	r2, r3
 80047e4:	2310      	movs	r3, #16
 80047e6:	6093      	str	r3, [r2, #8]
 80047e8:	e000      	b.n	80047ec <HCD_HC_IN_IRQHandler+0x83e>
        return;
 80047ea:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b088      	sub	sp, #32
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f008 fb17 	bl	800ce4a <USB_ReadChInterrupts>
 800481c:	4603      	mov	r3, r0
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d11a      	bne.n	800485c <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	4413      	add	r3, r2
 800482e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004832:	461a      	mov	r2, r3
 8004834:	2304      	movs	r3, #4
 8004836:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	212c      	movs	r1, #44	; 0x2c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	3361      	adds	r3, #97	; 0x61
 8004846:	2207      	movs	r2, #7
 8004848:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f009 f84c 	bl	800d8f2 <USB_HC_Halt>
 800485a:	e393      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f008 faef 	bl	800ce4a <USB_ReadChInterrupts>
 800486c:	4603      	mov	r3, r0
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d137      	bne.n	80048e6 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	461a      	mov	r2, r3
 8004884:	2320      	movs	r3, #32
 8004886:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	333d      	adds	r3, #61	; 0x3d
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 8373 	bne.w	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	212c      	movs	r1, #44	; 0x2c
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	333d      	adds	r3, #61	; 0x3d
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	212c      	movs	r1, #44	; 0x2c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	3360      	adds	r3, #96	; 0x60
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	3361      	adds	r3, #97	; 0x61
 80048d0:	2203      	movs	r2, #3
 80048d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	4611      	mov	r1, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f009 f807 	bl	800d8f2 <USB_HC_Halt>
 80048e4:	e34e      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	4611      	mov	r1, r2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f008 faaa 	bl	800ce4a <USB_ReadChInterrupts>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004900:	d112      	bne.n	8004928 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	4413      	add	r3, r2
 800490a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490e:	461a      	mov	r2, r3
 8004910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004914:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f008 ffe6 	bl	800d8f2 <USB_HC_Halt>
 8004926:	e32d      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f008 fa89 	bl	800ce4a <USB_ReadChInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d142      	bne.n	80049c8 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	212c      	movs	r1, #44	; 0x2c
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	4413      	add	r3, r2
 800494e:	335c      	adds	r3, #92	; 0x5c
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f008 fa73 	bl	800ce4a <USB_ReadChInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d111      	bne.n	8004992 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	212c      	movs	r1, #44	; 0x2c
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	4413      	add	r3, r2
 800497a:	333d      	adds	r3, #61	; 0x3d
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498c:	461a      	mov	r2, r3
 800498e:	2340      	movs	r3, #64	; 0x40
 8004990:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499e:	461a      	mov	r2, r3
 80049a0:	2301      	movs	r3, #1
 80049a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	212c      	movs	r1, #44	; 0x2c
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	3361      	adds	r3, #97	; 0x61
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f008 ff96 	bl	800d8f2 <USB_HC_Halt>
 80049c6:	e2dd      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f008 fa39 	bl	800ce4a <USB_ReadChInterrupts>
 80049d8:	4603      	mov	r3, r0
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d12c      	bne.n	8004a3c <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	3361      	adds	r3, #97	; 0x61
 80049f0:	2205      	movs	r2, #5
 80049f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	333d      	adds	r3, #61	; 0x3d
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	212c      	movs	r1, #44	; 0x2c
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	335c      	adds	r3, #92	; 0x5c
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f008 ff65 	bl	800d8f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	461a      	mov	r2, r3
 8004a36:	2340      	movs	r3, #64	; 0x40
 8004a38:	6093      	str	r3, [r2, #8]
 8004a3a:	e2a3      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f008 f9ff 	bl	800ce4a <USB_ReadChInterrupts>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d11a      	bne.n	8004a8c <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a62:	461a      	mov	r2, r3
 8004a64:	2308      	movs	r3, #8
 8004a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3361      	adds	r3, #97	; 0x61
 8004a76:	2206      	movs	r2, #6
 8004a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	4611      	mov	r1, r2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f008 ff34 	bl	800d8f2 <USB_HC_Halt>
 8004a8a:	e27b      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f008 f9d7 	bl	800ce4a <USB_ReadChInterrupts>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d140      	bne.n	8004b28 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	212c      	movs	r1, #44	; 0x2c
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	335c      	adds	r3, #92	; 0x5c
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3361      	adds	r3, #97	; 0x61
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	212c      	movs	r1, #44	; 0x2c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	333d      	adds	r3, #61	; 0x3d
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d112      	bne.n	8004b04 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	333c      	adds	r3, #60	; 0x3c
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	333d      	adds	r3, #61	; 0x3d
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f008 feef 	bl	800d8f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	461a      	mov	r2, r3
 8004b22:	2310      	movs	r3, #16
 8004b24:	6093      	str	r3, [r2, #8]
 8004b26:	e22d      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	4611      	mov	r1, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f008 f989 	bl	800ce4a <USB_ReadChInterrupts>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b80      	cmp	r3, #128	; 0x80
 8004b40:	d164      	bne.n	8004c0c <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d111      	bne.n	8004b6e <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	3361      	adds	r3, #97	; 0x61
 8004b58:	2207      	movs	r2, #7
 8004b5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	4611      	mov	r1, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f008 fec3 	bl	800d8f2 <USB_HC_Halt>
 8004b6c:	e044      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	335c      	adds	r3, #92	; 0x5c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	202c      	movs	r0, #44	; 0x2c
 8004b86:	fb00 f303 	mul.w	r3, r0, r3
 8004b8a:	440b      	add	r3, r1
 8004b8c:	335c      	adds	r3, #92	; 0x5c
 8004b8e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	335c      	adds	r3, #92	; 0x5c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d920      	bls.n	8004be6 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	212c      	movs	r1, #44	; 0x2c
 8004baa:	fb01 f303 	mul.w	r3, r1, r3
 8004bae:	4413      	add	r3, r2
 8004bb0:	335c      	adds	r3, #92	; 0x5c
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	212c      	movs	r1, #44	; 0x2c
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3360      	adds	r3, #96	; 0x60
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	b2d9      	uxtb	r1, r3
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	202c      	movs	r0, #44	; 0x2c
 8004bd2:	fb00 f303 	mul.w	r3, r0, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3360      	adds	r3, #96	; 0x60
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f00e f828 	bl	8012c34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004be4:	e008      	b.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3360      	adds	r3, #96	; 0x60
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c04:	461a      	mov	r2, r3
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	6093      	str	r3, [r2, #8]
 8004c0a:	e1bb      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f008 f917 	bl	800ce4a <USB_ReadChInterrupts>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c26:	d11b      	bne.n	8004c60 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	212c      	movs	r1, #44	; 0x2c
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	3361      	adds	r3, #97	; 0x61
 8004c36:	2209      	movs	r2, #9
 8004c38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f008 fe54 	bl	800d8f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c56:	461a      	mov	r2, r3
 8004c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c5c:	6093      	str	r3, [r2, #8]
 8004c5e:	e191      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f008 f8ed 	bl	800ce4a <USB_ReadChInterrupts>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	f040 8184 	bne.w	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	212c      	movs	r1, #44	; 0x2c
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3361      	adds	r3, #97	; 0x61
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f040 8087 	bne.w	8004db2 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	212c      	movs	r1, #44	; 0x2c
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	3361      	adds	r3, #97	; 0x61
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3360      	adds	r3, #96	; 0x60
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	333f      	adds	r3, #63	; 0x3f
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d00a      	beq.n	8004cf2 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	333f      	adds	r3, #63	; 0x3f
 8004cea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	f040 8139 	bne.w	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d113      	bne.n	8004d22 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	3355      	adds	r3, #85	; 0x55
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f083 0301 	eor.w	r3, r3, #1
 8004d0e:	b2d8      	uxtb	r0, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	212c      	movs	r1, #44	; 0x2c
 8004d16:	fb01 f303 	mul.w	r3, r1, r3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3355      	adds	r3, #85	; 0x55
 8004d1e:	4602      	mov	r2, r0
 8004d20:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	f040 811c 	bne.w	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	212c      	movs	r1, #44	; 0x2c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	334c      	adds	r3, #76	; 0x4c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8111 	beq.w	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	212c      	movs	r1, #44	; 0x2c
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	334c      	adds	r3, #76	; 0x4c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	202c      	movs	r0, #44	; 0x2c
 8004d58:	fb00 f202 	mul.w	r2, r0, r2
 8004d5c:	440a      	add	r2, r1
 8004d5e:	3240      	adds	r2, #64	; 0x40
 8004d60:	8812      	ldrh	r2, [r2, #0]
 8004d62:	4413      	add	r3, r2
 8004d64:	3b01      	subs	r3, #1
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	202c      	movs	r0, #44	; 0x2c
 8004d6c:	fb00 f202 	mul.w	r2, r0, r2
 8004d70:	440a      	add	r2, r1
 8004d72:	3240      	adds	r2, #64	; 0x40
 8004d74:	8812      	ldrh	r2, [r2, #0]
 8004d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80ee 	beq.w	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	212c      	movs	r1, #44	; 0x2c
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	3355      	adds	r3, #85	; 0x55
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	f083 0301 	eor.w	r3, r3, #1
 8004d9c:	b2d8      	uxtb	r0, r3
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	212c      	movs	r1, #44	; 0x2c
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	4413      	add	r3, r2
 8004daa:	3355      	adds	r3, #85	; 0x55
 8004dac:	4602      	mov	r2, r0
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e0d8      	b.n	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	212c      	movs	r1, #44	; 0x2c
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3361      	adds	r3, #97	; 0x61
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d109      	bne.n	8004dda <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3361      	adds	r3, #97	; 0x61
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e0c4      	b.n	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	212c      	movs	r1, #44	; 0x2c
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	3361      	adds	r3, #97	; 0x61
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d112      	bne.n	8004e14 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	212c      	movs	r1, #44	; 0x2c
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	3361      	adds	r3, #97	; 0x61
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	212c      	movs	r1, #44	; 0x2c
 8004e06:	fb01 f303 	mul.w	r3, r1, r3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3360      	adds	r3, #96	; 0x60
 8004e0e:	2202      	movs	r2, #2
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	e0a7      	b.n	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	212c      	movs	r1, #44	; 0x2c
 8004e1a:	fb01 f303 	mul.w	r3, r1, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	3361      	adds	r3, #97	; 0x61
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d112      	bne.n	8004e4e <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	3361      	adds	r3, #97	; 0x61
 8004e36:	2202      	movs	r2, #2
 8004e38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	3360      	adds	r3, #96	; 0x60
 8004e48:	2202      	movs	r2, #2
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	e08a      	b.n	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	212c      	movs	r1, #44	; 0x2c
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	4413      	add	r3, r2
 8004e5a:	3361      	adds	r3, #97	; 0x61
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	d112      	bne.n	8004e88 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	212c      	movs	r1, #44	; 0x2c
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3361      	adds	r3, #97	; 0x61
 8004e70:	2202      	movs	r2, #2
 8004e72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	212c      	movs	r1, #44	; 0x2c
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	3360      	adds	r3, #96	; 0x60
 8004e82:	2205      	movs	r2, #5
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e06d      	b.n	8004f64 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	212c      	movs	r1, #44	; 0x2c
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	3361      	adds	r3, #97	; 0x61
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b07      	cmp	r3, #7
 8004e9a:	d009      	beq.n	8004eb0 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	212c      	movs	r1, #44	; 0x2c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3361      	adds	r3, #97	; 0x61
 8004eaa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004eac:	2b09      	cmp	r3, #9
 8004eae:	d168      	bne.n	8004f82 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	212c      	movs	r1, #44	; 0x2c
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	3361      	adds	r3, #97	; 0x61
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	335c      	adds	r3, #92	; 0x5c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	202c      	movs	r0, #44	; 0x2c
 8004eda:	fb00 f303 	mul.w	r3, r0, r3
 8004ede:	440b      	add	r3, r1
 8004ee0:	335c      	adds	r3, #92	; 0x5c
 8004ee2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	212c      	movs	r1, #44	; 0x2c
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	335c      	adds	r3, #92	; 0x5c
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d912      	bls.n	8004f1e <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	212c      	movs	r1, #44	; 0x2c
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	335c      	adds	r3, #92	; 0x5c
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	212c      	movs	r1, #44	; 0x2c
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	3360      	adds	r3, #96	; 0x60
 8004f18:	2204      	movs	r2, #4
 8004f1a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f1c:	e021      	b.n	8004f62 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	212c      	movs	r1, #44	; 0x2c
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	4413      	add	r3, r2
 8004f2a:	3360      	adds	r3, #96	; 0x60
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f46:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f4e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f62:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	b2d9      	uxtb	r1, r3
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	202c      	movs	r0, #44	; 0x2c
 8004f6e:	fb00 f303 	mul.w	r3, r0, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	3360      	adds	r3, #96	; 0x60
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f00d fe5a 	bl	8012c34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f80:	e000      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8004f82:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b08a      	sub	sp, #40	; 0x28
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	0c5b      	lsrs	r3, r3, #17
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fbe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d004      	beq.n	8004fd0 <HCD_RXQLVL_IRQHandler+0x46>
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	f000 80a9 	beq.w	8005120 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004fce:	e0aa      	b.n	8005126 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80a6 	beq.w	8005124 <HCD_RXQLVL_IRQHandler+0x19a>
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	212c      	movs	r1, #44	; 0x2c
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3344      	adds	r3, #68	; 0x44
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 809b 	beq.w	8005124 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	212c      	movs	r1, #44	; 0x2c
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3350      	adds	r3, #80	; 0x50
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	441a      	add	r2, r3
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	202c      	movs	r0, #44	; 0x2c
 8005008:	fb00 f303 	mul.w	r3, r0, r3
 800500c:	440b      	add	r3, r1
 800500e:	334c      	adds	r3, #76	; 0x4c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d87a      	bhi.n	800510c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	212c      	movs	r1, #44	; 0x2c
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	4413      	add	r3, r2
 8005026:	3344      	adds	r3, #68	; 0x44
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	b292      	uxth	r2, r2
 800502e:	4619      	mov	r1, r3
 8005030:	f007 fd64 	bl	800cafc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	212c      	movs	r1, #44	; 0x2c
 800503a:	fb01 f303 	mul.w	r3, r1, r3
 800503e:	4413      	add	r3, r2
 8005040:	3344      	adds	r3, #68	; 0x44
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	441a      	add	r2, r3
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	202c      	movs	r0, #44	; 0x2c
 800504e:	fb00 f303 	mul.w	r3, r0, r3
 8005052:	440b      	add	r3, r1
 8005054:	3344      	adds	r3, #68	; 0x44
 8005056:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	212c      	movs	r1, #44	; 0x2c
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	4413      	add	r3, r2
 8005064:	3350      	adds	r3, #80	; 0x50
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	441a      	add	r2, r3
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	202c      	movs	r0, #44	; 0x2c
 8005072:	fb00 f303 	mul.w	r3, r0, r3
 8005076:	440b      	add	r3, r1
 8005078:	3350      	adds	r3, #80	; 0x50
 800507a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	4413      	add	r3, r2
 8005084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	0cdb      	lsrs	r3, r3, #19
 800508c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005090:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	212c      	movs	r1, #44	; 0x2c
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	4413      	add	r3, r2
 800509e:	3340      	adds	r3, #64	; 0x40
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d13c      	bne.n	8005124 <HCD_RXQLVL_IRQHandler+0x19a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d039      	beq.n	8005124 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	461a      	mov	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	212c      	movs	r1, #44	; 0x2c
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	3354      	adds	r3, #84	; 0x54
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f083 0301 	eor.w	r3, r3, #1
 80050f6:	b2d8      	uxtb	r0, r3
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	212c      	movs	r1, #44	; 0x2c
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	4413      	add	r3, r2
 8005104:	3354      	adds	r3, #84	; 0x54
 8005106:	4602      	mov	r2, r0
 8005108:	701a      	strb	r2, [r3, #0]
      break;
 800510a:	e00b      	b.n	8005124 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	212c      	movs	r1, #44	; 0x2c
 8005112:	fb01 f303 	mul.w	r3, r1, r3
 8005116:	4413      	add	r3, r2
 8005118:	3360      	adds	r3, #96	; 0x60
 800511a:	2204      	movs	r2, #4
 800511c:	701a      	strb	r2, [r3, #0]
      break;
 800511e:	e001      	b.n	8005124 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005124:	bf00      	nop
  }
}
 8005126:	bf00      	nop
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800515a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d10b      	bne.n	800517e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d102      	bne.n	8005176 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f00d fd43 	bl	8012bfc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f043 0302 	orr.w	r3, r3, #2
 800517c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b08      	cmp	r3, #8
 8005186:	d132      	bne.n	80051ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f043 0308 	orr.w	r3, r3, #8
 800518e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b04      	cmp	r3, #4
 8005198:	d126      	bne.n	80051e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d113      	bne.n	80051ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80051a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ac:	d106      	bne.n	80051bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f008 f861 	bl	800d27c <USB_InitFSLSPClkSel>
 80051ba:	e011      	b.n	80051e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2101      	movs	r1, #1
 80051c2:	4618      	mov	r0, r3
 80051c4:	f008 f85a 	bl	800d27c <USB_InitFSLSPClkSel>
 80051c8:	e00a      	b.n	80051e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d106      	bne.n	80051e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d8:	461a      	mov	r2, r3
 80051da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80051de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f00d fd35 	bl	8012c50 <HAL_HCD_PortEnabled_Callback>
 80051e6:	e002      	b.n	80051ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f00d fd3f 	bl	8012c6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d103      	bne.n	8005200 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f043 0320 	orr.w	r3, r3, #32
 80051fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005206:	461a      	mov	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6013      	str	r3, [r2, #0]
}
 800520c:	bf00      	nop
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005216:	b08f      	sub	sp, #60	; 0x3c
 8005218:	af0a      	add	r7, sp, #40	; 0x28
 800521a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e116      	b.n	8005454 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f00d f893 	bl	801236c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2203      	movs	r2, #3
 800524a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f006 fbf4 	bl	800ba52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	687e      	ldr	r6, [r7, #4]
 8005272:	466d      	mov	r5, sp
 8005274:	f106 0410 	add.w	r4, r6, #16
 8005278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800527a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800527c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800527e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005280:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005284:	e885 0003 	stmia.w	r5, {r0, r1}
 8005288:	1d33      	adds	r3, r6, #4
 800528a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800528c:	6838      	ldr	r0, [r7, #0]
 800528e:	f006 fad5 	bl	800b83c <USB_CoreInit>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0d7      	b.n	8005454 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f006 fbe2 	bl	800ba74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	e04a      	b.n	800534c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	333d      	adds	r3, #61	; 0x3d
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	333c      	adds	r3, #60	; 0x3c
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052de:	7bfa      	ldrb	r2, [r7, #15]
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	b298      	uxth	r0, r3
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3344      	adds	r3, #68	; 0x44
 80052f2:	4602      	mov	r2, r0
 80052f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	3340      	adds	r3, #64	; 0x40
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	3348      	adds	r3, #72	; 0x48
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	334c      	adds	r3, #76	; 0x4c
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3354      	adds	r3, #84	; 0x54
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	3301      	adds	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
 800534c:	7bfa      	ldrb	r2, [r7, #15]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	429a      	cmp	r2, r3
 8005354:	d3af      	bcc.n	80052b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]
 800535a:	e044      	b.n	80053e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800535c:	7bfa      	ldrb	r2, [r7, #15]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005388:	7bfa      	ldrb	r2, [r7, #15]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800539e:	7bfa      	ldrb	r2, [r7, #15]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053ca:	7bfa      	ldrb	r2, [r7, #15]
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	3301      	adds	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
 80053e6:	7bfa      	ldrb	r2, [r7, #15]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d3b5      	bcc.n	800535c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	687e      	ldr	r6, [r7, #4]
 80053f8:	466d      	mov	r5, sp
 80053fa:	f106 0410 	add.w	r4, r6, #16
 80053fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800540a:	e885 0003 	stmia.w	r5, {r0, r1}
 800540e:	1d33      	adds	r3, r6, #4
 8005410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005412:	6838      	ldr	r0, [r7, #0]
 8005414:	f006 fb7a 	bl	800bb0c <USB_DevInit>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e014      	b.n	8005454 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 f97a 	bl	800673c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f007 fcc8 	bl	800cde2 <USB_DevDisconnect>

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800545c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_PCD_Start+0x16>
 800546e:	2302      	movs	r3, #2
 8005470:	e012      	b.n	8005498 <HAL_PCD_Start+0x3c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f006 fad6 	bl	800ba30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f007 fc89 	bl	800cda0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b08d      	sub	sp, #52	; 0x34
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f007 fd68 	bl	800cf8c <USB_GetMode>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 84b7 	bne.w	8005e32 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f007 fcab 	bl	800ce24 <USB_ReadInterrupts>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 84ad 	beq.w	8005e30 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f007 fc98 	bl	800ce24 <USB_ReadInterrupts>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d107      	bne.n	800550e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695a      	ldr	r2, [r3, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f002 0202 	and.w	r2, r2, #2
 800550c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f007 fc86 	bl	800ce24 <USB_ReadInterrupts>
 8005518:	4603      	mov	r3, r0
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b10      	cmp	r3, #16
 8005520:	d161      	bne.n	80055e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0210 	bic.w	r2, r2, #16
 8005530:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	3304      	adds	r3, #4
 8005550:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	0c5b      	lsrs	r3, r3, #17
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	2b02      	cmp	r3, #2
 800555c:	d124      	bne.n	80055a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d035      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	091b      	lsrs	r3, r3, #4
 8005572:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005578:	b29b      	uxth	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	6a38      	ldr	r0, [r7, #32]
 800557e:	f007 fabd 	bl	800cafc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800558e:	441a      	add	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055a0:	441a      	add	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	621a      	str	r2, [r3, #32]
 80055a6:	e016      	b.n	80055d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	0c5b      	lsrs	r3, r3, #17
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	2b06      	cmp	r3, #6
 80055b2:	d110      	bne.n	80055d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055ba:	2208      	movs	r2, #8
 80055bc:	4619      	mov	r1, r3
 80055be:	6a38      	ldr	r0, [r7, #32]
 80055c0:	f007 fa9c 	bl	800cafc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055d0:	441a      	add	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0210 	orr.w	r2, r2, #16
 80055e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f007 fc1a 	bl	800ce24 <USB_ReadInterrupts>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055fa:	f040 80a7 	bne.w	800574c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f007 fc40 	bl	800ce8c <USB_ReadDevAllOutEpInterrupt>
 800560c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800560e:	e099      	b.n	8005744 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 808e 	beq.w	8005738 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	4611      	mov	r1, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f007 fc64 	bl	800cef4 <USB_ReadDevOutEPInterrupt>
 800562c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00c      	beq.n	8005652 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	461a      	mov	r2, r3
 8005646:	2301      	movs	r3, #1
 8005648:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800564a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 feef 	bl	8006430 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00c      	beq.n	8005676 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	461a      	mov	r2, r3
 800566a:	2308      	movs	r3, #8
 800566c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800566e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 ffc5 	bl	8006600 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	461a      	mov	r2, r3
 800568e:	2310      	movs	r3, #16
 8005690:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d030      	beq.n	80056fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d109      	bne.n	80056bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80056bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	3304      	adds	r3, #4
 80056d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	78db      	ldrb	r3, [r3, #3]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d108      	bne.n	80056ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f00c ff5a 	bl	80125a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2302      	movs	r3, #2
 80056fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	2320      	movs	r3, #32
 8005718:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005730:	461a      	mov	r2, r3
 8005732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005736:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	3301      	adds	r3, #1
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	f47f af62 	bne.w	8005610 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f007 fb67 	bl	800ce24 <USB_ReadInterrupts>
 8005756:	4603      	mov	r3, r0
 8005758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800575c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005760:	f040 80db 	bne.w	800591a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f007 fba9 	bl	800cec0 <USB_ReadDevAllInEpInterrupt>
 800576e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005774:	e0cd      	b.n	8005912 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80c2 	beq.w	8005906 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	4611      	mov	r1, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f007 fbcf 	bl	800cf30 <USB_ReadDevInEPInterrupt>
 8005792:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d057      	beq.n	800584e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	2201      	movs	r2, #1
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69f9      	ldr	r1, [r7, #28]
 80057ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057be:	4013      	ands	r3, r2
 80057c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ce:	461a      	mov	r2, r3
 80057d0:	2301      	movs	r3, #1
 80057d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d132      	bne.n	8005842 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e0:	4613      	mov	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	334c      	adds	r3, #76	; 0x4c
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4403      	add	r3, r0
 80057fc:	3348      	adds	r3, #72	; 0x48
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4419      	add	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005806:	4613      	mov	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4403      	add	r3, r0
 8005810:	334c      	adds	r3, #76	; 0x4c
 8005812:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d113      	bne.n	8005842 <HAL_PCD_IRQHandler+0x3a2>
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	3354      	adds	r3, #84	; 0x54
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d108      	bne.n	8005842 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800583a:	461a      	mov	r2, r3
 800583c:	2101      	movs	r1, #1
 800583e:	f007 fbd7 	bl	800cff0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	b2db      	uxtb	r3, r3
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f00c fe24 	bl	8012496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	461a      	mov	r2, r3
 8005866:	2308      	movs	r3, #8
 8005868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	461a      	mov	r2, r3
 8005882:	2310      	movs	r3, #16
 8005884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	461a      	mov	r2, r3
 800589e:	2340      	movs	r3, #64	; 0x40
 80058a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d023      	beq.n	80058f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80058ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ae:	6a38      	ldr	r0, [r7, #32]
 80058b0:	f006 fa8a 	bl	800bdc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80058b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b6:	4613      	mov	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	3338      	adds	r3, #56	; 0x38
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	4413      	add	r3, r2
 80058c4:	3304      	adds	r3, #4
 80058c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	78db      	ldrb	r3, [r3, #3]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d108      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2200      	movs	r2, #0
 80058d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f00c fe71 	bl	80125c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	461a      	mov	r2, r3
 80058f0:	2302      	movs	r3, #2
 80058f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fd08 	bl	8006316 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	3301      	adds	r3, #1
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	2b00      	cmp	r3, #0
 8005916:	f47f af2e 	bne.w	8005776 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f007 fa80 	bl	800ce24 <USB_ReadInterrupts>
 8005924:	4603      	mov	r3, r0
 8005926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800592a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800592e:	d122      	bne.n	8005976 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800594a:	2b01      	cmp	r3, #1
 800594c:	d108      	bne.n	8005960 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005956:	2100      	movs	r1, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f00c fff1 	bl	8012940 <HAL_PCDEx_LPM_Callback>
 800595e:	e002      	b.n	8005966 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f00c fe0f 	bl	8012584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f007 fa52 	bl	800ce24 <USB_ReadInterrupts>
 8005980:	4603      	mov	r3, r0
 8005982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598a:	d112      	bne.n	80059b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b01      	cmp	r3, #1
 800599a:	d102      	bne.n	80059a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f00c fdcb 	bl	8012538 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80059b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f007 fa34 	bl	800ce24 <USB_ReadInterrupts>
 80059bc:	4603      	mov	r3, r0
 80059be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c6:	d121      	bne.n	8005a0c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80059d6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d111      	bne.n	8005a06 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	089b      	lsrs	r3, r3, #2
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80059fc:	2101      	movs	r1, #1
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f00c ff9e 	bl	8012940 <HAL_PCDEx_LPM_Callback>
 8005a04:	e002      	b.n	8005a0c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f00c fd96 	bl	8012538 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f007 fa07 	bl	800ce24 <USB_ReadInterrupts>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	f040 80b7 	bne.w	8005b92 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2110      	movs	r1, #16
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f006 f9c2 	bl	800bdc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a48:	e046      	b.n	8005ad8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a56:	461a      	mov	r2, r3
 8005a58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ab0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ad0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d3b3      	bcc.n	8005a4a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005af4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d016      	beq.n	8005b2c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0e:	f043 030b 	orr.w	r3, r3, #11
 8005b12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b24:	f043 030b 	orr.w	r3, r3, #11
 8005b28:	6453      	str	r3, [r2, #68]	; 0x44
 8005b2a:	e015      	b.n	8005b58 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f242 032b 	movw	r3, #8235	; 0x202b
 8005b40:	4313      	orrs	r3, r2
 8005b42:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b52:	f043 030b 	orr.w	r3, r3, #11
 8005b56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f007 fa37 	bl	800cff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695a      	ldr	r2, [r3, #20]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f007 f944 	bl	800ce24 <USB_ReadInterrupts>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba6:	d124      	bne.n	8005bf2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f007 f9fb 	bl	800cfa8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f006 f983 	bl	800bec2 <USB_GetDevSpeed>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681c      	ldr	r4, [r3, #0]
 8005bc8:	f001 fad0 	bl	800716c <HAL_RCC_GetHCLKFreq>
 8005bcc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f005 fe88 	bl	800b8ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f00c fc82 	bl	80124e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f007 f914 	bl	800ce24 <USB_ReadInterrupts>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d10a      	bne.n	8005c1c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f00c fc5f 	bl	80124ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f002 0208 	and.w	r2, r2, #8
 8005c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f007 f8ff 	bl	800ce24 <USB_ReadInterrupts>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d122      	bne.n	8005c76 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c40:	e014      	b.n	8005c6c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	4613      	mov	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d105      	bne.n	8005c66 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fb27 	bl	80062b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	3301      	adds	r3, #1
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3e5      	bcc.n	8005c42 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f007 f8d2 	bl	800ce24 <USB_ReadInterrupts>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c8a:	d13b      	bne.n	8005d04 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c90:	e02b      	b.n	8005cea <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	3340      	adds	r3, #64	; 0x40
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d115      	bne.n	8005ce4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005cb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da12      	bge.n	8005ce4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	333f      	adds	r3, #63	; 0x3f
 8005cce:	2201      	movs	r2, #1
 8005cd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fae8 	bl	80062b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d3ce      	bcc.n	8005c92 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f007 f88b 	bl	800ce24 <USB_ReadInterrupts>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d18:	d155      	bne.n	8005dc6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1e:	e045      	b.n	8005dac <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d34:	4613      	mov	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d12e      	bne.n	8005da6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	da2b      	bge.n	8005da6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005d5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d121      	bne.n	8005da6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d66:	4613      	mov	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005da2:	6053      	str	r3, [r2, #4]
            break;
 8005da4:	e007      	b.n	8005db6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	3301      	adds	r3, #1
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d3b4      	bcc.n	8005d20 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f007 f82a 	bl	800ce24 <USB_ReadInterrupts>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dda:	d10a      	bne.n	8005df2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f00c fc03 	bl	80125e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f007 f814 	bl	800ce24 <USB_ReadInterrupts>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d115      	bne.n	8005e32 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f00c fbf3 	bl	8012604 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6859      	ldr	r1, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	e000      	b.n	8005e32 <HAL_PCD_IRQHandler+0x992>
      return;
 8005e30:	bf00      	nop
    }
  }
}
 8005e32:	3734      	adds	r7, #52	; 0x34
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd90      	pop	{r4, r7, pc}

08005e38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_PCD_SetAddress+0x1a>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e013      	b.n	8005e7a <HAL_PCD_SetAddress+0x42>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	78fa      	ldrb	r2, [r7, #3]
 8005e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	4611      	mov	r1, r2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f006 ff72 	bl	800cd54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	4608      	mov	r0, r1
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4603      	mov	r3, r0
 8005e92:	70fb      	strb	r3, [r7, #3]
 8005e94:	460b      	mov	r3, r1
 8005e96:	803b      	strh	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	da0f      	bge.n	8005ec8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	f003 020f 	and.w	r2, r3, #15
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	3338      	adds	r3, #56	; 0x38
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4413      	add	r3, r2
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	705a      	strb	r2, [r3, #1]
 8005ec6:	e00f      	b.n	8005ee8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	f003 020f 	and.w	r2, r3, #15
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	3304      	adds	r3, #4
 8005ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ef4:	883a      	ldrh	r2, [r7, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	78ba      	ldrb	r2, [r7, #2]
 8005efe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f12:	78bb      	ldrb	r3, [r7, #2]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d102      	bne.n	8005f1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_PCD_EP_Open+0xaa>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e00e      	b.n	8005f4a <HAL_PCD_EP_Open+0xc8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68f9      	ldr	r1, [r7, #12]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f005 ffe6 	bl	800bf0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005f48:	7afb      	ldrb	r3, [r7, #11]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da0f      	bge.n	8005f86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	3338      	adds	r3, #56	; 0x38
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	705a      	strb	r2, [r3, #1]
 8005f84:	e00f      	b.n	8005fa6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f86:	78fb      	ldrb	r3, [r7, #3]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_PCD_EP_Close+0x6e>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e00e      	b.n	8005fde <HAL_PCD_EP_Close+0x8c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68f9      	ldr	r1, [r7, #12]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f006 f824 	bl	800c01c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ff6:	7afb      	ldrb	r3, [r7, #11]
 8005ff8:	f003 020f 	and.w	r2, r3, #15
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	3304      	adds	r3, #4
 800600e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006028:	7afb      	ldrb	r3, [r7, #11]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	b2da      	uxtb	r2, r3
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d102      	bne.n	8006042 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006042:	7afb      	ldrb	r3, [r7, #11]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6979      	ldr	r1, [r7, #20]
 800605a:	f006 fb0b 	bl	800c674 <USB_EP0StartXfer>
 800605e:	e008      	b.n	8006072 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	6979      	ldr	r1, [r7, #20]
 800606e:	f006 f8b1 	bl	800c1d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800609e:	681b      	ldr	r3, [r3, #0]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	460b      	mov	r3, r1
 80060ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060bc:	7afb      	ldrb	r3, [r7, #11]
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	3338      	adds	r3, #56	; 0x38
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	3304      	adds	r3, #4
 80060d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2200      	movs	r2, #0
 80060e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2201      	movs	r2, #1
 80060ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ec:	7afb      	ldrb	r3, [r7, #11]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d102      	bne.n	8006106 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	b2db      	uxtb	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	6979      	ldr	r1, [r7, #20]
 800611e:	f006 faa9 	bl	800c674 <USB_EP0StartXfer>
 8006122:	e008      	b.n	8006136 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	f006 f84f 	bl	800c1d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	f003 020f 	and.w	r2, r3, #15
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	429a      	cmp	r2, r3
 8006158:	d901      	bls.n	800615e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e050      	b.n	8006200 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800615e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006162:	2b00      	cmp	r3, #0
 8006164:	da0f      	bge.n	8006186 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	f003 020f 	and.w	r2, r3, #15
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	3338      	adds	r3, #56	; 0x38
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	3304      	adds	r3, #4
 800617c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	705a      	strb	r2, [r3, #1]
 8006184:	e00d      	b.n	80061a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	4413      	add	r3, r2
 8006198:	3304      	adds	r3, #4
 800619a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_PCD_EP_SetStall+0x82>
 80061be:	2302      	movs	r3, #2
 80061c0:	e01e      	b.n	8006200 <HAL_PCD_EP_SetStall+0xc0>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f006 fceb 	bl	800cbac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	b2d9      	uxtb	r1, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061f0:	461a      	mov	r2, r3
 80061f2:	f006 fefd 	bl	800cff0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	f003 020f 	and.w	r2, r3, #15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	429a      	cmp	r2, r3
 8006220:	d901      	bls.n	8006226 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e042      	b.n	80062ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800622a:	2b00      	cmp	r3, #0
 800622c:	da0f      	bge.n	800624e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	4613      	mov	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	3338      	adds	r3, #56	; 0x38
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	4413      	add	r3, r2
 8006242:	3304      	adds	r3, #4
 8006244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	705a      	strb	r2, [r3, #1]
 800624c:	e00f      	b.n	800626e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	f003 020f 	and.w	r2, r3, #15
 8006254:	4613      	mov	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	3304      	adds	r3, #4
 8006266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_PCD_EP_ClrStall+0x86>
 800628a:	2302      	movs	r3, #2
 800628c:	e00e      	b.n	80062ac <HAL_PCD_EP_ClrStall+0xa4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68f9      	ldr	r1, [r7, #12]
 800629c:	4618      	mov	r0, r3
 800629e:	f006 fcf3 	bl	800cc88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80062c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da0c      	bge.n	80062e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	3338      	adds	r3, #56	; 0x38
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e00c      	b.n	80062fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	f003 020f 	and.w	r2, r3, #15
 80062e8:	4613      	mov	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4413      	add	r3, r2
 80062f8:	3304      	adds	r3, #4
 80062fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	4618      	mov	r0, r3
 8006304:	f006 fb12 	bl	800c92c <USB_EPStopXfer>
 8006308:	4603      	mov	r3, r0
 800630a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800630c:	7afb      	ldrb	r3, [r7, #11]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b08a      	sub	sp, #40	; 0x28
 800631a:	af02      	add	r7, sp, #8
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	3338      	adds	r3, #56	; 0x38
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4413      	add	r3, r2
 800633a:	3304      	adds	r3, #4
 800633c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	429a      	cmp	r2, r3
 8006348:	d901      	bls.n	800634e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e06c      	b.n	8006428 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	429a      	cmp	r2, r3
 8006362:	d902      	bls.n	800636a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3303      	adds	r3, #3
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006372:	e02b      	b.n	80063cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	699a      	ldr	r2, [r3, #24]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	429a      	cmp	r2, r3
 8006388:	d902      	bls.n	8006390 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3303      	adds	r3, #3
 8006394:	089b      	lsrs	r3, r3, #2
 8006396:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6919      	ldr	r1, [r3, #16]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	4603      	mov	r3, r0
 80063ae:	6978      	ldr	r0, [r7, #20]
 80063b0:	f006 fb66 	bl	800ca80 <USB_WritePacket>

    ep->xfer_buff  += len;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	441a      	add	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	441a      	add	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d809      	bhi.n	80063f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1a      	ldr	r2, [r3, #32]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d203      	bcs.n	80063f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1be      	bne.n	8006374 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d811      	bhi.n	8006426 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2201      	movs	r2, #1
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	43db      	mvns	r3, r3
 800641c:	6939      	ldr	r1, [r7, #16]
 800641e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006422:	4013      	ands	r3, r2
 8006424:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	333c      	adds	r3, #60	; 0x3c
 8006448:	3304      	adds	r3, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d17b      	bne.n	800655e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d015      	beq.n	800649c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	4a61      	ldr	r2, [pc, #388]	; (80065f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	f240 80b9 	bls.w	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80b3 	beq.w	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	461a      	mov	r2, r3
 8006494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006498:	6093      	str	r3, [r2, #8]
 800649a:	e0a7      	b.n	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	461a      	mov	r2, r3
 80064b4:	2320      	movs	r3, #32
 80064b6:	6093      	str	r3, [r2, #8]
 80064b8:	e098      	b.n	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 8093 	bne.w	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4a4b      	ldr	r2, [pc, #300]	; (80065f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d90f      	bls.n	80064ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e4:	461a      	mov	r2, r3
 80064e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ea:	6093      	str	r3, [r2, #8]
 80064ec:	e07e      	b.n	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	3304      	adds	r3, #4
 8006502:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	0159      	lsls	r1, r3, #5
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	440b      	add	r3, r1
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d114      	bne.n	8006550 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006538:	461a      	mov	r2, r3
 800653a:	2101      	movs	r1, #1
 800653c:	f006 fd58 	bl	800cff0 <USB_EP0_OutStart>
 8006540:	e006      	b.n	8006550 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	441a      	add	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f00b ff82 	bl	8012460 <HAL_PCD_DataOutStageCallback>
 800655c:	e046      	b.n	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	4a26      	ldr	r2, [pc, #152]	; (80065fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d124      	bne.n	80065b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	461a      	mov	r2, r3
 800657e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006582:	6093      	str	r3, [r2, #8]
 8006584:	e032      	b.n	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	461a      	mov	r2, r3
 800659e:	2320      	movs	r3, #32
 80065a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f00b ff59 	bl	8012460 <HAL_PCD_DataOutStageCallback>
 80065ae:	e01d      	b.n	80065ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d114      	bne.n	80065e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d108      	bne.n	80065e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065d8:	461a      	mov	r2, r3
 80065da:	2100      	movs	r1, #0
 80065dc:	f006 fd08 	bl	800cff0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f00b ff3a 	bl	8012460 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	4f54300a 	.word	0x4f54300a
 80065fc:	4f54310a 	.word	0x4f54310a

08006600 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	333c      	adds	r3, #60	; 0x3c
 8006618:	3304      	adds	r3, #4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a15      	ldr	r2, [pc, #84]	; (8006688 <PCD_EP_OutSetupPacket_int+0x88>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d90e      	bls.n	8006654 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800663c:	2b00      	cmp	r3, #0
 800663e:	d009      	beq.n	8006654 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	461a      	mov	r2, r3
 800664e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006652:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f00b fef1 	bl	801243c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <PCD_EP_OutSetupPacket_int+0x88>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d90c      	bls.n	800667c <PCD_EP_OutSetupPacket_int+0x7c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d108      	bne.n	800667c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006674:	461a      	mov	r2, r3
 8006676:	2101      	movs	r1, #1
 8006678:	f006 fcba 	bl	800cff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	4f54300a 	.word	0x4f54300a

0800668c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
 8006698:	4613      	mov	r3, r2
 800669a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066aa:	883b      	ldrh	r3, [r7, #0]
 80066ac:	0419      	lsls	r1, r3, #16
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28
 80066b8:	e028      	b.n	800670c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	0c1b      	lsrs	r3, r3, #16
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4413      	add	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
 80066cc:	e00d      	b.n	80066ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	3340      	adds	r3, #64	; 0x40
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4413      	add	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	3301      	adds	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
 80066ea:	7bfa      	ldrb	r2, [r7, #15]
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d3ec      	bcc.n	80066ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066f4:	883b      	ldrh	r3, [r7, #0]
 80066f6:	0418      	lsls	r0, r3, #16
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6819      	ldr	r1, [r3, #0]
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	3b01      	subs	r3, #1
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	4302      	orrs	r2, r0
 8006704:	3340      	adds	r3, #64	; 0x40
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	887a      	ldrh	r2, [r7, #2]
 800672c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800676a:	4b05      	ldr	r3, [pc, #20]	; (8006780 <HAL_PCDEx_ActivateLPM+0x44>)
 800676c:	4313      	orrs	r3, r2
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	10000003 	.word	0x10000003

08006784 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800678e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006792:	6013      	str	r3, [r2, #0]
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40007000 	.word	0x40007000

080067a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067ae:	4b23      	ldr	r3, [pc, #140]	; (800683c <HAL_PWREx_EnableOverDrive+0x98>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	4a22      	ldr	r2, [pc, #136]	; (800683c <HAL_PWREx_EnableOverDrive+0x98>)
 80067b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b8:	6413      	str	r3, [r2, #64]	; 0x40
 80067ba:	4b20      	ldr	r3, [pc, #128]	; (800683c <HAL_PWREx_EnableOverDrive+0x98>)
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067c6:	4b1e      	ldr	r3, [pc, #120]	; (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067d2:	f7fb fe7d 	bl	80024d0 <HAL_GetTick>
 80067d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067d8:	e009      	b.n	80067ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067da:	f7fb fe79 	bl	80024d0 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067e8:	d901      	bls.n	80067ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e022      	b.n	8006834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067ee:	4b14      	ldr	r3, [pc, #80]	; (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fa:	d1ee      	bne.n	80067da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a0f      	ldr	r2, [pc, #60]	; (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006806:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006808:	f7fb fe62 	bl	80024d0 <HAL_GetTick>
 800680c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800680e:	e009      	b.n	8006824 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006810:	f7fb fe5e 	bl	80024d0 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800681e:	d901      	bls.n	8006824 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e007      	b.n	8006834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006830:	d1ee      	bne.n	8006810 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40023800 	.word	0x40023800
 8006840:	40007000 	.word	0x40007000

08006844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800684c:	2300      	movs	r3, #0
 800684e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e291      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8087 	beq.w	8006976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006868:	4b96      	ldr	r3, [pc, #600]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 030c 	and.w	r3, r3, #12
 8006870:	2b04      	cmp	r3, #4
 8006872:	d00c      	beq.n	800688e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006874:	4b93      	ldr	r3, [pc, #588]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d112      	bne.n	80068a6 <HAL_RCC_OscConfig+0x62>
 8006880:	4b90      	ldr	r3, [pc, #576]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800688c:	d10b      	bne.n	80068a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800688e:	4b8d      	ldr	r3, [pc, #564]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d06c      	beq.n	8006974 <HAL_RCC_OscConfig+0x130>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d168      	bne.n	8006974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e26b      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ae:	d106      	bne.n	80068be <HAL_RCC_OscConfig+0x7a>
 80068b0:	4b84      	ldr	r3, [pc, #528]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a83      	ldr	r2, [pc, #524]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	e02e      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCC_OscConfig+0x9c>
 80068c6:	4b7f      	ldr	r3, [pc, #508]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a7e      	ldr	r2, [pc, #504]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4b7c      	ldr	r3, [pc, #496]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a7b      	ldr	r2, [pc, #492]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e01d      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e8:	d10c      	bne.n	8006904 <HAL_RCC_OscConfig+0xc0>
 80068ea:	4b76      	ldr	r3, [pc, #472]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a75      	ldr	r2, [pc, #468]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4b73      	ldr	r3, [pc, #460]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a72      	ldr	r2, [pc, #456]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e00b      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 8006904:	4b6f      	ldr	r3, [pc, #444]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6e      	ldr	r2, [pc, #440]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800690a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	4b6c      	ldr	r3, [pc, #432]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a6b      	ldr	r2, [pc, #428]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800691a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006924:	f7fb fdd4 	bl	80024d0 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692c:	f7fb fdd0 	bl	80024d0 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	; 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e21f      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693e:	4b61      	ldr	r3, [pc, #388]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0xe8>
 800694a:	e014      	b.n	8006976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fb fdc0 	bl	80024d0 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006954:	f7fb fdbc 	bl	80024d0 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	; 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e20b      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006966:	4b57      	ldr	r3, [pc, #348]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x110>
 8006972:	e000      	b.n	8006976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d069      	beq.n	8006a56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006982:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800698e:	4b4d      	ldr	r3, [pc, #308]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b08      	cmp	r3, #8
 8006998:	d11c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x190>
 800699a:	4b4a      	ldr	r3, [pc, #296]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d116      	bne.n	80069d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a6:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_RCC_OscConfig+0x17a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d001      	beq.n	80069be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e1df      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069be:	4b41      	ldr	r3, [pc, #260]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	493d      	ldr	r1, [pc, #244]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d2:	e040      	b.n	8006a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d023      	beq.n	8006a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069dc:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a38      	ldr	r2, [pc, #224]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fb fd72 	bl	80024d0 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f0:	f7fb fd6e 	bl	80024d0 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e1bd      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a02:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0e:	4b2d      	ldr	r3, [pc, #180]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4929      	ldr	r1, [pc, #164]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	600b      	str	r3, [r1, #0]
 8006a22:	e018      	b.n	8006a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fb fd4e 	bl	80024d0 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a38:	f7fb fd4a 	bl	80024d0 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e199      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4a:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d038      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d019      	beq.n	8006a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a6a:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a76:	f7fb fd2b 	bl	80024d0 <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a7e:	f7fb fd27 	bl	80024d0 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e176      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a90:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x23a>
 8006a9c:	e01a      	b.n	8006ad4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa2:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fb fd11 	bl	80024d0 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ab2:	f7fb fd0d 	bl	80024d0 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d903      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e15c      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
 8006ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac8:	4b91      	ldr	r3, [pc, #580]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1ee      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80a4 	beq.w	8006c2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ae2:	4b8b      	ldr	r3, [pc, #556]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10d      	bne.n	8006b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aee:	4b88      	ldr	r3, [pc, #544]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	4a87      	ldr	r2, [pc, #540]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af8:	6413      	str	r3, [r2, #64]	; 0x40
 8006afa:	4b85      	ldr	r3, [pc, #532]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b02:	60bb      	str	r3, [r7, #8]
 8006b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b0a:	4b82      	ldr	r3, [pc, #520]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d118      	bne.n	8006b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b16:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a7e      	ldr	r2, [pc, #504]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b22:	f7fb fcd5 	bl	80024d0 <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b28:	e008      	b.n	8006b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b2a:	f7fb fcd1 	bl	80024d0 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b64      	cmp	r3, #100	; 0x64
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e120      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b3c:	4b75      	ldr	r3, [pc, #468]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0f0      	beq.n	8006b2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d106      	bne.n	8006b5e <HAL_RCC_OscConfig+0x31a>
 8006b50:	4b6f      	ldr	r3, [pc, #444]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b54:	4a6e      	ldr	r2, [pc, #440]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b5c:	e02d      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10c      	bne.n	8006b80 <HAL_RCC_OscConfig+0x33c>
 8006b66:	4b6a      	ldr	r3, [pc, #424]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	4a69      	ldr	r2, [pc, #420]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	6713      	str	r3, [r2, #112]	; 0x70
 8006b72:	4b67      	ldr	r3, [pc, #412]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	4a66      	ldr	r2, [pc, #408]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b78:	f023 0304 	bic.w	r3, r3, #4
 8006b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7e:	e01c      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b05      	cmp	r3, #5
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x35e>
 8006b88:	4b61      	ldr	r3, [pc, #388]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	4a60      	ldr	r2, [pc, #384]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	6713      	str	r3, [r2, #112]	; 0x70
 8006b94:	4b5e      	ldr	r3, [pc, #376]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	4a5d      	ldr	r2, [pc, #372]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba0:	e00b      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006ba2:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	4a5a      	ldr	r2, [pc, #360]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	; 0x70
 8006bae:	4b58      	ldr	r3, [pc, #352]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	4a57      	ldr	r2, [pc, #348]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006bb4:	f023 0304 	bic.w	r3, r3, #4
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc2:	f7fb fc85 	bl	80024d0 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bca:	f7fb fc81 	bl	80024d0 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0ce      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be0:	4b4b      	ldr	r3, [pc, #300]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ee      	beq.n	8006bca <HAL_RCC_OscConfig+0x386>
 8006bec:	e014      	b.n	8006c18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bee:	f7fb fc6f 	bl	80024d0 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf4:	e00a      	b.n	8006c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf6:	f7fb fc6b 	bl	80024d0 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0b8      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0c:	4b40      	ldr	r3, [pc, #256]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ee      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d105      	bne.n	8006c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1e:	4b3c      	ldr	r3, [pc, #240]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	4a3b      	ldr	r2, [pc, #236]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80a4 	beq.w	8006d7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c34:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d06b      	beq.n	8006d18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d149      	bne.n	8006cdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c48:	4b31      	ldr	r3, [pc, #196]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a30      	ldr	r2, [pc, #192]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7fb fc3c 	bl	80024d0 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fb fc38 	bl	80024d0 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e087      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6e:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	3b01      	subs	r3, #1
 8006c94:	041b      	lsls	r3, r3, #16
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	061b      	lsls	r3, r3, #24
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	4a1b      	ldr	r2, [pc, #108]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ca6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca8:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fb fc0c 	bl	80024d0 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cbc:	f7fb fc08 	bl	80024d0 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e057      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cce:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0x478>
 8006cda:	e04f      	b.n	8006d7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0b      	ldr	r2, [pc, #44]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fb fbf2 	bl	80024d0 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf0:	f7fb fbee 	bl	80024d0 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e03d      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d02:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4ac>
 8006d0e:	e035      	b.n	8006d7c <HAL_RCC_OscConfig+0x538>
 8006d10:	40023800 	.word	0x40023800
 8006d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d18:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <HAL_RCC_OscConfig+0x544>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d028      	beq.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d121      	bne.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d11a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d48:	4013      	ands	r3, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d111      	bne.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	085b      	lsrs	r3, r3, #1
 8006d60:	3b01      	subs	r3, #1
 8006d62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d107      	bne.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d001      	beq.n	8006d7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800

08006d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0d0      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da4:	4b6a      	ldr	r3, [pc, #424]	; (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 030f 	and.w	r3, r3, #15
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d910      	bls.n	8006dd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db2:	4b67      	ldr	r3, [pc, #412]	; (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f023 020f 	bic.w	r2, r3, #15
 8006dba:	4965      	ldr	r1, [pc, #404]	; (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc2:	4b63      	ldr	r3, [pc, #396]	; (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e0b8      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d020      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dec:	4b59      	ldr	r3, [pc, #356]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	4a58      	ldr	r2, [pc, #352]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e04:	4b53      	ldr	r3, [pc, #332]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4a52      	ldr	r2, [pc, #328]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e10:	4b50      	ldr	r3, [pc, #320]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	494d      	ldr	r1, [pc, #308]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d040      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d107      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e36:	4b47      	ldr	r3, [pc, #284]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d115      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e07f      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d107      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e073      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5e:	4b3d      	ldr	r3, [pc, #244]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e06b      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e6e:	4b39      	ldr	r3, [pc, #228]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f023 0203 	bic.w	r2, r3, #3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4936      	ldr	r1, [pc, #216]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e80:	f7fb fb26 	bl	80024d0 <HAL_GetTick>
 8006e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e86:	e00a      	b.n	8006e9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e88:	f7fb fb22 	bl	80024d0 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e053      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9e:	4b2d      	ldr	r3, [pc, #180]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 020c 	and.w	r2, r3, #12
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d1eb      	bne.n	8006e88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d210      	bcs.n	8006ee0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b24      	ldr	r3, [pc, #144]	; (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 020f 	bic.w	r2, r3, #15
 8006ec6:	4922      	ldr	r1, [pc, #136]	; (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ece:	4b20      	ldr	r3, [pc, #128]	; (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d001      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e032      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006eec:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4916      	ldr	r1, [pc, #88]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	490e      	ldr	r1, [pc, #56]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f1e:	f000 f821 	bl	8006f64 <HAL_RCC_GetSysClockFreq>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	091b      	lsrs	r3, r3, #4
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	490a      	ldr	r1, [pc, #40]	; (8006f58 <HAL_RCC_ClockConfig+0x1cc>)
 8006f30:	5ccb      	ldrb	r3, [r1, r3]
 8006f32:	fa22 f303 	lsr.w	r3, r2, r3
 8006f36:	4a09      	ldr	r2, [pc, #36]	; (8006f5c <HAL_RCC_ClockConfig+0x1d0>)
 8006f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f3a:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <HAL_RCC_ClockConfig+0x1d4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fb fa82 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40023c00 	.word	0x40023c00
 8006f54:	40023800 	.word	0x40023800
 8006f58:	08015b74 	.word	0x08015b74
 8006f5c:	20000000 	.word	0x20000000
 8006f60:	20000004 	.word	0x20000004

08006f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f68:	b094      	sub	sp, #80	; 0x50
 8006f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f70:	2300      	movs	r3, #0
 8006f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f74:	2300      	movs	r3, #0
 8006f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f7c:	4b79      	ldr	r3, [pc, #484]	; (8007164 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 030c 	and.w	r3, r3, #12
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d00d      	beq.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	f200 80e1 	bhi.w	8007150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_RCC_GetSysClockFreq+0x34>
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d003      	beq.n	8006f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8006f96:	e0db      	b.n	8007150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f98:	4b73      	ldr	r3, [pc, #460]	; (8007168 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f9c:	e0db      	b.n	8007156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f9e:	4b72      	ldr	r3, [pc, #456]	; (8007168 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fa2:	e0d8      	b.n	8007156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fa4:	4b6f      	ldr	r3, [pc, #444]	; (8007164 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006fae:	4b6d      	ldr	r3, [pc, #436]	; (8007164 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d063      	beq.n	8007082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fba:	4b6a      	ldr	r3, [pc, #424]	; (8007164 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8006fce:	2300      	movs	r3, #0
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	462b      	mov	r3, r5
 8006fda:	f04f 0000 	mov.w	r0, #0
 8006fde:	f04f 0100 	mov.w	r1, #0
 8006fe2:	0159      	lsls	r1, r3, #5
 8006fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fe8:	0150      	lsls	r0, r2, #5
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4621      	mov	r1, r4
 8006ff0:	1a51      	subs	r1, r2, r1
 8006ff2:	6139      	str	r1, [r7, #16]
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007008:	4659      	mov	r1, fp
 800700a:	018b      	lsls	r3, r1, #6
 800700c:	4651      	mov	r1, sl
 800700e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007012:	4651      	mov	r1, sl
 8007014:	018a      	lsls	r2, r1, #6
 8007016:	4651      	mov	r1, sl
 8007018:	ebb2 0801 	subs.w	r8, r2, r1
 800701c:	4659      	mov	r1, fp
 800701e:	eb63 0901 	sbc.w	r9, r3, r1
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800702e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007036:	4690      	mov	r8, r2
 8007038:	4699      	mov	r9, r3
 800703a:	4623      	mov	r3, r4
 800703c:	eb18 0303 	adds.w	r3, r8, r3
 8007040:	60bb      	str	r3, [r7, #8]
 8007042:	462b      	mov	r3, r5
 8007044:	eb49 0303 	adc.w	r3, r9, r3
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007056:	4629      	mov	r1, r5
 8007058:	028b      	lsls	r3, r1, #10
 800705a:	4621      	mov	r1, r4
 800705c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007060:	4621      	mov	r1, r4
 8007062:	028a      	lsls	r2, r1, #10
 8007064:	4610      	mov	r0, r2
 8007066:	4619      	mov	r1, r3
 8007068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706a:	2200      	movs	r2, #0
 800706c:	62bb      	str	r3, [r7, #40]	; 0x28
 800706e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007074:	f7f9 fdb8 	bl	8000be8 <__aeabi_uldivmod>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4613      	mov	r3, r2
 800707e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007080:	e058      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007082:	4b38      	ldr	r3, [pc, #224]	; (8007164 <HAL_RCC_GetSysClockFreq+0x200>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	2200      	movs	r2, #0
 800708a:	4618      	mov	r0, r3
 800708c:	4611      	mov	r1, r2
 800708e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007092:	623b      	str	r3, [r7, #32]
 8007094:	2300      	movs	r3, #0
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
 8007098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800709c:	4642      	mov	r2, r8
 800709e:	464b      	mov	r3, r9
 80070a0:	f04f 0000 	mov.w	r0, #0
 80070a4:	f04f 0100 	mov.w	r1, #0
 80070a8:	0159      	lsls	r1, r3, #5
 80070aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070ae:	0150      	lsls	r0, r2, #5
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4641      	mov	r1, r8
 80070b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80070ba:	4649      	mov	r1, r9
 80070bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070d4:	ebb2 040a 	subs.w	r4, r2, sl
 80070d8:	eb63 050b 	sbc.w	r5, r3, fp
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	00eb      	lsls	r3, r5, #3
 80070e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070ea:	00e2      	lsls	r2, r4, #3
 80070ec:	4614      	mov	r4, r2
 80070ee:	461d      	mov	r5, r3
 80070f0:	4643      	mov	r3, r8
 80070f2:	18e3      	adds	r3, r4, r3
 80070f4:	603b      	str	r3, [r7, #0]
 80070f6:	464b      	mov	r3, r9
 80070f8:	eb45 0303 	adc.w	r3, r5, r3
 80070fc:	607b      	str	r3, [r7, #4]
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800710a:	4629      	mov	r1, r5
 800710c:	028b      	lsls	r3, r1, #10
 800710e:	4621      	mov	r1, r4
 8007110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007114:	4621      	mov	r1, r4
 8007116:	028a      	lsls	r2, r1, #10
 8007118:	4610      	mov	r0, r2
 800711a:	4619      	mov	r1, r3
 800711c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800711e:	2200      	movs	r2, #0
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	61fa      	str	r2, [r7, #28]
 8007124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007128:	f7f9 fd5e 	bl	8000be8 <__aeabi_uldivmod>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	4613      	mov	r3, r2
 8007132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007134:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <HAL_RCC_GetSysClockFreq+0x200>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	0c1b      	lsrs	r3, r3, #16
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	3301      	adds	r3, #1
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007148:	fbb2 f3f3 	udiv	r3, r2, r3
 800714c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800714e:	e002      	b.n	8007156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007150:	4b05      	ldr	r3, [pc, #20]	; (8007168 <HAL_RCC_GetSysClockFreq+0x204>)
 8007152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007158:	4618      	mov	r0, r3
 800715a:	3750      	adds	r7, #80	; 0x50
 800715c:	46bd      	mov	sp, r7
 800715e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007162:	bf00      	nop
 8007164:	40023800 	.word	0x40023800
 8007168:	00f42400 	.word	0x00f42400

0800716c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007170:	4b03      	ldr	r3, [pc, #12]	; (8007180 <HAL_RCC_GetHCLKFreq+0x14>)
 8007172:	681b      	ldr	r3, [r3, #0]
}
 8007174:	4618      	mov	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20000000 	.word	0x20000000

08007184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007188:	f7ff fff0 	bl	800716c <HAL_RCC_GetHCLKFreq>
 800718c:	4602      	mov	r2, r0
 800718e:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	0a9b      	lsrs	r3, r3, #10
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	4903      	ldr	r1, [pc, #12]	; (80071a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800719a:	5ccb      	ldrb	r3, [r1, r3]
 800719c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40023800 	.word	0x40023800
 80071a8:	08015b84 	.word	0x08015b84

080071ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071b0:	f7ff ffdc 	bl	800716c <HAL_RCC_GetHCLKFreq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	4b05      	ldr	r3, [pc, #20]	; (80071cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	0b5b      	lsrs	r3, r3, #13
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	4903      	ldr	r1, [pc, #12]	; (80071d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071c2:	5ccb      	ldrb	r3, [r1, r3]
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40023800 	.word	0x40023800
 80071d0:	08015b84 	.word	0x08015b84

080071d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d012      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071fc:	4b69      	ldr	r3, [pc, #420]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	4a68      	ldr	r2, [pc, #416]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007202:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007206:	6093      	str	r3, [r2, #8]
 8007208:	4b66      	ldr	r3, [pc, #408]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	4964      	ldr	r1, [pc, #400]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007212:	4313      	orrs	r3, r2
 8007214:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800721e:	2301      	movs	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d017      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800722e:	4b5d      	ldr	r3, [pc, #372]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723c:	4959      	ldr	r1, [pc, #356]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800724c:	d101      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800724e:	2301      	movs	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800725a:	2301      	movs	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d017      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800726a:	4b4e      	ldr	r3, [pc, #312]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800726c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	494a      	ldr	r1, [pc, #296]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007288:	d101      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800728a:	2301      	movs	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007296:	2301      	movs	r3, #1
 8007298:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80072a6:	2301      	movs	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 808b 	beq.w	80073ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072b8:	4b3a      	ldr	r3, [pc, #232]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	4a39      	ldr	r2, [pc, #228]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c2:	6413      	str	r3, [r2, #64]	; 0x40
 80072c4:	4b37      	ldr	r3, [pc, #220]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072d0:	4b35      	ldr	r3, [pc, #212]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a34      	ldr	r2, [pc, #208]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072dc:	f7fb f8f8 	bl	80024d0 <HAL_GetTick>
 80072e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072e4:	f7fb f8f4 	bl	80024d0 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b64      	cmp	r3, #100	; 0x64
 80072f0:	d901      	bls.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e31f      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072f6:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007302:	4b28      	ldr	r3, [pc, #160]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d035      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	d02e      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007320:	4b20      	ldr	r3, [pc, #128]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007328:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800732a:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	4a1d      	ldr	r2, [pc, #116]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007334:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007336:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800733c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007340:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007342:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007348:	4b16      	ldr	r3, [pc, #88]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b01      	cmp	r3, #1
 8007352:	d114      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007354:	f7fb f8bc 	bl	80024d0 <HAL_GetTick>
 8007358:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735a:	e00a      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800735c:	f7fb f8b8 	bl	80024d0 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f241 3288 	movw	r2, #5000	; 0x1388
 800736a:	4293      	cmp	r3, r2
 800736c:	d901      	bls.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e2e1      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007372:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0ee      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800738a:	d111      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800739a:	400b      	ands	r3, r1
 800739c:	4901      	ldr	r1, [pc, #4]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	608b      	str	r3, [r1, #8]
 80073a2:	e00b      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40007000 	.word	0x40007000
 80073ac:	0ffffcff 	.word	0x0ffffcff
 80073b0:	4ba8      	ldr	r3, [pc, #672]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	4aa7      	ldr	r2, [pc, #668]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073ba:	6093      	str	r3, [r2, #8]
 80073bc:	4ba5      	ldr	r3, [pc, #660]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073c8:	49a2      	ldr	r1, [pc, #648]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d010      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073da:	4b9e      	ldr	r3, [pc, #632]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e0:	4a9c      	ldr	r2, [pc, #624]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80073ea:	4b9a      	ldr	r3, [pc, #616]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	4997      	ldr	r1, [pc, #604]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007408:	4b92      	ldr	r3, [pc, #584]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007416:	498f      	ldr	r1, [pc, #572]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007418:	4313      	orrs	r3, r2
 800741a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800742a:	4b8a      	ldr	r3, [pc, #552]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007438:	4986      	ldr	r1, [pc, #536]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800744c:	4b81      	ldr	r3, [pc, #516]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745a:	497e      	ldr	r1, [pc, #504]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800745c:	4313      	orrs	r3, r2
 800745e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800746e:	4b79      	ldr	r3, [pc, #484]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747c:	4975      	ldr	r1, [pc, #468]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800747e:	4313      	orrs	r3, r2
 8007480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007490:	4b70      	ldr	r3, [pc, #448]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007496:	f023 0203 	bic.w	r2, r3, #3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	496d      	ldr	r1, [pc, #436]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074b2:	4b68      	ldr	r3, [pc, #416]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	f023 020c 	bic.w	r2, r3, #12
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c0:	4964      	ldr	r1, [pc, #400]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00a      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074d4:	4b5f      	ldr	r3, [pc, #380]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80074d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e2:	495c      	ldr	r1, [pc, #368]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074f6:	4b57      	ldr	r3, [pc, #348]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80074f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007504:	4953      	ldr	r1, [pc, #332]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007506:	4313      	orrs	r3, r2
 8007508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007518:	4b4e      	ldr	r3, [pc, #312]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	494b      	ldr	r1, [pc, #300]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007528:	4313      	orrs	r3, r2
 800752a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800753a:	4b46      	ldr	r3, [pc, #280]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800753c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007540:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007548:	4942      	ldr	r1, [pc, #264]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800754a:	4313      	orrs	r3, r2
 800754c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800755c:	4b3d      	ldr	r3, [pc, #244]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800755e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007562:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756a:	493a      	ldr	r1, [pc, #232]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800756c:	4313      	orrs	r3, r2
 800756e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800757e:	4b35      	ldr	r3, [pc, #212]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007584:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758c:	4931      	ldr	r1, [pc, #196]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800758e:	4313      	orrs	r3, r2
 8007590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075a0:	4b2c      	ldr	r3, [pc, #176]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80075a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ae:	4929      	ldr	r1, [pc, #164]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d011      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80075c2:	4b24      	ldr	r3, [pc, #144]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80075c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d0:	4920      	ldr	r1, [pc, #128]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075e0:	d101      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80075e2:	2301      	movs	r3, #1
 80075e4:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075f2:	4b18      	ldr	r3, [pc, #96]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80075f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007600:	4914      	ldr	r1, [pc, #80]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007602:	4313      	orrs	r3, r2
 8007604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007624:	490b      	ldr	r1, [pc, #44]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007626:	4313      	orrs	r3, r2
 8007628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d006      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 80d8 	beq.w	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007640:	4b04      	ldr	r3, [pc, #16]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a03      	ldr	r2, [pc, #12]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007646:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800764a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764c:	f7fa ff40 	bl	80024d0 <HAL_GetTick>
 8007650:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007652:	e00a      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007654:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007658:	f7fa ff3a 	bl	80024d0 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b64      	cmp	r3, #100	; 0x64
 8007664:	d901      	bls.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e165      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800766a:	4ba9      	ldr	r3, [pc, #676]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d021      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007686:	2b00      	cmp	r3, #0
 8007688:	d11d      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800768a:	4ba1      	ldr	r3, [pc, #644]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800768c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007690:	0c1b      	lsrs	r3, r3, #16
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007698:	4b9d      	ldr	r3, [pc, #628]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800769a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800769e:	0e1b      	lsrs	r3, r3, #24
 80076a0:	f003 030f 	and.w	r3, r3, #15
 80076a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	019a      	lsls	r2, r3, #6
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	041b      	lsls	r3, r3, #16
 80076b0:	431a      	orrs	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	061b      	lsls	r3, r3, #24
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	071b      	lsls	r3, r3, #28
 80076be:	4994      	ldr	r1, [pc, #592]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076da:	d00a      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d02e      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f0:	d129      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076f2:	4b87      	ldr	r3, [pc, #540]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80076f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f8:	0c1b      	lsrs	r3, r3, #16
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007700:	4b83      	ldr	r3, [pc, #524]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007706:	0f1b      	lsrs	r3, r3, #28
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	019a      	lsls	r2, r3, #6
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	041b      	lsls	r3, r3, #16
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	061b      	lsls	r3, r3, #24
 8007720:	431a      	orrs	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	071b      	lsls	r3, r3, #28
 8007726:	497a      	ldr	r1, [pc, #488]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800772e:	4b78      	ldr	r3, [pc, #480]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007734:	f023 021f 	bic.w	r2, r3, #31
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	3b01      	subs	r3, #1
 800773e:	4974      	ldr	r1, [pc, #464]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007740:	4313      	orrs	r3, r2
 8007742:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d01d      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007752:	4b6f      	ldr	r3, [pc, #444]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007758:	0e1b      	lsrs	r3, r3, #24
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007760:	4b6b      	ldr	r3, [pc, #428]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007766:	0f1b      	lsrs	r3, r3, #28
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	019a      	lsls	r2, r3, #6
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	041b      	lsls	r3, r3, #16
 800777a:	431a      	orrs	r2, r3
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	061b      	lsls	r3, r3, #24
 8007780:	431a      	orrs	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	071b      	lsls	r3, r3, #28
 8007786:	4962      	ldr	r1, [pc, #392]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007788:	4313      	orrs	r3, r2
 800778a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d011      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	019a      	lsls	r2, r3, #6
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	041b      	lsls	r3, r3, #16
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	061b      	lsls	r3, r3, #24
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	071b      	lsls	r3, r3, #28
 80077b6:	4956      	ldr	r1, [pc, #344]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077be:	4b54      	ldr	r3, [pc, #336]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a53      	ldr	r2, [pc, #332]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80077c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ca:	f7fa fe81 	bl	80024d0 <HAL_GetTick>
 80077ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077d0:	e008      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077d2:	f7fa fe7d 	bl	80024d0 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b64      	cmp	r3, #100	; 0x64
 80077de:	d901      	bls.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e0a8      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077e4:	4b4a      	ldr	r3, [pc, #296]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	f040 809e 	bne.w	8007934 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80077f8:	4b45      	ldr	r3, [pc, #276]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a44      	ldr	r2, [pc, #272]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80077fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007804:	f7fa fe64 	bl	80024d0 <HAL_GetTick>
 8007808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800780a:	e008      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800780c:	f7fa fe60 	bl	80024d0 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b64      	cmp	r3, #100	; 0x64
 8007818:	d901      	bls.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e08b      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800781e:	4b3c      	ldr	r3, [pc, #240]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800782a:	d0ef      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007848:	2b00      	cmp	r3, #0
 800784a:	d02e      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d12a      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007854:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785a:	0c1b      	lsrs	r3, r3, #16
 800785c:	f003 0303 	and.w	r3, r3, #3
 8007860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007862:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007868:	0f1b      	lsrs	r3, r3, #28
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	019a      	lsls	r2, r3, #6
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	041b      	lsls	r3, r3, #16
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	061b      	lsls	r3, r3, #24
 8007882:	431a      	orrs	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	071b      	lsls	r3, r3, #28
 8007888:	4921      	ldr	r1, [pc, #132]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007890:	4b1f      	ldr	r3, [pc, #124]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007896:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	3b01      	subs	r3, #1
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	491b      	ldr	r1, [pc, #108]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d022      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078be:	d11d      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078c0:	4b13      	ldr	r3, [pc, #76]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80078c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c6:	0e1b      	lsrs	r3, r3, #24
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078ce:	4b10      	ldr	r3, [pc, #64]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	0f1b      	lsrs	r3, r3, #28
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	019a      	lsls	r2, r3, #6
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	041b      	lsls	r3, r3, #16
 80078e8:	431a      	orrs	r2, r3
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	061b      	lsls	r3, r3, #24
 80078ee:	431a      	orrs	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	071b      	lsls	r3, r3, #28
 80078f4:	4906      	ldr	r1, [pc, #24]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a03      	ldr	r2, [pc, #12]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007908:	f7fa fde2 	bl	80024d0 <HAL_GetTick>
 800790c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800790e:	e00a      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x752>
 8007910:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007914:	f7fa fddc 	bl	80024d0 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b64      	cmp	r3, #100	; 0x64
 8007920:	d901      	bls.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e007      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007926:	4b06      	ldr	r3, [pc, #24]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800792e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007932:	d1ef      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40023800 	.word	0x40023800

08007944 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e022      	b.n	800799c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7fa f90b 	bl	8001b84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2203      	movs	r2, #3
 8007972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f814 	bl	80079a4 <HAL_SD_InitCard>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e00a      	b.n	800799c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079a4:	b5b0      	push	{r4, r5, r7, lr}
 80079a6:	b08e      	sub	sp, #56	; 0x38
 80079a8:	af04      	add	r7, sp, #16
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079ac:	2300      	movs	r3, #0
 80079ae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80079b8:	2300      	movs	r3, #0
 80079ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80079c0:	2376      	movs	r3, #118	; 0x76
 80079c2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681d      	ldr	r5, [r3, #0]
 80079c8:	466c      	mov	r4, sp
 80079ca:	f107 0314 	add.w	r3, r7, #20
 80079ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079d6:	f107 0308 	add.w	r3, r7, #8
 80079da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079dc:	4628      	mov	r0, r5
 80079de:	f003 f9fb 	bl	800add8 <SDMMC_Init>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80079e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e059      	b.n	8007aa8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a02:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f003 fa2f 	bl	800ae6c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a1c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007a1e:	2002      	movs	r0, #2
 8007a20:	f7fa fd62 	bl	80024e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fe67 	bl	80086f8 <SD_PowerON>
 8007a2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e02e      	b.n	8007aa8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fd86 	bl	800855c <SD_InitCard>
 8007a50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e01b      	b.n	8007aa8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f003 fa89 	bl	800af90 <SDMMC_CmdBlockLength>
 8007a7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00f      	beq.n	8007aa6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <HAL_SD_InitCard+0x10c>)
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3728      	adds	r7, #40	; 0x28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bdb0      	pop	{r4, r5, r7, pc}
 8007ab0:	004005ff 	.word	0x004005ff

08007ab4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b092      	sub	sp, #72	; 0x48
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ac2:	f7fa fd05 	bl	80024d0 <HAL_GetTick>
 8007ac6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d107      	bne.n	8007ae6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e1bd      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	f040 81b0 	bne.w	8007e54 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	441a      	add	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d907      	bls.n	8007b18 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e1a4      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2200      	movs	r2, #0
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d002      	beq.n	8007b36 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	025b      	lsls	r3, r3, #9
 8007b34:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b36:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	025b      	lsls	r3, r3, #9
 8007b40:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007b42:	2390      	movs	r3, #144	; 0x90
 8007b44:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007b46:	2302      	movs	r3, #2
 8007b48:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f107 0214 	add.w	r2, r7, #20
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f003 f9eb 	bl	800af38 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d90a      	bls.n	8007b7e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b74:	4618      	mov	r0, r3
 8007b76:	f003 fa4f 	bl	800b018 <SDMMC_CmdReadMultiBlock>
 8007b7a:	6478      	str	r0, [r7, #68]	; 0x44
 8007b7c:	e009      	b.n	8007b92 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f003 fa22 	bl	800afd4 <SDMMC_CmdReadSingleBlock>
 8007b90:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d012      	beq.n	8007bbe <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a7a      	ldr	r2, [pc, #488]	; (8007d88 <HAL_SD_ReadBlocks+0x2d4>)
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e151      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007bc2:	e061      	b.n	8007c88 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d03c      	beq.n	8007c4c <HAL_SD_ReadBlocks+0x198>
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d039      	beq.n	8007c4c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	643b      	str	r3, [r7, #64]	; 0x40
 8007bdc:	e033      	b.n	8007c46 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f003 f924 	bl	800ae30 <SDMMC_ReadFIFO>
 8007be8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c06:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c10:	3b01      	subs	r3, #1
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	0c1b      	lsrs	r3, r3, #16
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c20:	3301      	adds	r3, #1
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c26:	3b01      	subs	r3, #1
 8007c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	0e1b      	lsrs	r3, r3, #24
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c32:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c36:	3301      	adds	r3, #1
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c42:	3301      	adds	r3, #1
 8007c44:	643b      	str	r3, [r7, #64]	; 0x40
 8007c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c48:	2b07      	cmp	r3, #7
 8007c4a:	d9c8      	bls.n	8007bde <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007c4c:	f7fa fc40 	bl	80024d0 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d902      	bls.n	8007c62 <HAL_SD_ReadBlocks+0x1ae>
 8007c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d112      	bne.n	8007c88 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a48      	ldr	r2, [pc, #288]	; (8007d88 <HAL_SD_ReadBlocks+0x2d4>)
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e0ec      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d096      	beq.n	8007bc4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d022      	beq.n	8007cea <HAL_SD_ReadBlocks+0x236>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d91f      	bls.n	8007cea <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d01b      	beq.n	8007cea <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f003 fa14 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 8007cbc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d012      	beq.n	8007cea <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a2f      	ldr	r2, [pc, #188]	; (8007d88 <HAL_SD_ReadBlocks+0x2d4>)
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e0bb      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d012      	beq.n	8007d1e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a22      	ldr	r2, [pc, #136]	; (8007d88 <HAL_SD_ReadBlocks+0x2d4>)
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	f043 0208 	orr.w	r2, r3, #8
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e0a1      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d012      	beq.n	8007d52 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <HAL_SD_ReadBlocks+0x2d4>)
 8007d32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	f043 0202 	orr.w	r2, r3, #2
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e087      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d064      	beq.n	8007e2a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <HAL_SD_ReadBlocks+0x2d4>)
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	f043 0220 	orr.w	r2, r3, #32
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e06d      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
 8007d86:	bf00      	nop
 8007d88:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f003 f84d 	bl	800ae30 <SDMMC_ReadFIFO>
 8007d96:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da2:	3301      	adds	r3, #1
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	3b01      	subs	r3, #1
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	3301      	adds	r3, #1
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	3301      	adds	r3, #1
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dda:	0e1b      	lsrs	r3, r3, #24
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de4:	3301      	adds	r3, #1
 8007de6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dea:	3b01      	subs	r3, #1
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007dee:	f7fa fb6f 	bl	80024d0 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d902      	bls.n	8007e04 <HAL_SD_ReadBlocks+0x350>
 8007dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d112      	bne.n	8007e2a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a18      	ldr	r2, [pc, #96]	; (8007e6c <HAL_SD_ReadBlocks+0x3b8>)
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e01b      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_SD_ReadBlocks+0x38a>
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1a6      	bne.n	8007d8c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e006      	b.n	8007e62 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
  }
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3748      	adds	r7, #72	; 0x48
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	004005ff 	.word	0x004005ff

08007e70 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b092      	sub	sp, #72	; 0x48
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e7e:	f7fa fb27 	bl	80024d0 <HAL_GetTick>
 8007e82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d107      	bne.n	8007ea2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e165      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	f040 8158 	bne.w	8008160 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	441a      	add	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d907      	bls.n	8007ed4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e14c      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d002      	beq.n	8007ef2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	025b      	lsls	r3, r3, #9
 8007ef0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	025b      	lsls	r3, r3, #9
 8007efc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007efe:	2390      	movs	r3, #144	; 0x90
 8007f00:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007f02:	2300      	movs	r3, #0
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f107 0218 	add.w	r2, r7, #24
 8007f16:	4611      	mov	r1, r2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f003 f80d 	bl	800af38 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d90a      	bls.n	8007f3a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f30:	4618      	mov	r0, r3
 8007f32:	f003 f8b5 	bl	800b0a0 <SDMMC_CmdWriteMultiBlock>
 8007f36:	6478      	str	r0, [r7, #68]	; 0x44
 8007f38:	e009      	b.n	8007f4e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2210      	movs	r2, #16
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f46:	4618      	mov	r0, r3
 8007f48:	f003 f888 	bl	800b05c <SDMMC_CmdWriteSingleBlock>
 8007f4c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d012      	beq.n	8007f7a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a87      	ldr	r2, [pc, #540]	; (8008178 <HAL_SD_WriteBlocks+0x308>)
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f62:	431a      	orrs	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e0f9      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f7e:	e065      	b.n	800804c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d040      	beq.n	8008010 <HAL_SD_WriteBlocks+0x1a0>
 8007f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d03d      	beq.n	8008010 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007f94:	2300      	movs	r3, #0
 8007f96:	643b      	str	r3, [r7, #64]	; 0x40
 8007f98:	e037      	b.n	800800a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	021a      	lsls	r2, r3, #8
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fba:	3301      	adds	r3, #1
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	041a      	lsls	r2, r3, #16
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	061a      	lsls	r2, r3, #24
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fea:	3301      	adds	r3, #1
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f107 0214 	add.w	r2, r7, #20
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f002 ff23 	bl	800ae4a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008006:	3301      	adds	r3, #1
 8008008:	643b      	str	r3, [r7, #64]	; 0x40
 800800a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800800c:	2b07      	cmp	r3, #7
 800800e:	d9c4      	bls.n	8007f9a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008010:	f7fa fa5e 	bl	80024d0 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800801c:	429a      	cmp	r2, r3
 800801e:	d902      	bls.n	8008026 <HAL_SD_WriteBlocks+0x1b6>
 8008020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008022:	2b00      	cmp	r3, #0
 8008024:	d112      	bne.n	800804c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a53      	ldr	r2, [pc, #332]	; (8008178 <HAL_SD_WriteBlocks+0x308>)
 800802c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008034:	431a      	orrs	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e090      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008052:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008056:	2b00      	cmp	r3, #0
 8008058:	d092      	beq.n	8007f80 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008064:	2b00      	cmp	r3, #0
 8008066:	d022      	beq.n	80080ae <HAL_SD_WriteBlocks+0x23e>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d91f      	bls.n	80080ae <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008072:	2b03      	cmp	r3, #3
 8008074:	d01b      	beq.n	80080ae <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f003 f832 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 8008080:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008084:	2b00      	cmp	r3, #0
 8008086:	d012      	beq.n	80080ae <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3a      	ldr	r2, [pc, #232]	; (8008178 <HAL_SD_WriteBlocks+0x308>)
 800808e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008096:	431a      	orrs	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e05f      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d012      	beq.n	80080e2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a2d      	ldr	r2, [pc, #180]	; (8008178 <HAL_SD_WriteBlocks+0x308>)
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c8:	f043 0208 	orr.w	r2, r3, #8
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e045      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d012      	beq.n	8008116 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a20      	ldr	r2, [pc, #128]	; (8008178 <HAL_SD_WriteBlocks+0x308>)
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	f043 0202 	orr.w	r2, r3, #2
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e02b      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811c:	f003 0310 	and.w	r3, r3, #16
 8008120:	2b00      	cmp	r3, #0
 8008122:	d012      	beq.n	800814a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a13      	ldr	r2, [pc, #76]	; (8008178 <HAL_SD_WriteBlocks+0x308>)
 800812a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	f043 0210 	orr.w	r2, r3, #16
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e011      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008152:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	e006      	b.n	800816e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
  }
}
 800816e:	4618      	mov	r0, r3
 8008170:	3748      	adds	r7, #72	; 0x48
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	004005ff 	.word	0x004005ff

0800817c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800818a:	0f9b      	lsrs	r3, r3, #30
 800818c:	b2da      	uxtb	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008196:	0e9b      	lsrs	r3, r3, #26
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f003 030f 	and.w	r3, r3, #15
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081a8:	0e1b      	lsrs	r3, r3, #24
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ba:	0c1b      	lsrs	r3, r3, #16
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c6:	0a1b      	lsrs	r3, r3, #8
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081dc:	0d1b      	lsrs	r3, r3, #20
 80081de:	b29a      	uxth	r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e8:	0c1b      	lsrs	r3, r3, #16
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081fa:	0bdb      	lsrs	r3, r3, #15
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	b2da      	uxtb	r2, r3
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800820c:	0b9b      	lsrs	r3, r3, #14
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	b2da      	uxtb	r2, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800821e:	0b5b      	lsrs	r3, r3, #13
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	b2da      	uxtb	r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008230:	0b1b      	lsrs	r3, r3, #12
 8008232:	b2db      	uxtb	r3, r3
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	b2da      	uxtb	r2, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2200      	movs	r2, #0
 8008242:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008248:	2b00      	cmp	r3, #0
 800824a:	d163      	bne.n	8008314 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008250:	009a      	lsls	r2, r3, #2
 8008252:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008256:	4013      	ands	r3, r2
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800825c:	0f92      	lsrs	r2, r2, #30
 800825e:	431a      	orrs	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008268:	0edb      	lsrs	r3, r3, #27
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	b2da      	uxtb	r2, r3
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827a:	0e1b      	lsrs	r3, r3, #24
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	b2da      	uxtb	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828c:	0d5b      	lsrs	r3, r3, #21
 800828e:	b2db      	uxtb	r3, r3
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	b2da      	uxtb	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829e:	0c9b      	lsrs	r3, r3, #18
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b0:	0bdb      	lsrs	r3, r3, #15
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	7e1b      	ldrb	r3, [r3, #24]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	3302      	adds	r3, #2
 80082d4:	2201      	movs	r2, #1
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80082de:	fb03 f202 	mul.w	r2, r3, r2
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	7a1b      	ldrb	r3, [r3, #8]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	2201      	movs	r2, #1
 80082f2:	409a      	lsls	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008300:	0a52      	lsrs	r2, r2, #9
 8008302:	fb03 f202 	mul.w	r2, r3, r2
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008310:	661a      	str	r2, [r3, #96]	; 0x60
 8008312:	e031      	b.n	8008378 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008318:	2b01      	cmp	r3, #1
 800831a:	d11d      	bne.n	8008358 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832a:	0c1b      	lsrs	r3, r3, #16
 800832c:	431a      	orrs	r2, r3
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	3301      	adds	r3, #1
 8008338:	029a      	lsls	r2, r3, #10
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800834c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	661a      	str	r2, [r3, #96]	; 0x60
 8008356:	e00f      	b.n	8008378 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a58      	ldr	r2, [pc, #352]	; (80084c0 <HAL_SD_GetCardCSD+0x344>)
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e09d      	b.n	80084b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800837c:	0b9b      	lsrs	r3, r3, #14
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	b2da      	uxtb	r2, r3
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800838e:	09db      	lsrs	r3, r3, #7
 8008390:	b2db      	uxtb	r3, r3
 8008392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008396:	b2da      	uxtb	r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b0:	0fdb      	lsrs	r3, r3, #31
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083bc:	0f5b      	lsrs	r3, r3, #29
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	f003 0303 	and.w	r3, r3, #3
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	0e9b      	lsrs	r3, r3, #26
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e0:	0d9b      	lsrs	r3, r3, #22
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 030f 	and.w	r3, r3, #15
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f2:	0d5b      	lsrs	r3, r3, #21
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	b2db      	uxtb	r3, r3
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	b2da      	uxtb	r2, r3
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008422:	0bdb      	lsrs	r3, r3, #15
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	b2da      	uxtb	r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	0b9b      	lsrs	r3, r3, #14
 8008438:	b2db      	uxtb	r3, r3
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	b2da      	uxtb	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844a:	0b5b      	lsrs	r3, r3, #13
 800844c:	b2db      	uxtb	r3, r3
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	b2da      	uxtb	r2, r3
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845e:	0b1b      	lsrs	r3, r3, #12
 8008460:	b2db      	uxtb	r3, r3
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	b2da      	uxtb	r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008472:	0a9b      	lsrs	r3, r3, #10
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	b2da      	uxtb	r2, r3
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008486:	0a1b      	lsrs	r3, r3, #8
 8008488:	b2db      	uxtb	r3, r3
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	b2da      	uxtb	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849a:	085b      	lsrs	r3, r3, #1
 800849c:	b2db      	uxtb	r3, r3
 800849e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	004005ff 	.word	0x004005ff

080084c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008528:	f107 030c 	add.w	r3, r7, #12
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f970 	bl	8008814 <SD_SendStatus>
 8008534:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	0a5b      	lsrs	r3, r3, #9
 800854c:	f003 030f 	and.w	r3, r3, #15
 8008550:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008552:	693b      	ldr	r3, [r7, #16]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800855c:	b5b0      	push	{r4, r5, r7, lr}
 800855e:	b094      	sub	sp, #80	; 0x50
 8008560:	af04      	add	r7, sp, #16
 8008562:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008564:	2301      	movs	r3, #1
 8008566:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f002 fc8b 	bl	800ae88 <SDMMC_GetPowerState>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008578:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800857c:	e0b8      	b.n	80086f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008582:	2b03      	cmp	r3, #3
 8008584:	d02f      	beq.n	80085e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f002 fe72 	bl	800b274 <SDMMC_CmdSendCID>
 8008590:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <SD_InitCard+0x40>
    {
      return errorstate;
 8008598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859a:	e0a9      	b.n	80086f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2100      	movs	r1, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f002 fcb5 	bl	800af12 <SDMMC_GetResponse>
 80085a8:	4602      	mov	r2, r0
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2104      	movs	r1, #4
 80085b4:	4618      	mov	r0, r3
 80085b6:	f002 fcac 	bl	800af12 <SDMMC_GetResponse>
 80085ba:	4602      	mov	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2108      	movs	r1, #8
 80085c6:	4618      	mov	r0, r3
 80085c8:	f002 fca3 	bl	800af12 <SDMMC_GetResponse>
 80085cc:	4602      	mov	r2, r0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	210c      	movs	r1, #12
 80085d8:	4618      	mov	r0, r3
 80085da:	f002 fc9a 	bl	800af12 <SDMMC_GetResponse>
 80085de:	4602      	mov	r2, r0
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d00d      	beq.n	800860a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f107 020e 	add.w	r2, r7, #14
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 fe78 	bl	800b2ee <SDMMC_CmdSetRelAdd>
 80085fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <SD_InitCard+0xae>
    {
      return errorstate;
 8008606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008608:	e072      	b.n	80086f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860e:	2b03      	cmp	r3, #3
 8008610:	d036      	beq.n	8008680 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008612:	89fb      	ldrh	r3, [r7, #14]
 8008614:	461a      	mov	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008622:	041b      	lsls	r3, r3, #16
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	f002 fe42 	bl	800b2b0 <SDMMC_CmdSendCSD>
 800862c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008636:	e05b      	b.n	80086f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f002 fc67 	bl	800af12 <SDMMC_GetResponse>
 8008644:	4602      	mov	r2, r0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2104      	movs	r1, #4
 8008650:	4618      	mov	r0, r3
 8008652:	f002 fc5e 	bl	800af12 <SDMMC_GetResponse>
 8008656:	4602      	mov	r2, r0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2108      	movs	r1, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f002 fc55 	bl	800af12 <SDMMC_GetResponse>
 8008668:	4602      	mov	r2, r0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	210c      	movs	r1, #12
 8008674:	4618      	mov	r0, r3
 8008676:	f002 fc4c 	bl	800af12 <SDMMC_GetResponse>
 800867a:	4602      	mov	r2, r0
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2104      	movs	r1, #4
 8008686:	4618      	mov	r0, r3
 8008688:	f002 fc43 	bl	800af12 <SDMMC_GetResponse>
 800868c:	4603      	mov	r3, r0
 800868e:	0d1a      	lsrs	r2, r3, #20
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008694:	f107 0310 	add.w	r3, r7, #16
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fd6e 	bl	800817c <HAL_SD_GetCardCSD>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086aa:	e021      	b.n	80086f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6819      	ldr	r1, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b4:	041b      	lsls	r3, r3, #16
 80086b6:	2200      	movs	r2, #0
 80086b8:	461c      	mov	r4, r3
 80086ba:	4615      	mov	r5, r2
 80086bc:	4622      	mov	r2, r4
 80086be:	462b      	mov	r3, r5
 80086c0:	4608      	mov	r0, r1
 80086c2:	f002 fd31 	bl	800b128 <SDMMC_CmdSelDesel>
 80086c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <SD_InitCard+0x176>
  {
    return errorstate;
 80086ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d0:	e00e      	b.n	80086f0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681d      	ldr	r5, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	466c      	mov	r4, sp
 80086da:	f103 0210 	add.w	r2, r3, #16
 80086de:	ca07      	ldmia	r2, {r0, r1, r2}
 80086e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086e4:	3304      	adds	r3, #4
 80086e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086e8:	4628      	mov	r0, r5
 80086ea:	f002 fb75 	bl	800add8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3740      	adds	r7, #64	; 0x40
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bdb0      	pop	{r4, r5, r7, pc}

080086f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	2300      	movs	r3, #0
 800870a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f002 fd2c 	bl	800b16e <SDMMC_CmdGoIdleState>
 8008716:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <SD_PowerON+0x2a>
  {
    return errorstate;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	e072      	b.n	8008808 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f002 fd3f 	bl	800b1aa <SDMMC_CmdOperCond>
 800872c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00d      	beq.n	8008750 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4618      	mov	r0, r3
 8008740:	f002 fd15 	bl	800b16e <SDMMC_CmdGoIdleState>
 8008744:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <SD_PowerON+0x5e>
    {
      return errorstate;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	e05b      	b.n	8008808 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800875a:	2b01      	cmp	r3, #1
 800875c:	d137      	bne.n	80087ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f002 fd3f 	bl	800b1e8 <SDMMC_CmdAppCommand>
 800876a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d02d      	beq.n	80087ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008772:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008776:	e047      	b.n	8008808 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2100      	movs	r1, #0
 800877e:	4618      	mov	r0, r3
 8008780:	f002 fd32 	bl	800b1e8 <SDMMC_CmdAppCommand>
 8008784:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <SD_PowerON+0x98>
    {
      return errorstate;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	e03b      	b.n	8008808 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	491e      	ldr	r1, [pc, #120]	; (8008810 <SD_PowerON+0x118>)
 8008796:	4618      	mov	r0, r3
 8008798:	f002 fd48 	bl	800b22c <SDMMC_CmdAppOperCommand>
 800879c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087a8:	e02e      	b.n	8008808 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2100      	movs	r1, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f002 fbae 	bl	800af12 <SDMMC_GetResponse>
 80087b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	0fdb      	lsrs	r3, r3, #31
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <SD_PowerON+0xcc>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <SD_PowerON+0xce>
 80087c4:	2300      	movs	r3, #0
 80087c6:	613b      	str	r3, [r7, #16]

    count++;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	3301      	adds	r3, #1
 80087cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d802      	bhi.n	80087de <SD_PowerON+0xe6>
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0cc      	beq.n	8008778 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d902      	bls.n	80087ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087ec:	e00c      	b.n	8008808 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	645a      	str	r2, [r3, #68]	; 0x44
 80087fe:	e002      	b.n	8008806 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	c1100000 	.word	0xc1100000

08008814 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d102      	bne.n	800882a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008828:	e018      	b.n	800885c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008832:	041b      	lsls	r3, r3, #16
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f002 fd7a 	bl	800b330 <SDMMC_CmdSendStatus>
 800883c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	e009      	b.n	800885c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2100      	movs	r1, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f002 fb5f 	bl	800af12 <SDMMC_GetResponse>
 8008854:	4602      	mov	r2, r0
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e09d      	b.n	80089b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d108      	bne.n	8008890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008886:	d009      	beq.n	800889c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	61da      	str	r2, [r3, #28]
 800888e:	e005      	b.n	800889c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d106      	bne.n	80088bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7f9 fa6a 	bl	8001d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2202      	movs	r2, #2
 80088c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088dc:	d902      	bls.n	80088e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	e002      	b.n	80088ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80088f2:	d007      	beq.n	8008904 <HAL_SPI_Init+0xa0>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088fc:	d002      	beq.n	8008904 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008914:	431a      	orrs	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800893c:	431a      	orrs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008946:	ea42 0103 	orr.w	r1, r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	0c1b      	lsrs	r3, r3, #16
 8008960:	f003 0204 	and.w	r2, r3, #4
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	431a      	orrs	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008980:	ea42 0103 	orr.w	r1, r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69da      	ldr	r2, [r3, #28]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b088      	sub	sp, #32
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <HAL_SPI_Transmit+0x22>
 80089d8:	2302      	movs	r3, #2
 80089da:	e158      	b.n	8008c8e <HAL_SPI_Transmit+0x2d4>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089e4:	f7f9 fd74 	bl	80024d0 <HAL_GetTick>
 80089e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d002      	beq.n	8008a00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80089fa:	2302      	movs	r3, #2
 80089fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089fe:	e13d      	b.n	8008c7c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <HAL_SPI_Transmit+0x52>
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a10:	e134      	b.n	8008c7c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2203      	movs	r2, #3
 8008a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	88fa      	ldrh	r2, [r7, #6]
 8008a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	88fa      	ldrh	r2, [r7, #6]
 8008a30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a5c:	d10f      	bne.n	8008a7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a88:	2b40      	cmp	r3, #64	; 0x40
 8008a8a:	d007      	beq.n	8008a9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008aa4:	d94b      	bls.n	8008b3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <HAL_SPI_Transmit+0xfa>
 8008aae:	8afb      	ldrh	r3, [r7, #22]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d13e      	bne.n	8008b32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	881a      	ldrh	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	1c9a      	adds	r2, r3, #2
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008ad8:	e02b      	b.n	8008b32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d112      	bne.n	8008b0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	881a      	ldrh	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af8:	1c9a      	adds	r2, r3, #2
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b0c:	e011      	b.n	8008b32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b0e:	f7f9 fcdf 	bl	80024d0 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d803      	bhi.n	8008b26 <HAL_SPI_Transmit+0x16c>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b24:	d102      	bne.n	8008b2c <HAL_SPI_Transmit+0x172>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b30:	e0a4      	b.n	8008c7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1ce      	bne.n	8008ada <HAL_SPI_Transmit+0x120>
 8008b3c:	e07c      	b.n	8008c38 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_SPI_Transmit+0x192>
 8008b46:	8afb      	ldrh	r3, [r7, #22]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d170      	bne.n	8008c2e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d912      	bls.n	8008b7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	881a      	ldrh	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	1c9a      	adds	r2, r3, #2
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b02      	subs	r3, #2
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b7a:	e058      	b.n	8008c2e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	330c      	adds	r3, #12
 8008b86:	7812      	ldrb	r2, [r2, #0]
 8008b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008ba2:	e044      	b.n	8008c2e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d12b      	bne.n	8008c0a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d912      	bls.n	8008be2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	881a      	ldrh	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	1c9a      	adds	r2, r3, #2
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b02      	subs	r3, #2
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008be0:	e025      	b.n	8008c2e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	330c      	adds	r3, #12
 8008bec:	7812      	ldrb	r2, [r2, #0]
 8008bee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	3b01      	subs	r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c08:	e011      	b.n	8008c2e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c0a:	f7f9 fc61 	bl	80024d0 <HAL_GetTick>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d803      	bhi.n	8008c22 <HAL_SPI_Transmit+0x268>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c20:	d102      	bne.n	8008c28 <HAL_SPI_Transmit+0x26e>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d102      	bne.n	8008c2e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c2c:	e026      	b.n	8008c7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1b5      	bne.n	8008ba4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 fbf3 	bl	8009428 <SPI_EndRxTxTransaction>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c56:	2300      	movs	r3, #0
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	613b      	str	r3, [r7, #16]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	77fb      	strb	r3, [r7, #31]
 8008c78:	e000      	b.n	8008c7c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008c7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <HAL_SPI_Transmit_DMA+0x20>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e0d8      	b.n	8008e6a <HAL_SPI_Transmit_DMA+0x1d2>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d002      	beq.n	8008cd2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cd0:	e0c6      	b.n	8008e60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_SPI_Transmit_DMA+0x46>
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ce2:	e0bd      	b.n	8008e60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	88fa      	ldrh	r2, [r7, #6]
 8008cfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	88fa      	ldrh	r2, [r7, #6]
 8008d02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d2e:	d10f      	bne.n	8008d50 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d54:	4a47      	ldr	r2, [pc, #284]	; (8008e74 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5c:	4a46      	ldr	r2, [pc, #280]	; (8008e78 <HAL_SPI_Transmit_DMA+0x1e0>)
 8008d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d64:	4a45      	ldr	r2, [pc, #276]	; (8008e7c <HAL_SPI_Transmit_DMA+0x1e4>)
 8008d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d7e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d88:	d82d      	bhi.n	8008de6 <HAL_SPI_Transmit_DMA+0x14e>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d94:	d127      	bne.n	8008de6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10f      	bne.n	8008dc4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008db2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	085b      	lsrs	r3, r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dc2:	e010      	b.n	8008de6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dd2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	085b      	lsrs	r3, r3, #1
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	3301      	adds	r3, #1
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dee:	4619      	mov	r1, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	330c      	adds	r3, #12
 8008df6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dfc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dfe:	f7f9 ffeb 	bl	8002dd8 <HAL_DMA_Start_IT>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00c      	beq.n	8008e22 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0c:	f043 0210 	orr.w	r2, r3, #16
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008e20:	e01e      	b.n	8008e60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2c:	2b40      	cmp	r3, #64	; 0x40
 8008e2e:	d007      	beq.n	8008e40 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e3e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0220 	orr.w	r2, r2, #32
 8008e4e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0202 	orr.w	r2, r2, #2
 8008e5e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	08009165 	.word	0x08009165
 8008e78:	080090bd 	.word	0x080090bd
 8008e7c:	08009181 	.word	0x08009181

08008e80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	099b      	lsrs	r3, r3, #6
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10f      	bne.n	8008ec4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	099b      	lsrs	r3, r3, #6
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
    return;
 8008ec2:	e0d7      	b.n	8009074 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	085b      	lsrs	r3, r3, #1
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00a      	beq.n	8008ee6 <HAL_SPI_IRQHandler+0x66>
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	09db      	lsrs	r3, r3, #7
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d004      	beq.n	8008ee6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
    return;
 8008ee4:	e0c6      	b.n	8009074 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10c      	bne.n	8008f0c <HAL_SPI_IRQHandler+0x8c>
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	099b      	lsrs	r3, r3, #6
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	0a1b      	lsrs	r3, r3, #8
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 80b4 	beq.w	8009074 <HAL_SPI_IRQHandler+0x1f4>
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	095b      	lsrs	r3, r3, #5
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80ad 	beq.w	8009074 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	099b      	lsrs	r3, r3, #6
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d023      	beq.n	8008f6e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d011      	beq.n	8008f56 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f36:	f043 0204 	orr.w	r2, r3, #4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	e00b      	b.n	8008f6e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f56:	2300      	movs	r3, #0
 8008f58:	613b      	str	r3, [r7, #16]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	613b      	str	r3, [r7, #16]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	693b      	ldr	r3, [r7, #16]
        return;
 8008f6c:	e082      	b.n	8009074 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	095b      	lsrs	r3, r3, #5
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d014      	beq.n	8008fa4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f7e:	f043 0201 	orr.w	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	0a1b      	lsrs	r3, r3, #8
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00c      	beq.n	8008fca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb4:	f043 0208 	orr.w	r2, r3, #8
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60bb      	str	r3, [r7, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	60bb      	str	r3, [r7, #8]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d04f      	beq.n	8009072 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fe0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d104      	bne.n	8008ffe <HAL_SPI_IRQHandler+0x17e>
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d034      	beq.n	8009068 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0203 	bic.w	r2, r2, #3
 800900c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009012:	2b00      	cmp	r3, #0
 8009014:	d011      	beq.n	800903a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901a:	4a18      	ldr	r2, [pc, #96]	; (800907c <HAL_SPI_IRQHandler+0x1fc>)
 800901c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009022:	4618      	mov	r0, r3
 8009024:	f7f9 ff38 	bl	8002e98 <HAL_DMA_Abort_IT>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d005      	beq.n	800903a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903e:	2b00      	cmp	r3, #0
 8009040:	d016      	beq.n	8009070 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009046:	4a0d      	ldr	r2, [pc, #52]	; (800907c <HAL_SPI_IRQHandler+0x1fc>)
 8009048:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904e:	4618      	mov	r0, r3
 8009050:	f7f9 ff22 	bl	8002e98 <HAL_DMA_Abort_IT>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800905e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009066:	e003      	b.n	8009070 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f81d 	bl	80090a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800906e:	e000      	b.n	8009072 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009070:	bf00      	nop
    return;
 8009072:	bf00      	nop
  }
}
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	080091c1 	.word	0x080091c1

08009080 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090ca:	f7f9 fa01 	bl	80024d0 <HAL_GetTick>
 80090ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090de:	d03b      	beq.n	8009158 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0220 	bic.w	r2, r2, #32
 80090ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0202 	bic.w	r2, r2, #2
 80090fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	2164      	movs	r1, #100	; 0x64
 8009104:	6978      	ldr	r0, [r7, #20]
 8009106:	f000 f98f 	bl	8009428 <SPI_EndRxTxTransaction>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009114:	f043 0220 	orr.w	r2, r3, #32
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009124:	2300      	movs	r3, #0
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2200      	movs	r2, #0
 800913e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009150:	6978      	ldr	r0, [r7, #20]
 8009152:	f7ff ffa9 	bl	80090a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009156:	e002      	b.n	800915e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009158:	6978      	ldr	r0, [r7, #20]
 800915a:	f7ff ff91 	bl	8009080 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f7ff ff8e 	bl	8009094 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0203 	bic.w	r2, r2, #3
 800919c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091a2:	f043 0210 	orr.w	r2, r3, #16
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f7ff ff78 	bl	80090a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff ff63 	bl	80090a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091fc:	f7f9 f968 	bl	80024d0 <HAL_GetTick>
 8009200:	4602      	mov	r2, r0
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	1a9b      	subs	r3, r3, r2
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	4413      	add	r3, r2
 800920a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800920c:	f7f9 f960 	bl	80024d0 <HAL_GetTick>
 8009210:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009212:	4b39      	ldr	r3, [pc, #228]	; (80092f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	015b      	lsls	r3, r3, #5
 8009218:	0d1b      	lsrs	r3, r3, #20
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	fb02 f303 	mul.w	r3, r2, r3
 8009220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009222:	e054      	b.n	80092ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922a:	d050      	beq.n	80092ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800922c:	f7f9 f950 	bl	80024d0 <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	69fa      	ldr	r2, [r7, #28]
 8009238:	429a      	cmp	r2, r3
 800923a:	d902      	bls.n	8009242 <SPI_WaitFlagStateUntilTimeout+0x56>
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d13d      	bne.n	80092be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800925a:	d111      	bne.n	8009280 <SPI_WaitFlagStateUntilTimeout+0x94>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009264:	d004      	beq.n	8009270 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800926e:	d107      	bne.n	8009280 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800927e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009288:	d10f      	bne.n	80092aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e017      	b.n	80092ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4013      	ands	r3, r2
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	429a      	cmp	r2, r3
 80092dc:	bf0c      	ite	eq
 80092de:	2301      	moveq	r3, #1
 80092e0:	2300      	movne	r3, #0
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d19b      	bne.n	8009224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3720      	adds	r7, #32
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20000000 	.word	0x20000000

080092fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08a      	sub	sp, #40	; 0x28
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800930e:	f7f9 f8df 	bl	80024d0 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	4413      	add	r3, r2
 800931c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800931e:	f7f9 f8d7 	bl	80024d0 <HAL_GetTick>
 8009322:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	330c      	adds	r3, #12
 800932a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800932c:	4b3d      	ldr	r3, [pc, #244]	; (8009424 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	00da      	lsls	r2, r3, #3
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	0d1b      	lsrs	r3, r3, #20
 800933c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009344:	e060      	b.n	8009408 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800934c:	d107      	bne.n	800935e <SPI_WaitFifoStateUntilTimeout+0x62>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d104      	bne.n	800935e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800935c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009364:	d050      	beq.n	8009408 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009366:	f7f9 f8b3 	bl	80024d0 <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009372:	429a      	cmp	r2, r3
 8009374:	d902      	bls.n	800937c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	2b00      	cmp	r3, #0
 800937a:	d13d      	bne.n	80093f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800938a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009394:	d111      	bne.n	80093ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800939e:	d004      	beq.n	80093aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a8:	d107      	bne.n	80093ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c2:	d10f      	bne.n	80093e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e010      	b.n	800941a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	3b01      	subs	r3, #1
 8009406:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689a      	ldr	r2, [r3, #8]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	4013      	ands	r3, r2
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	429a      	cmp	r2, r3
 8009416:	d196      	bne.n	8009346 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3728      	adds	r7, #40	; 0x28
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20000000 	.word	0x20000000

08009428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af02      	add	r7, sp, #8
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2200      	movs	r2, #0
 800943c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff ff5b 	bl	80092fc <SPI_WaitFifoStateUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009450:	f043 0220 	orr.w	r2, r3, #32
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e046      	b.n	80094ea <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800945c:	4b25      	ldr	r3, [pc, #148]	; (80094f4 <SPI_EndRxTxTransaction+0xcc>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a25      	ldr	r2, [pc, #148]	; (80094f8 <SPI_EndRxTxTransaction+0xd0>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	0d5b      	lsrs	r3, r3, #21
 8009468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800946c:	fb02 f303 	mul.w	r3, r2, r3
 8009470:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800947a:	d112      	bne.n	80094a2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2200      	movs	r2, #0
 8009484:	2180      	movs	r1, #128	; 0x80
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff feb0 	bl	80091ec <SPI_WaitFlagStateUntilTimeout>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d016      	beq.n	80094c0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009496:	f043 0220 	orr.w	r2, r3, #32
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e023      	b.n	80094ea <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b8:	2b80      	cmp	r3, #128	; 0x80
 80094ba:	d0f2      	beq.n	80094a2 <SPI_EndRxTxTransaction+0x7a>
 80094bc:	e000      	b.n	80094c0 <SPI_EndRxTxTransaction+0x98>
        break;
 80094be:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff ff15 	bl	80092fc <SPI_WaitFifoStateUntilTimeout>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d007      	beq.n	80094e8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094dc:	f043 0220 	orr.w	r2, r3, #32
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e000      	b.n	80094ea <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000000 	.word	0x20000000
 80094f8:	165e9f81 	.word	0x165e9f81

080094fc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e038      	b.n	8009584 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d106      	bne.n	800952c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7f8 fe06 	bl	8002138 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3308      	adds	r3, #8
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f001 fb36 	bl	800aba8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	461a      	mov	r2, r3
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	f001 fbbe 	bl	800acc8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6858      	ldr	r0, [r3, #4]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	f001 fc05 	bl	800ad68 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	6892      	ldr	r2, [r2, #8]
 8009566:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	6892      	ldr	r2, [r2, #8]
 8009572:	f041 0101 	orr.w	r1, r1, #1
 8009576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e049      	b.n	8009632 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d106      	bne.n	80095b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f8 fc88 	bl	8001ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3304      	adds	r3, #4
 80095c8:	4619      	mov	r1, r3
 80095ca:	4610      	mov	r0, r2
 80095cc:	f000 fa74 	bl	8009ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e049      	b.n	80096e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d106      	bne.n	8009666 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f841 	bl	80096e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2202      	movs	r2, #2
 800966a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f000 fa1d 	bl	8009ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009716:	2302      	movs	r3, #2
 8009718:	e0ff      	b.n	800991a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b14      	cmp	r3, #20
 8009726:	f200 80f0 	bhi.w	800990a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800972a:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	08009785 	.word	0x08009785
 8009734:	0800990b 	.word	0x0800990b
 8009738:	0800990b 	.word	0x0800990b
 800973c:	0800990b 	.word	0x0800990b
 8009740:	080097c5 	.word	0x080097c5
 8009744:	0800990b 	.word	0x0800990b
 8009748:	0800990b 	.word	0x0800990b
 800974c:	0800990b 	.word	0x0800990b
 8009750:	08009807 	.word	0x08009807
 8009754:	0800990b 	.word	0x0800990b
 8009758:	0800990b 	.word	0x0800990b
 800975c:	0800990b 	.word	0x0800990b
 8009760:	08009847 	.word	0x08009847
 8009764:	0800990b 	.word	0x0800990b
 8009768:	0800990b 	.word	0x0800990b
 800976c:	0800990b 	.word	0x0800990b
 8009770:	08009889 	.word	0x08009889
 8009774:	0800990b 	.word	0x0800990b
 8009778:	0800990b 	.word	0x0800990b
 800977c:	0800990b 	.word	0x0800990b
 8009780:	080098c9 	.word	0x080098c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fa34 	bl	8009bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0208 	orr.w	r2, r2, #8
 800979e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	699a      	ldr	r2, [r3, #24]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0204 	bic.w	r2, r2, #4
 80097ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6999      	ldr	r1, [r3, #24]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	691a      	ldr	r2, [r3, #16]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	619a      	str	r2, [r3, #24]
      break;
 80097c2:	e0a5      	b.n	8009910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 fa86 	bl	8009cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	699a      	ldr	r2, [r3, #24]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6999      	ldr	r1, [r3, #24]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	021a      	lsls	r2, r3, #8
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	619a      	str	r2, [r3, #24]
      break;
 8009804:	e084      	b.n	8009910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68b9      	ldr	r1, [r7, #8]
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fadd 	bl	8009dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69da      	ldr	r2, [r3, #28]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0208 	orr.w	r2, r2, #8
 8009820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69da      	ldr	r2, [r3, #28]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0204 	bic.w	r2, r2, #4
 8009830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69d9      	ldr	r1, [r3, #28]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	61da      	str	r2, [r3, #28]
      break;
 8009844:	e064      	b.n	8009910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fb33 	bl	8009eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69da      	ldr	r2, [r3, #28]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69da      	ldr	r2, [r3, #28]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	69d9      	ldr	r1, [r3, #28]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	021a      	lsls	r2, r3, #8
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	430a      	orrs	r2, r1
 8009884:	61da      	str	r2, [r3, #28]
      break;
 8009886:	e043      	b.n	8009910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	4618      	mov	r0, r3
 8009890:	f000 fb6a 	bl	8009f68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f042 0208 	orr.w	r2, r2, #8
 80098a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f022 0204 	bic.w	r2, r2, #4
 80098b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	691a      	ldr	r2, [r3, #16]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098c6:	e023      	b.n	8009910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fb9c 	bl	800a00c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	021a      	lsls	r2, r3, #8
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009908:	e002      	b.n	8009910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]
      break;
 800990e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009918:	7dfb      	ldrb	r3, [r7, #23]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop

08009924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_TIM_ConfigClockSource+0x1c>
 800993c:	2302      	movs	r3, #2
 800993e:	e0b4      	b.n	8009aaa <HAL_TIM_ConfigClockSource+0x186>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	4b56      	ldr	r3, [pc, #344]	; (8009ab4 <HAL_TIM_ConfigClockSource+0x190>)
 800995c:	4013      	ands	r3, r2
 800995e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009978:	d03e      	beq.n	80099f8 <HAL_TIM_ConfigClockSource+0xd4>
 800997a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800997e:	f200 8087 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009986:	f000 8086 	beq.w	8009a96 <HAL_TIM_ConfigClockSource+0x172>
 800998a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998e:	d87f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009990:	2b70      	cmp	r3, #112	; 0x70
 8009992:	d01a      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0xa6>
 8009994:	2b70      	cmp	r3, #112	; 0x70
 8009996:	d87b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009998:	2b60      	cmp	r3, #96	; 0x60
 800999a:	d050      	beq.n	8009a3e <HAL_TIM_ConfigClockSource+0x11a>
 800999c:	2b60      	cmp	r3, #96	; 0x60
 800999e:	d877      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099a0:	2b50      	cmp	r3, #80	; 0x50
 80099a2:	d03c      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0xfa>
 80099a4:	2b50      	cmp	r3, #80	; 0x50
 80099a6:	d873      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	d058      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0x13a>
 80099ac:	2b40      	cmp	r3, #64	; 0x40
 80099ae:	d86f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099b0:	2b30      	cmp	r3, #48	; 0x30
 80099b2:	d064      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099b4:	2b30      	cmp	r3, #48	; 0x30
 80099b6:	d86b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d060      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d867      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d05c      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099c4:	2b10      	cmp	r3, #16
 80099c6:	d05a      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099c8:	e062      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6899      	ldr	r1, [r3, #8]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f000 fbe5 	bl	800a1a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80099ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	609a      	str	r2, [r3, #8]
      break;
 80099f6:	e04f      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	6899      	ldr	r1, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f000 fbce 	bl	800a1a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689a      	ldr	r2, [r3, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a1a:	609a      	str	r2, [r3, #8]
      break;
 8009a1c:	e03c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	6859      	ldr	r1, [r3, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f000 fb42 	bl	800a0b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2150      	movs	r1, #80	; 0x50
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fb9b 	bl	800a172 <TIM_ITRx_SetConfig>
      break;
 8009a3c:	e02c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6859      	ldr	r1, [r3, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f000 fb61 	bl	800a112 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2160      	movs	r1, #96	; 0x60
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fb8b 	bl	800a172 <TIM_ITRx_SetConfig>
      break;
 8009a5c:	e01c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6859      	ldr	r1, [r3, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f000 fb22 	bl	800a0b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2140      	movs	r1, #64	; 0x40
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fb7b 	bl	800a172 <TIM_ITRx_SetConfig>
      break;
 8009a7c:	e00c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f000 fb72 	bl	800a172 <TIM_ITRx_SetConfig>
      break;
 8009a8e:	e003      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	73fb      	strb	r3, [r7, #15]
      break;
 8009a94:	e000      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	fffeff88 	.word	0xfffeff88

08009ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a40      	ldr	r2, [pc, #256]	; (8009bcc <TIM_Base_SetConfig+0x114>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d013      	beq.n	8009af8 <TIM_Base_SetConfig+0x40>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad6:	d00f      	beq.n	8009af8 <TIM_Base_SetConfig+0x40>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a3d      	ldr	r2, [pc, #244]	; (8009bd0 <TIM_Base_SetConfig+0x118>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d00b      	beq.n	8009af8 <TIM_Base_SetConfig+0x40>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a3c      	ldr	r2, [pc, #240]	; (8009bd4 <TIM_Base_SetConfig+0x11c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d007      	beq.n	8009af8 <TIM_Base_SetConfig+0x40>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a3b      	ldr	r2, [pc, #236]	; (8009bd8 <TIM_Base_SetConfig+0x120>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d003      	beq.n	8009af8 <TIM_Base_SetConfig+0x40>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a3a      	ldr	r2, [pc, #232]	; (8009bdc <TIM_Base_SetConfig+0x124>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d108      	bne.n	8009b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a2f      	ldr	r2, [pc, #188]	; (8009bcc <TIM_Base_SetConfig+0x114>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d02b      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b18:	d027      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a2c      	ldr	r2, [pc, #176]	; (8009bd0 <TIM_Base_SetConfig+0x118>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d023      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a2b      	ldr	r2, [pc, #172]	; (8009bd4 <TIM_Base_SetConfig+0x11c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d01f      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a2a      	ldr	r2, [pc, #168]	; (8009bd8 <TIM_Base_SetConfig+0x120>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d01b      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a29      	ldr	r2, [pc, #164]	; (8009bdc <TIM_Base_SetConfig+0x124>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d017      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a28      	ldr	r2, [pc, #160]	; (8009be0 <TIM_Base_SetConfig+0x128>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d013      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a27      	ldr	r2, [pc, #156]	; (8009be4 <TIM_Base_SetConfig+0x12c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d00f      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a26      	ldr	r2, [pc, #152]	; (8009be8 <TIM_Base_SetConfig+0x130>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d00b      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a25      	ldr	r2, [pc, #148]	; (8009bec <TIM_Base_SetConfig+0x134>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d007      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a24      	ldr	r2, [pc, #144]	; (8009bf0 <TIM_Base_SetConfig+0x138>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d003      	beq.n	8009b6a <TIM_Base_SetConfig+0xb2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a23      	ldr	r2, [pc, #140]	; (8009bf4 <TIM_Base_SetConfig+0x13c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d108      	bne.n	8009b7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a0a      	ldr	r2, [pc, #40]	; (8009bcc <TIM_Base_SetConfig+0x114>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d003      	beq.n	8009bb0 <TIM_Base_SetConfig+0xf8>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a0c      	ldr	r2, [pc, #48]	; (8009bdc <TIM_Base_SetConfig+0x124>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d103      	bne.n	8009bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	691a      	ldr	r2, [r3, #16]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	615a      	str	r2, [r3, #20]
}
 8009bbe:	bf00      	nop
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	40010000 	.word	0x40010000
 8009bd0:	40000400 	.word	0x40000400
 8009bd4:	40000800 	.word	0x40000800
 8009bd8:	40000c00 	.word	0x40000c00
 8009bdc:	40010400 	.word	0x40010400
 8009be0:	40014000 	.word	0x40014000
 8009be4:	40014400 	.word	0x40014400
 8009be8:	40014800 	.word	0x40014800
 8009bec:	40001800 	.word	0x40001800
 8009bf0:	40001c00 	.word	0x40001c00
 8009bf4:	40002000 	.word	0x40002000

08009bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	f023 0201 	bic.w	r2, r3, #1
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	4b2b      	ldr	r3, [pc, #172]	; (8009cd0 <TIM_OC1_SetConfig+0xd8>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0303 	bic.w	r3, r3, #3
 8009c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f023 0302 	bic.w	r3, r3, #2
 8009c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a21      	ldr	r2, [pc, #132]	; (8009cd4 <TIM_OC1_SetConfig+0xdc>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d003      	beq.n	8009c5c <TIM_OC1_SetConfig+0x64>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a20      	ldr	r2, [pc, #128]	; (8009cd8 <TIM_OC1_SetConfig+0xe0>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d10c      	bne.n	8009c76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f023 0308 	bic.w	r3, r3, #8
 8009c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f023 0304 	bic.w	r3, r3, #4
 8009c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a16      	ldr	r2, [pc, #88]	; (8009cd4 <TIM_OC1_SetConfig+0xdc>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d003      	beq.n	8009c86 <TIM_OC1_SetConfig+0x8e>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a15      	ldr	r2, [pc, #84]	; (8009cd8 <TIM_OC1_SetConfig+0xe0>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d111      	bne.n	8009caa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	621a      	str	r2, [r3, #32]
}
 8009cc4:	bf00      	nop
 8009cc6:	371c      	adds	r7, #28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	fffeff8f 	.word	0xfffeff8f
 8009cd4:	40010000 	.word	0x40010000
 8009cd8:	40010400 	.word	0x40010400

08009cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	f023 0210 	bic.w	r2, r3, #16
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	4b2e      	ldr	r3, [pc, #184]	; (8009dc0 <TIM_OC2_SetConfig+0xe4>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f023 0320 	bic.w	r3, r3, #32
 8009d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	011b      	lsls	r3, r3, #4
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a23      	ldr	r2, [pc, #140]	; (8009dc4 <TIM_OC2_SetConfig+0xe8>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d003      	beq.n	8009d44 <TIM_OC2_SetConfig+0x68>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a22      	ldr	r2, [pc, #136]	; (8009dc8 <TIM_OC2_SetConfig+0xec>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d10d      	bne.n	8009d60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	011b      	lsls	r3, r3, #4
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a18      	ldr	r2, [pc, #96]	; (8009dc4 <TIM_OC2_SetConfig+0xe8>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d003      	beq.n	8009d70 <TIM_OC2_SetConfig+0x94>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <TIM_OC2_SetConfig+0xec>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d113      	bne.n	8009d98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	621a      	str	r2, [r3, #32]
}
 8009db2:	bf00      	nop
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	feff8fff 	.word	0xfeff8fff
 8009dc4:	40010000 	.word	0x40010000
 8009dc8:	40010400 	.word	0x40010400

08009dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	4b2d      	ldr	r3, [pc, #180]	; (8009eac <TIM_OC3_SetConfig+0xe0>)
 8009df8:	4013      	ands	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a22      	ldr	r2, [pc, #136]	; (8009eb0 <TIM_OC3_SetConfig+0xe4>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d003      	beq.n	8009e32 <TIM_OC3_SetConfig+0x66>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a21      	ldr	r2, [pc, #132]	; (8009eb4 <TIM_OC3_SetConfig+0xe8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d10d      	bne.n	8009e4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a17      	ldr	r2, [pc, #92]	; (8009eb0 <TIM_OC3_SetConfig+0xe4>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d003      	beq.n	8009e5e <TIM_OC3_SetConfig+0x92>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a16      	ldr	r2, [pc, #88]	; (8009eb4 <TIM_OC3_SetConfig+0xe8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d113      	bne.n	8009e86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	621a      	str	r2, [r3, #32]
}
 8009ea0:	bf00      	nop
 8009ea2:	371c      	adds	r7, #28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	fffeff8f 	.word	0xfffeff8f
 8009eb0:	40010000 	.word	0x40010000
 8009eb4:	40010400 	.word	0x40010400

08009eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	4b1e      	ldr	r3, [pc, #120]	; (8009f5c <TIM_OC4_SetConfig+0xa4>)
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	031b      	lsls	r3, r3, #12
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a13      	ldr	r2, [pc, #76]	; (8009f60 <TIM_OC4_SetConfig+0xa8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d003      	beq.n	8009f20 <TIM_OC4_SetConfig+0x68>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a12      	ldr	r2, [pc, #72]	; (8009f64 <TIM_OC4_SetConfig+0xac>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d109      	bne.n	8009f34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	019b      	lsls	r3, r3, #6
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	621a      	str	r2, [r3, #32]
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	feff8fff 	.word	0xfeff8fff
 8009f60:	40010000 	.word	0x40010000
 8009f64:	40010400 	.word	0x40010400

08009f68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <TIM_OC5_SetConfig+0x98>)
 8009f94:	4013      	ands	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009fa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	041b      	lsls	r3, r3, #16
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a12      	ldr	r2, [pc, #72]	; (800a004 <TIM_OC5_SetConfig+0x9c>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d003      	beq.n	8009fc6 <TIM_OC5_SetConfig+0x5e>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a11      	ldr	r2, [pc, #68]	; (800a008 <TIM_OC5_SetConfig+0xa0>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d109      	bne.n	8009fda <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	621a      	str	r2, [r3, #32]
}
 8009ff4:	bf00      	nop
 8009ff6:	371c      	adds	r7, #28
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	fffeff8f 	.word	0xfffeff8f
 800a004:	40010000 	.word	0x40010000
 800a008:	40010400 	.word	0x40010400

0800a00c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	4b1c      	ldr	r3, [pc, #112]	; (800a0a8 <TIM_OC6_SetConfig+0x9c>)
 800a038:	4013      	ands	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	021b      	lsls	r3, r3, #8
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	4313      	orrs	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a04e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	051b      	lsls	r3, r3, #20
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	4313      	orrs	r3, r2
 800a05a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a13      	ldr	r2, [pc, #76]	; (800a0ac <TIM_OC6_SetConfig+0xa0>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d003      	beq.n	800a06c <TIM_OC6_SetConfig+0x60>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a12      	ldr	r2, [pc, #72]	; (800a0b0 <TIM_OC6_SetConfig+0xa4>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d109      	bne.n	800a080 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a072:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	029b      	lsls	r3, r3, #10
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	621a      	str	r2, [r3, #32]
}
 800a09a:	bf00      	nop
 800a09c:	371c      	adds	r7, #28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	feff8fff 	.word	0xfeff8fff
 800a0ac:	40010000 	.word	0x40010000
 800a0b0:	40010400 	.word	0x40010400

0800a0b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6a1b      	ldr	r3, [r3, #32]
 800a0c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	f023 0201 	bic.w	r2, r3, #1
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f023 030a 	bic.w	r3, r3, #10
 800a0f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	621a      	str	r2, [r3, #32]
}
 800a106:	bf00      	nop
 800a108:	371c      	adds	r7, #28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a112:	b480      	push	{r7}
 800a114:	b087      	sub	sp, #28
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	f023 0210 	bic.w	r2, r3, #16
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a1b      	ldr	r3, [r3, #32]
 800a134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a13c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	031b      	lsls	r3, r3, #12
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	4313      	orrs	r3, r2
 800a146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a14e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4313      	orrs	r3, r2
 800a158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a172:	b480      	push	{r7}
 800a174:	b085      	sub	sp, #20
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4313      	orrs	r3, r2
 800a190:	f043 0307 	orr.w	r3, r3, #7
 800a194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	609a      	str	r2, [r3, #8]
}
 800a19c:	bf00      	nop
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	021a      	lsls	r2, r3, #8
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	609a      	str	r2, [r3, #8]
}
 800a1dc:	bf00      	nop
 800a1de:	371c      	adds	r7, #28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e06d      	b.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a30      	ldr	r2, [pc, #192]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d004      	beq.n	800a234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a2f      	ldr	r2, [pc, #188]	; (800a2ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d108      	bne.n	800a246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a23a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	4313      	orrs	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a20      	ldr	r2, [pc, #128]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d022      	beq.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a272:	d01d      	beq.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a1d      	ldr	r2, [pc, #116]	; (800a2f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d018      	beq.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a1c      	ldr	r2, [pc, #112]	; (800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d013      	beq.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a1a      	ldr	r2, [pc, #104]	; (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d00e      	beq.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a15      	ldr	r2, [pc, #84]	; (800a2ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d009      	beq.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a16      	ldr	r2, [pc, #88]	; (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d004      	beq.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a15      	ldr	r2, [pc, #84]	; (800a300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d10c      	bne.n	800a2ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	40010000 	.word	0x40010000
 800a2ec:	40010400 	.word	0x40010400
 800a2f0:	40000400 	.word	0x40000400
 800a2f4:	40000800 	.word	0x40000800
 800a2f8:	40000c00 	.word	0x40000c00
 800a2fc:	40014000 	.word	0x40014000
 800a300:	40001800 	.word	0x40001800

0800a304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e040      	b.n	800a398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d106      	bne.n	800a32c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7f7 fe3a 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2224      	movs	r2, #36	; 0x24
 800a330:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 0201 	bic.w	r2, r2, #1
 800a340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f82c 	bl	800a3a0 <UART_SetConfig>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d101      	bne.n	800a352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e022      	b.n	800a398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fa84 	bl	800a868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a36e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a37e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f042 0201 	orr.w	r2, r2, #1
 800a38e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fb0b 	bl	800a9ac <UART_CheckIdleState>
 800a396:	4603      	mov	r3, r0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	431a      	orrs	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	4ba6      	ldr	r3, [pc, #664]	; (800a664 <UART_SetConfig+0x2c4>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	6979      	ldr	r1, [r7, #20]
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68da      	ldr	r2, [r3, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	430a      	orrs	r2, r1
 800a410:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a94      	ldr	r2, [pc, #592]	; (800a668 <UART_SetConfig+0x2c8>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d120      	bne.n	800a45e <UART_SetConfig+0xbe>
 800a41c:	4b93      	ldr	r3, [pc, #588]	; (800a66c <UART_SetConfig+0x2cc>)
 800a41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a422:	f003 0303 	and.w	r3, r3, #3
 800a426:	2b03      	cmp	r3, #3
 800a428:	d816      	bhi.n	800a458 <UART_SetConfig+0xb8>
 800a42a:	a201      	add	r2, pc, #4	; (adr r2, 800a430 <UART_SetConfig+0x90>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a441 	.word	0x0800a441
 800a434:	0800a44d 	.word	0x0800a44d
 800a438:	0800a447 	.word	0x0800a447
 800a43c:	0800a453 	.word	0x0800a453
 800a440:	2301      	movs	r3, #1
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e150      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a446:	2302      	movs	r3, #2
 800a448:	77fb      	strb	r3, [r7, #31]
 800a44a:	e14d      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a44c:	2304      	movs	r3, #4
 800a44e:	77fb      	strb	r3, [r7, #31]
 800a450:	e14a      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a452:	2308      	movs	r3, #8
 800a454:	77fb      	strb	r3, [r7, #31]
 800a456:	e147      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a458:	2310      	movs	r3, #16
 800a45a:	77fb      	strb	r3, [r7, #31]
 800a45c:	e144      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a83      	ldr	r2, [pc, #524]	; (800a670 <UART_SetConfig+0x2d0>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d132      	bne.n	800a4ce <UART_SetConfig+0x12e>
 800a468:	4b80      	ldr	r3, [pc, #512]	; (800a66c <UART_SetConfig+0x2cc>)
 800a46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46e:	f003 030c 	and.w	r3, r3, #12
 800a472:	2b0c      	cmp	r3, #12
 800a474:	d828      	bhi.n	800a4c8 <UART_SetConfig+0x128>
 800a476:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <UART_SetConfig+0xdc>)
 800a478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47c:	0800a4b1 	.word	0x0800a4b1
 800a480:	0800a4c9 	.word	0x0800a4c9
 800a484:	0800a4c9 	.word	0x0800a4c9
 800a488:	0800a4c9 	.word	0x0800a4c9
 800a48c:	0800a4bd 	.word	0x0800a4bd
 800a490:	0800a4c9 	.word	0x0800a4c9
 800a494:	0800a4c9 	.word	0x0800a4c9
 800a498:	0800a4c9 	.word	0x0800a4c9
 800a49c:	0800a4b7 	.word	0x0800a4b7
 800a4a0:	0800a4c9 	.word	0x0800a4c9
 800a4a4:	0800a4c9 	.word	0x0800a4c9
 800a4a8:	0800a4c9 	.word	0x0800a4c9
 800a4ac:	0800a4c3 	.word	0x0800a4c3
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	77fb      	strb	r3, [r7, #31]
 800a4b4:	e118      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	77fb      	strb	r3, [r7, #31]
 800a4ba:	e115      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a4bc:	2304      	movs	r3, #4
 800a4be:	77fb      	strb	r3, [r7, #31]
 800a4c0:	e112      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a4c2:	2308      	movs	r3, #8
 800a4c4:	77fb      	strb	r3, [r7, #31]
 800a4c6:	e10f      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	77fb      	strb	r3, [r7, #31]
 800a4cc:	e10c      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a68      	ldr	r2, [pc, #416]	; (800a674 <UART_SetConfig+0x2d4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d120      	bne.n	800a51a <UART_SetConfig+0x17a>
 800a4d8:	4b64      	ldr	r3, [pc, #400]	; (800a66c <UART_SetConfig+0x2cc>)
 800a4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4e2:	2b30      	cmp	r3, #48	; 0x30
 800a4e4:	d013      	beq.n	800a50e <UART_SetConfig+0x16e>
 800a4e6:	2b30      	cmp	r3, #48	; 0x30
 800a4e8:	d814      	bhi.n	800a514 <UART_SetConfig+0x174>
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d009      	beq.n	800a502 <UART_SetConfig+0x162>
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d810      	bhi.n	800a514 <UART_SetConfig+0x174>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d002      	beq.n	800a4fc <UART_SetConfig+0x15c>
 800a4f6:	2b10      	cmp	r3, #16
 800a4f8:	d006      	beq.n	800a508 <UART_SetConfig+0x168>
 800a4fa:	e00b      	b.n	800a514 <UART_SetConfig+0x174>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	77fb      	strb	r3, [r7, #31]
 800a500:	e0f2      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a502:	2302      	movs	r3, #2
 800a504:	77fb      	strb	r3, [r7, #31]
 800a506:	e0ef      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a508:	2304      	movs	r3, #4
 800a50a:	77fb      	strb	r3, [r7, #31]
 800a50c:	e0ec      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a50e:	2308      	movs	r3, #8
 800a510:	77fb      	strb	r3, [r7, #31]
 800a512:	e0e9      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a514:	2310      	movs	r3, #16
 800a516:	77fb      	strb	r3, [r7, #31]
 800a518:	e0e6      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a56      	ldr	r2, [pc, #344]	; (800a678 <UART_SetConfig+0x2d8>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d120      	bne.n	800a566 <UART_SetConfig+0x1c6>
 800a524:	4b51      	ldr	r3, [pc, #324]	; (800a66c <UART_SetConfig+0x2cc>)
 800a526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a52a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a52e:	2bc0      	cmp	r3, #192	; 0xc0
 800a530:	d013      	beq.n	800a55a <UART_SetConfig+0x1ba>
 800a532:	2bc0      	cmp	r3, #192	; 0xc0
 800a534:	d814      	bhi.n	800a560 <UART_SetConfig+0x1c0>
 800a536:	2b80      	cmp	r3, #128	; 0x80
 800a538:	d009      	beq.n	800a54e <UART_SetConfig+0x1ae>
 800a53a:	2b80      	cmp	r3, #128	; 0x80
 800a53c:	d810      	bhi.n	800a560 <UART_SetConfig+0x1c0>
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <UART_SetConfig+0x1a8>
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d006      	beq.n	800a554 <UART_SetConfig+0x1b4>
 800a546:	e00b      	b.n	800a560 <UART_SetConfig+0x1c0>
 800a548:	2300      	movs	r3, #0
 800a54a:	77fb      	strb	r3, [r7, #31]
 800a54c:	e0cc      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a54e:	2302      	movs	r3, #2
 800a550:	77fb      	strb	r3, [r7, #31]
 800a552:	e0c9      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a554:	2304      	movs	r3, #4
 800a556:	77fb      	strb	r3, [r7, #31]
 800a558:	e0c6      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a55a:	2308      	movs	r3, #8
 800a55c:	77fb      	strb	r3, [r7, #31]
 800a55e:	e0c3      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a560:	2310      	movs	r3, #16
 800a562:	77fb      	strb	r3, [r7, #31]
 800a564:	e0c0      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a44      	ldr	r2, [pc, #272]	; (800a67c <UART_SetConfig+0x2dc>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d125      	bne.n	800a5bc <UART_SetConfig+0x21c>
 800a570:	4b3e      	ldr	r3, [pc, #248]	; (800a66c <UART_SetConfig+0x2cc>)
 800a572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a57a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a57e:	d017      	beq.n	800a5b0 <UART_SetConfig+0x210>
 800a580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a584:	d817      	bhi.n	800a5b6 <UART_SetConfig+0x216>
 800a586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a58a:	d00b      	beq.n	800a5a4 <UART_SetConfig+0x204>
 800a58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a590:	d811      	bhi.n	800a5b6 <UART_SetConfig+0x216>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <UART_SetConfig+0x1fe>
 800a596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a59a:	d006      	beq.n	800a5aa <UART_SetConfig+0x20a>
 800a59c:	e00b      	b.n	800a5b6 <UART_SetConfig+0x216>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	77fb      	strb	r3, [r7, #31]
 800a5a2:	e0a1      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	77fb      	strb	r3, [r7, #31]
 800a5a8:	e09e      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a5aa:	2304      	movs	r3, #4
 800a5ac:	77fb      	strb	r3, [r7, #31]
 800a5ae:	e09b      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a5b0:	2308      	movs	r3, #8
 800a5b2:	77fb      	strb	r3, [r7, #31]
 800a5b4:	e098      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a5b6:	2310      	movs	r3, #16
 800a5b8:	77fb      	strb	r3, [r7, #31]
 800a5ba:	e095      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a2f      	ldr	r2, [pc, #188]	; (800a680 <UART_SetConfig+0x2e0>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d125      	bne.n	800a612 <UART_SetConfig+0x272>
 800a5c6:	4b29      	ldr	r3, [pc, #164]	; (800a66c <UART_SetConfig+0x2cc>)
 800a5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5d4:	d017      	beq.n	800a606 <UART_SetConfig+0x266>
 800a5d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5da:	d817      	bhi.n	800a60c <UART_SetConfig+0x26c>
 800a5dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e0:	d00b      	beq.n	800a5fa <UART_SetConfig+0x25a>
 800a5e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e6:	d811      	bhi.n	800a60c <UART_SetConfig+0x26c>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d003      	beq.n	800a5f4 <UART_SetConfig+0x254>
 800a5ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f0:	d006      	beq.n	800a600 <UART_SetConfig+0x260>
 800a5f2:	e00b      	b.n	800a60c <UART_SetConfig+0x26c>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	77fb      	strb	r3, [r7, #31]
 800a5f8:	e076      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	77fb      	strb	r3, [r7, #31]
 800a5fe:	e073      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a600:	2304      	movs	r3, #4
 800a602:	77fb      	strb	r3, [r7, #31]
 800a604:	e070      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a606:	2308      	movs	r3, #8
 800a608:	77fb      	strb	r3, [r7, #31]
 800a60a:	e06d      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a60c:	2310      	movs	r3, #16
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e06a      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a1b      	ldr	r2, [pc, #108]	; (800a684 <UART_SetConfig+0x2e4>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d138      	bne.n	800a68e <UART_SetConfig+0x2ee>
 800a61c:	4b13      	ldr	r3, [pc, #76]	; (800a66c <UART_SetConfig+0x2cc>)
 800a61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a622:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a626:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a62a:	d017      	beq.n	800a65c <UART_SetConfig+0x2bc>
 800a62c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a630:	d82a      	bhi.n	800a688 <UART_SetConfig+0x2e8>
 800a632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a636:	d00b      	beq.n	800a650 <UART_SetConfig+0x2b0>
 800a638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a63c:	d824      	bhi.n	800a688 <UART_SetConfig+0x2e8>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d003      	beq.n	800a64a <UART_SetConfig+0x2aa>
 800a642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a646:	d006      	beq.n	800a656 <UART_SetConfig+0x2b6>
 800a648:	e01e      	b.n	800a688 <UART_SetConfig+0x2e8>
 800a64a:	2300      	movs	r3, #0
 800a64c:	77fb      	strb	r3, [r7, #31]
 800a64e:	e04b      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a650:	2302      	movs	r3, #2
 800a652:	77fb      	strb	r3, [r7, #31]
 800a654:	e048      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a656:	2304      	movs	r3, #4
 800a658:	77fb      	strb	r3, [r7, #31]
 800a65a:	e045      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a65c:	2308      	movs	r3, #8
 800a65e:	77fb      	strb	r3, [r7, #31]
 800a660:	e042      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a662:	bf00      	nop
 800a664:	efff69f3 	.word	0xefff69f3
 800a668:	40011000 	.word	0x40011000
 800a66c:	40023800 	.word	0x40023800
 800a670:	40004400 	.word	0x40004400
 800a674:	40004800 	.word	0x40004800
 800a678:	40004c00 	.word	0x40004c00
 800a67c:	40005000 	.word	0x40005000
 800a680:	40011400 	.word	0x40011400
 800a684:	40007800 	.word	0x40007800
 800a688:	2310      	movs	r3, #16
 800a68a:	77fb      	strb	r3, [r7, #31]
 800a68c:	e02c      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a72      	ldr	r2, [pc, #456]	; (800a85c <UART_SetConfig+0x4bc>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d125      	bne.n	800a6e4 <UART_SetConfig+0x344>
 800a698:	4b71      	ldr	r3, [pc, #452]	; (800a860 <UART_SetConfig+0x4c0>)
 800a69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a6a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6a6:	d017      	beq.n	800a6d8 <UART_SetConfig+0x338>
 800a6a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6ac:	d817      	bhi.n	800a6de <UART_SetConfig+0x33e>
 800a6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6b2:	d00b      	beq.n	800a6cc <UART_SetConfig+0x32c>
 800a6b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6b8:	d811      	bhi.n	800a6de <UART_SetConfig+0x33e>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <UART_SetConfig+0x326>
 800a6be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6c2:	d006      	beq.n	800a6d2 <UART_SetConfig+0x332>
 800a6c4:	e00b      	b.n	800a6de <UART_SetConfig+0x33e>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	77fb      	strb	r3, [r7, #31]
 800a6ca:	e00d      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	77fb      	strb	r3, [r7, #31]
 800a6d0:	e00a      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a6d2:	2304      	movs	r3, #4
 800a6d4:	77fb      	strb	r3, [r7, #31]
 800a6d6:	e007      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a6d8:	2308      	movs	r3, #8
 800a6da:	77fb      	strb	r3, [r7, #31]
 800a6dc:	e004      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a6de:	2310      	movs	r3, #16
 800a6e0:	77fb      	strb	r3, [r7, #31]
 800a6e2:	e001      	b.n	800a6e8 <UART_SetConfig+0x348>
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6f0:	d15b      	bne.n	800a7aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a6f2:	7ffb      	ldrb	r3, [r7, #31]
 800a6f4:	2b08      	cmp	r3, #8
 800a6f6:	d828      	bhi.n	800a74a <UART_SetConfig+0x3aa>
 800a6f8:	a201      	add	r2, pc, #4	; (adr r2, 800a700 <UART_SetConfig+0x360>)
 800a6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fe:	bf00      	nop
 800a700:	0800a725 	.word	0x0800a725
 800a704:	0800a72d 	.word	0x0800a72d
 800a708:	0800a735 	.word	0x0800a735
 800a70c:	0800a74b 	.word	0x0800a74b
 800a710:	0800a73b 	.word	0x0800a73b
 800a714:	0800a74b 	.word	0x0800a74b
 800a718:	0800a74b 	.word	0x0800a74b
 800a71c:	0800a74b 	.word	0x0800a74b
 800a720:	0800a743 	.word	0x0800a743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a724:	f7fc fd2e 	bl	8007184 <HAL_RCC_GetPCLK1Freq>
 800a728:	61b8      	str	r0, [r7, #24]
        break;
 800a72a:	e013      	b.n	800a754 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a72c:	f7fc fd3e 	bl	80071ac <HAL_RCC_GetPCLK2Freq>
 800a730:	61b8      	str	r0, [r7, #24]
        break;
 800a732:	e00f      	b.n	800a754 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a734:	4b4b      	ldr	r3, [pc, #300]	; (800a864 <UART_SetConfig+0x4c4>)
 800a736:	61bb      	str	r3, [r7, #24]
        break;
 800a738:	e00c      	b.n	800a754 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a73a:	f7fc fc13 	bl	8006f64 <HAL_RCC_GetSysClockFreq>
 800a73e:	61b8      	str	r0, [r7, #24]
        break;
 800a740:	e008      	b.n	800a754 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a746:	61bb      	str	r3, [r7, #24]
        break;
 800a748:	e004      	b.n	800a754 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	77bb      	strb	r3, [r7, #30]
        break;
 800a752:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d074      	beq.n	800a844 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	005a      	lsls	r2, r3, #1
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	085b      	lsrs	r3, r3, #1
 800a764:	441a      	add	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a76e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2b0f      	cmp	r3, #15
 800a774:	d916      	bls.n	800a7a4 <UART_SetConfig+0x404>
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77c:	d212      	bcs.n	800a7a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	b29b      	uxth	r3, r3
 800a782:	f023 030f 	bic.w	r3, r3, #15
 800a786:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	085b      	lsrs	r3, r3, #1
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	f003 0307 	and.w	r3, r3, #7
 800a792:	b29a      	uxth	r2, r3
 800a794:	89fb      	ldrh	r3, [r7, #14]
 800a796:	4313      	orrs	r3, r2
 800a798:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	89fa      	ldrh	r2, [r7, #14]
 800a7a0:	60da      	str	r2, [r3, #12]
 800a7a2:	e04f      	b.n	800a844 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	77bb      	strb	r3, [r7, #30]
 800a7a8:	e04c      	b.n	800a844 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7aa:	7ffb      	ldrb	r3, [r7, #31]
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d828      	bhi.n	800a802 <UART_SetConfig+0x462>
 800a7b0:	a201      	add	r2, pc, #4	; (adr r2, 800a7b8 <UART_SetConfig+0x418>)
 800a7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b6:	bf00      	nop
 800a7b8:	0800a7dd 	.word	0x0800a7dd
 800a7bc:	0800a7e5 	.word	0x0800a7e5
 800a7c0:	0800a7ed 	.word	0x0800a7ed
 800a7c4:	0800a803 	.word	0x0800a803
 800a7c8:	0800a7f3 	.word	0x0800a7f3
 800a7cc:	0800a803 	.word	0x0800a803
 800a7d0:	0800a803 	.word	0x0800a803
 800a7d4:	0800a803 	.word	0x0800a803
 800a7d8:	0800a7fb 	.word	0x0800a7fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7dc:	f7fc fcd2 	bl	8007184 <HAL_RCC_GetPCLK1Freq>
 800a7e0:	61b8      	str	r0, [r7, #24]
        break;
 800a7e2:	e013      	b.n	800a80c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7e4:	f7fc fce2 	bl	80071ac <HAL_RCC_GetPCLK2Freq>
 800a7e8:	61b8      	str	r0, [r7, #24]
        break;
 800a7ea:	e00f      	b.n	800a80c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7ec:	4b1d      	ldr	r3, [pc, #116]	; (800a864 <UART_SetConfig+0x4c4>)
 800a7ee:	61bb      	str	r3, [r7, #24]
        break;
 800a7f0:	e00c      	b.n	800a80c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7f2:	f7fc fbb7 	bl	8006f64 <HAL_RCC_GetSysClockFreq>
 800a7f6:	61b8      	str	r0, [r7, #24]
        break;
 800a7f8:	e008      	b.n	800a80c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7fe:	61bb      	str	r3, [r7, #24]
        break;
 800a800:	e004      	b.n	800a80c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	77bb      	strb	r3, [r7, #30]
        break;
 800a80a:	bf00      	nop
    }

    if (pclk != 0U)
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d018      	beq.n	800a844 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	085a      	lsrs	r2, r3, #1
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	441a      	add	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	fbb2 f3f3 	udiv	r3, r2, r3
 800a824:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2b0f      	cmp	r3, #15
 800a82a:	d909      	bls.n	800a840 <UART_SetConfig+0x4a0>
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a832:	d205      	bcs.n	800a840 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	b29a      	uxth	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	60da      	str	r2, [r3, #12]
 800a83e:	e001      	b.n	800a844 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a850:	7fbb      	ldrb	r3, [r7, #30]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3720      	adds	r7, #32
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	40007c00 	.word	0x40007c00
 800a860:	40023800 	.word	0x40023800
 800a864:	00f42400 	.word	0x00f42400

0800a868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00a      	beq.n	800a892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	f003 0302 	and.w	r3, r3, #2
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00a      	beq.n	800a8b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00a      	beq.n	800a8d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00a      	beq.n	800a91a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	f003 0320 	and.w	r3, r3, #32
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00a      	beq.n	800a93c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	430a      	orrs	r2, r1
 800a93a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01a      	beq.n	800a97e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a966:	d10a      	bne.n	800a97e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	430a      	orrs	r2, r1
 800a97c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00a      	beq.n	800a9a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	430a      	orrs	r2, r1
 800a99e:	605a      	str	r2, [r3, #4]
  }
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9bc:	f7f7 fd88 	bl	80024d0 <HAL_GetTick>
 800a9c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0308 	and.w	r3, r3, #8
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d10e      	bne.n	800a9ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f81b 	bl	800aa1a <UART_WaitOnFlagUntilTimeout>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e011      	b.n	800aa12 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b09c      	sub	sp, #112	; 0x70
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	603b      	str	r3, [r7, #0]
 800aa26:	4613      	mov	r3, r2
 800aa28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa2a:	e0a7      	b.n	800ab7c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa32:	f000 80a3 	beq.w	800ab7c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa36:	f7f7 fd4b 	bl	80024d0 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d302      	bcc.n	800aa4c <UART_WaitOnFlagUntilTimeout+0x32>
 800aa46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d13f      	bne.n	800aacc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa54:	e853 3f00 	ldrex	r3, [r3]
 800aa58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa60:	667b      	str	r3, [r7, #100]	; 0x64
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa72:	e841 2300 	strex	r3, r2, [r1]
 800aa76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1e6      	bne.n	800aa4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3308      	adds	r3, #8
 800aa84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa88:	e853 3f00 	ldrex	r3, [r3]
 800aa8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa90:	f023 0301 	bic.w	r3, r3, #1
 800aa94:	663b      	str	r3, [r7, #96]	; 0x60
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	3308      	adds	r3, #8
 800aa9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa9e:	64ba      	str	r2, [r7, #72]	; 0x48
 800aaa0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aaa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaa6:	e841 2300 	strex	r3, r2, [r1]
 800aaaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aaac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e5      	bne.n	800aa7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2220      	movs	r2, #32
 800aab6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2220      	movs	r2, #32
 800aabc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e068      	b.n	800ab9e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d050      	beq.n	800ab7c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aae8:	d148      	bne.n	800ab7c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaf2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab08:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab12:	637b      	str	r3, [r7, #52]	; 0x34
 800ab14:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab1a:	e841 2300 	strex	r3, r2, [r1]
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1e6      	bne.n	800aaf4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	613b      	str	r3, [r7, #16]
   return(result);
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f023 0301 	bic.w	r3, r3, #1
 800ab3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3308      	adds	r3, #8
 800ab44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab46:	623a      	str	r2, [r7, #32]
 800ab48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	69f9      	ldr	r1, [r7, #28]
 800ab4c:	6a3a      	ldr	r2, [r7, #32]
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e5      	bne.n	800ab26 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2220      	movs	r2, #32
 800ab5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2220      	movs	r2, #32
 800ab64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e010      	b.n	800ab9e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69da      	ldr	r2, [r3, #28]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	4013      	ands	r3, r2
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	bf0c      	ite	eq
 800ab8c:	2301      	moveq	r3, #1
 800ab8e:	2300      	movne	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	461a      	mov	r2, r3
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	f43f af48 	beq.w	800aa2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3770      	adds	r7, #112	; 0x70
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	6812      	ldr	r2, [r2, #0]
 800abc0:	f023 0101 	bic.w	r1, r3, #1
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	2b08      	cmp	r3, #8
 800abd0:	d102      	bne.n	800abd8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800abd2:	2340      	movs	r3, #64	; 0x40
 800abd4:	617b      	str	r3, [r7, #20]
 800abd6:	e001      	b.n	800abdc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800abd8:	2300      	movs	r3, #0
 800abda:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800abe8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800abee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800abf4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800abfa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800ac00:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800ac06:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800ac0c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800ac12:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800ac18:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800ac40:	4b20      	ldr	r3, [pc, #128]	; (800acc4 <FMC_NORSRAM_Init+0x11c>)
 800ac42:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac4a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac52:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800ac5a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	43db      	mvns	r3, r3
 800ac6a:	ea02 0103 	and.w	r1, r2, r3
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	4319      	orrs	r1, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac84:	d10c      	bne.n	800aca0 <FMC_NORSRAM_Init+0xf8>
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d008      	beq.n	800aca0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d006      	beq.n	800acb6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb0:	431a      	orrs	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	371c      	adds	r7, #28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr
 800acc4:	0008fb7f 	.word	0x0008fb7f

0800acc8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acde:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	011b      	lsls	r3, r3, #4
 800acec:	431a      	orrs	r2, r3
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	021b      	lsls	r3, r3, #8
 800acf4:	431a      	orrs	r2, r3
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	041b      	lsls	r3, r3, #16
 800acfc:	431a      	orrs	r2, r3
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	051b      	lsls	r3, r3, #20
 800ad06:	431a      	orrs	r2, r3
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	695b      	ldr	r3, [r3, #20]
 800ad0c:	3b02      	subs	r3, #2
 800ad0e:	061b      	lsls	r3, r3, #24
 800ad10:	431a      	orrs	r2, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	3201      	adds	r2, #1
 800ad1c:	4319      	orrs	r1, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad30:	d113      	bne.n	800ad5a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad3a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	051b      	lsls	r3, r3, #20
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	431a      	orrs	r2, r3
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	371c      	adds	r7, #28
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad7c:	d11d      	bne.n	800adba <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad86:	4b13      	ldr	r3, [pc, #76]	; (800add4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	6811      	ldr	r1, [r2, #0]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	6852      	ldr	r2, [r2, #4]
 800ad92:	0112      	lsls	r2, r2, #4
 800ad94:	4311      	orrs	r1, r2
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	6892      	ldr	r2, [r2, #8]
 800ad9a:	0212      	lsls	r2, r2, #8
 800ad9c:	4311      	orrs	r1, r2
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	6992      	ldr	r2, [r2, #24]
 800ada2:	4311      	orrs	r1, r2
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	68d2      	ldr	r2, [r2, #12]
 800ada8:	0412      	lsls	r2, r2, #16
 800adaa:	430a      	orrs	r2, r1
 800adac:	ea43 0102 	orr.w	r1, r3, r2
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800adb8:	e005      	b.n	800adc6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800adc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	cff00000 	.word	0xcff00000

0800add8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800add8:	b084      	sub	sp, #16
 800adda:	b480      	push	{r7}
 800addc:	b085      	sub	sp, #20
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	f107 001c 	add.w	r0, r7, #28
 800ade6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800adee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800adf0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800adf2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800adf6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800adfa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800adfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800adfe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ae02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	4b07      	ldr	r3, [pc, #28]	; (800ae2c <SDMMC_Init+0x54>)
 800ae10:	4013      	ands	r3, r2
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	b004      	add	sp, #16
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	ffff8100 	.word	0xffff8100

0800ae30 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2203      	movs	r2, #3
 800ae78:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0303 	and.w	r3, r3, #3
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aec2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aec8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aece:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	4b06      	ldr	r3, [pc, #24]	; (800aef4 <SDMMC_SendCommand+0x50>)
 800aedc:	4013      	ands	r3, r2
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	431a      	orrs	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3714      	adds	r7, #20
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	fffff000 	.word	0xfffff000

0800aef8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	b2db      	uxtb	r3, r3
}
 800af06:	4618      	mov	r0, r3
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3314      	adds	r3, #20
 800af20:	461a      	mov	r2, r3
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	4413      	add	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
}  
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af5e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800af64:	431a      	orrs	r2, r3
                       Data->DPSM);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800af6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af76:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	431a      	orrs	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800af82:	2300      	movs	r3, #0

}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800af9e:	2310      	movs	r3, #16
 800afa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afa2:	2340      	movs	r3, #64	; 0x40
 800afa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afb0:	f107 0308 	add.w	r3, r7, #8
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff74 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800afbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc0:	2110      	movs	r1, #16
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f9d6 	bl	800b374 <SDMMC_GetCmdResp1>
 800afc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afca:	69fb      	ldr	r3, [r7, #28]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3720      	adds	r7, #32
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800afe2:	2311      	movs	r3, #17
 800afe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afe6:	2340      	movs	r3, #64	; 0x40
 800afe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff ff52 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b000:	f241 3288 	movw	r2, #5000	; 0x1388
 800b004:	2111      	movs	r1, #17
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f9b4 	bl	800b374 <SDMMC_GetCmdResp1>
 800b00c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b00e:	69fb      	ldr	r3, [r7, #28]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3720      	adds	r7, #32
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b026:	2312      	movs	r3, #18
 800b028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b02a:	2340      	movs	r3, #64	; 0x40
 800b02c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b038:	f107 0308 	add.w	r3, r7, #8
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff ff30 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b044:	f241 3288 	movw	r2, #5000	; 0x1388
 800b048:	2112      	movs	r1, #18
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f992 	bl	800b374 <SDMMC_GetCmdResp1>
 800b050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b052:	69fb      	ldr	r3, [r7, #28]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b06a:	2318      	movs	r3, #24
 800b06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b06e:	2340      	movs	r3, #64	; 0x40
 800b070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b072:	2300      	movs	r3, #0
 800b074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b07a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b07c:	f107 0308 	add.w	r3, r7, #8
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff ff0e 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b088:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08c:	2118      	movs	r1, #24
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f970 	bl	800b374 <SDMMC_GetCmdResp1>
 800b094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b096:	69fb      	ldr	r3, [r7, #28]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3720      	adds	r7, #32
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b0ae:	2319      	movs	r3, #25
 800b0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0b2:	2340      	movs	r3, #64	; 0x40
 800b0b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c0:	f107 0308 	add.w	r3, r7, #8
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff feec 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b0cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0d0:	2119      	movs	r1, #25
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f94e 	bl	800b374 <SDMMC_GetCmdResp1>
 800b0d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0da:	69fb      	ldr	r3, [r7, #28]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b0f0:	230c      	movs	r3, #12
 800b0f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b102:	f107 0308 	add.w	r3, r7, #8
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff fecb 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b10e:	4a05      	ldr	r2, [pc, #20]	; (800b124 <SDMMC_CmdStopTransfer+0x40>)
 800b110:	210c      	movs	r1, #12
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f92e 	bl	800b374 <SDMMC_GetCmdResp1>
 800b118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b11a:	69fb      	ldr	r3, [r7, #28]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3720      	adds	r7, #32
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	05f5e100 	.word	0x05f5e100

0800b128 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	; 0x28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b138:	2307      	movs	r3, #7
 800b13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b13c:	2340      	movs	r3, #64	; 0x40
 800b13e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b140:	2300      	movs	r3, #0
 800b142:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b148:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b14a:	f107 0310 	add.w	r3, r7, #16
 800b14e:	4619      	mov	r1, r3
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff fea7 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b156:	f241 3288 	movw	r2, #5000	; 0x1388
 800b15a:	2107      	movs	r1, #7
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 f909 	bl	800b374 <SDMMC_GetCmdResp1>
 800b162:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b166:	4618      	mov	r0, r3
 800b168:	3728      	adds	r7, #40	; 0x28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b088      	sub	sp, #32
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b17e:	2300      	movs	r3, #0
 800b180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b182:	2300      	movs	r3, #0
 800b184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b18a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b18c:	f107 0308 	add.w	r3, r7, #8
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff fe86 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fb23 	bl	800b7e4 <SDMMC_GetCmdError>
 800b19e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b088      	sub	sp, #32
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b1b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b1b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b1b8:	2308      	movs	r3, #8
 800b1ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1bc:	2340      	movs	r3, #64	; 0x40
 800b1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1ca:	f107 0308 	add.w	r3, r7, #8
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff fe67 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fab6 	bl	800b748 <SDMMC_GetCmdResp7>
 800b1dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1de:	69fb      	ldr	r3, [r7, #28]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3720      	adds	r7, #32
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b088      	sub	sp, #32
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b1f6:	2337      	movs	r3, #55	; 0x37
 800b1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1fa:	2340      	movs	r3, #64	; 0x40
 800b1fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b208:	f107 0308 	add.w	r3, r7, #8
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fe48 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b214:	f241 3288 	movw	r2, #5000	; 0x1388
 800b218:	2137      	movs	r1, #55	; 0x37
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f8aa 	bl	800b374 <SDMMC_GetCmdResp1>
 800b220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b222:	69fb      	ldr	r3, [r7, #28]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3720      	adds	r7, #32
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	4b0d      	ldr	r3, [pc, #52]	; (800b270 <SDMMC_CmdAppOperCommand+0x44>)
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b23e:	2329      	movs	r3, #41	; 0x29
 800b240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b242:	2340      	movs	r3, #64	; 0x40
 800b244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b250:	f107 0308 	add.w	r3, r7, #8
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff fe24 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f9bf 	bl	800b5e0 <SDMMC_GetCmdResp3>
 800b262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b264:	69fb      	ldr	r3, [r7, #28]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3720      	adds	r7, #32
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	80100000 	.word	0x80100000

0800b274 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b280:	2302      	movs	r3, #2
 800b282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b284:	23c0      	movs	r3, #192	; 0xc0
 800b286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b288:	2300      	movs	r3, #0
 800b28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b292:	f107 0308 	add.w	r3, r7, #8
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff fe03 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f956 	bl	800b550 <SDMMC_GetCmdResp2>
 800b2a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2a6:	69fb      	ldr	r3, [r7, #28]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3720      	adds	r7, #32
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b2be:	2309      	movs	r3, #9
 800b2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b2c2:	23c0      	movs	r3, #192	; 0xc0
 800b2c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2d0:	f107 0308 	add.w	r3, r7, #8
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7ff fde4 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f937 	bl	800b550 <SDMMC_GetCmdResp2>
 800b2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b088      	sub	sp, #32
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b300:	2340      	movs	r3, #64	; 0x40
 800b302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b304:	2300      	movs	r3, #0
 800b306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b30c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff fdc5 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	2103      	movs	r1, #3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f99c 	bl	800b65c <SDMMC_GetCmdResp6>
 800b324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b326:	69fb      	ldr	r3, [r7, #28]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3720      	adds	r7, #32
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b088      	sub	sp, #32
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b33e:	230d      	movs	r3, #13
 800b340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b342:	2340      	movs	r3, #64	; 0x40
 800b344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b346:	2300      	movs	r3, #0
 800b348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b34a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b34e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b350:	f107 0308 	add.w	r3, r7, #8
 800b354:	4619      	mov	r1, r3
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff fda4 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b35c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b360:	210d      	movs	r1, #13
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f806 	bl	800b374 <SDMMC_GetCmdResp1>
 800b368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b36a:	69fb      	ldr	r3, [r7, #28]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3720      	adds	r7, #32
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	460b      	mov	r3, r1
 800b37e:	607a      	str	r2, [r7, #4]
 800b380:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b382:	4b70      	ldr	r3, [pc, #448]	; (800b544 <SDMMC_GetCmdResp1+0x1d0>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a70      	ldr	r2, [pc, #448]	; (800b548 <SDMMC_GetCmdResp1+0x1d4>)
 800b388:	fba2 2303 	umull	r2, r3, r2, r3
 800b38c:	0a5a      	lsrs	r2, r3, #9
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	fb02 f303 	mul.w	r3, r2, r3
 800b394:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	1e5a      	subs	r2, r3, #1
 800b39a:	61fa      	str	r2, [r7, #28]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3a4:	e0c9      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3aa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0ef      	beq.n	800b396 <SDMMC_GetCmdResp1+0x22>
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1ea      	bne.n	800b396 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2204      	movs	r2, #4
 800b3d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3d2:	2304      	movs	r3, #4
 800b3d4:	e0b1      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d004      	beq.n	800b3ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e0a6      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	22c5      	movs	r2, #197	; 0xc5
 800b3f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f7ff fd80 	bl	800aef8 <SDMMC_GetCommandResponse>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	7afb      	ldrb	r3, [r7, #11]
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d001      	beq.n	800b406 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b402:	2301      	movs	r3, #1
 800b404:	e099      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b406:	2100      	movs	r1, #0
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff fd82 	bl	800af12 <SDMMC_GetResponse>
 800b40e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	4b4e      	ldr	r3, [pc, #312]	; (800b54c <SDMMC_GetCmdResp1+0x1d8>)
 800b414:	4013      	ands	r3, r2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b41a:	2300      	movs	r3, #0
 800b41c:	e08d      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	da02      	bge.n	800b42a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b428:	e087      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b434:	2340      	movs	r3, #64	; 0x40
 800b436:	e080      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b442:	2380      	movs	r3, #128	; 0x80
 800b444:	e079      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b450:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b454:	e071      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b460:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b464:	e069      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b474:	e061      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b484:	e059      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b494:	e051      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d002      	beq.n	800b4a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4a4:	e049      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b4b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4b4:	e041      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b4c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4c4:	e039      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b4d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b4d4:	e031      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b4e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b4e4:	e029      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b4f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4f4:	e021      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b504:	e019      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b514:	e011      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b520:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b524:	e009      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f003 0308 	and.w	r3, r3, #8
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b530:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b534:	e001      	b.n	800b53a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3720      	adds	r7, #32
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20000000 	.word	0x20000000
 800b548:	10624dd3 	.word	0x10624dd3
 800b54c:	fdffe008 	.word	0xfdffe008

0800b550 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b558:	4b1f      	ldr	r3, [pc, #124]	; (800b5d8 <SDMMC_GetCmdResp2+0x88>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a1f      	ldr	r2, [pc, #124]	; (800b5dc <SDMMC_GetCmdResp2+0x8c>)
 800b55e:	fba2 2303 	umull	r2, r3, r2, r3
 800b562:	0a5b      	lsrs	r3, r3, #9
 800b564:	f241 3288 	movw	r2, #5000	; 0x1388
 800b568:	fb02 f303 	mul.w	r3, r2, r3
 800b56c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1e5a      	subs	r2, r3, #1
 800b572:	60fa      	str	r2, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d102      	bne.n	800b57e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b57c:	e026      	b.n	800b5cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b582:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0ef      	beq.n	800b56e <SDMMC_GetCmdResp2+0x1e>
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1ea      	bne.n	800b56e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59c:	f003 0304 	and.w	r3, r3, #4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d004      	beq.n	800b5ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2204      	movs	r2, #4
 800b5a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5aa:	2304      	movs	r3, #4
 800b5ac:	e00e      	b.n	800b5cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e003      	b.n	800b5cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	22c5      	movs	r2, #197	; 0xc5
 800b5c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	20000000 	.word	0x20000000
 800b5dc:	10624dd3 	.word	0x10624dd3

0800b5e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <SDMMC_GetCmdResp3+0x74>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a1a      	ldr	r2, [pc, #104]	; (800b658 <SDMMC_GetCmdResp3+0x78>)
 800b5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f2:	0a5b      	lsrs	r3, r3, #9
 800b5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5f8:	fb02 f303 	mul.w	r3, r2, r3
 800b5fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1e5a      	subs	r2, r3, #1
 800b602:	60fa      	str	r2, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b60c:	e01b      	b.n	800b646 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0ef      	beq.n	800b5fe <SDMMC_GetCmdResp3+0x1e>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1ea      	bne.n	800b5fe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	d004      	beq.n	800b63e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2204      	movs	r2, #4
 800b638:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b63a:	2304      	movs	r3, #4
 800b63c:	e003      	b.n	800b646 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	22c5      	movs	r2, #197	; 0xc5
 800b642:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	20000000 	.word	0x20000000
 800b658:	10624dd3 	.word	0x10624dd3

0800b65c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	460b      	mov	r3, r1
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b66a:	4b35      	ldr	r3, [pc, #212]	; (800b740 <SDMMC_GetCmdResp6+0xe4>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a35      	ldr	r2, [pc, #212]	; (800b744 <SDMMC_GetCmdResp6+0xe8>)
 800b670:	fba2 2303 	umull	r2, r3, r2, r3
 800b674:	0a5b      	lsrs	r3, r3, #9
 800b676:	f241 3288 	movw	r2, #5000	; 0x1388
 800b67a:	fb02 f303 	mul.w	r3, r2, r3
 800b67e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	1e5a      	subs	r2, r3, #1
 800b684:	61fa      	str	r2, [r7, #28]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d102      	bne.n	800b690 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b68a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b68e:	e052      	b.n	800b736 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b694:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d0ef      	beq.n	800b680 <SDMMC_GetCmdResp6+0x24>
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1ea      	bne.n	800b680 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d004      	beq.n	800b6c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2204      	movs	r2, #4
 800b6ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6bc:	2304      	movs	r3, #4
 800b6be:	e03a      	b.n	800b736 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d004      	beq.n	800b6d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e02f      	b.n	800b736 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7ff fc0e 	bl	800aef8 <SDMMC_GetCommandResponse>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	461a      	mov	r2, r3
 800b6e0:	7afb      	ldrb	r3, [r7, #11]
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d001      	beq.n	800b6ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e025      	b.n	800b736 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	22c5      	movs	r2, #197	; 0xc5
 800b6ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff fc0d 	bl	800af12 <SDMMC_GetResponse>
 800b6f8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	0c1b      	lsrs	r3, r3, #16
 800b708:	b29a      	uxth	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b70e:	2300      	movs	r3, #0
 800b710:	e011      	b.n	800b736 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b71c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b720:	e009      	b.n	800b736 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b72c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b730:	e001      	b.n	800b736 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b736:	4618      	mov	r0, r3
 800b738:	3720      	adds	r7, #32
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	20000000 	.word	0x20000000
 800b744:	10624dd3 	.word	0x10624dd3

0800b748 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b750:	4b22      	ldr	r3, [pc, #136]	; (800b7dc <SDMMC_GetCmdResp7+0x94>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a22      	ldr	r2, [pc, #136]	; (800b7e0 <SDMMC_GetCmdResp7+0x98>)
 800b756:	fba2 2303 	umull	r2, r3, r2, r3
 800b75a:	0a5b      	lsrs	r3, r3, #9
 800b75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b760:	fb02 f303 	mul.w	r3, r2, r3
 800b764:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	1e5a      	subs	r2, r3, #1
 800b76a:	60fa      	str	r2, [r7, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d102      	bne.n	800b776 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b774:	e02c      	b.n	800b7d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b77a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0ef      	beq.n	800b766 <SDMMC_GetCmdResp7+0x1e>
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1ea      	bne.n	800b766 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d004      	beq.n	800b7a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2204      	movs	r2, #4
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7a2:	2304      	movs	r3, #4
 800b7a4:	e014      	b.n	800b7d0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7aa:	f003 0301 	and.w	r3, r3, #1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d004      	beq.n	800b7bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e009      	b.n	800b7d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2240      	movs	r2, #64	; 0x40
 800b7cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7ce:	2300      	movs	r3, #0
  
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	20000000 	.word	0x20000000
 800b7e0:	10624dd3 	.word	0x10624dd3

0800b7e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7ec:	4b11      	ldr	r3, [pc, #68]	; (800b834 <SDMMC_GetCmdError+0x50>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a11      	ldr	r2, [pc, #68]	; (800b838 <SDMMC_GetCmdError+0x54>)
 800b7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f6:	0a5b      	lsrs	r3, r3, #9
 800b7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7fc:	fb02 f303 	mul.w	r3, r2, r3
 800b800:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1e5a      	subs	r2, r3, #1
 800b806:	60fa      	str	r2, [r7, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d102      	bne.n	800b812 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b80c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b810:	e009      	b.n	800b826 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f1      	beq.n	800b802 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	22c5      	movs	r2, #197	; 0xc5
 800b822:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20000000 	.word	0x20000000
 800b838:	10624dd3 	.word	0x10624dd3

0800b83c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b83c:	b084      	sub	sp, #16
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	f107 001c 	add.w	r0, r7, #28
 800b84a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b850:	2b01      	cmp	r3, #1
 800b852:	d120      	bne.n	800b896 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b858:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	68da      	ldr	r2, [r3, #12]
 800b864:	4b20      	ldr	r3, [pc, #128]	; (800b8e8 <USB_CoreInit+0xac>)
 800b866:	4013      	ands	r3, r2
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d105      	bne.n	800b88a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 fc0e 	bl	800d0ac <USB_CoreReset>
 800b890:	4603      	mov	r3, r0
 800b892:	73fb      	strb	r3, [r7, #15]
 800b894:	e010      	b.n	800b8b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 fc02 	bl	800d0ac <USB_CoreReset>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d10b      	bne.n	800b8d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f043 0206 	orr.w	r2, r3, #6
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f043 0220 	orr.w	r2, r3, #32
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8e2:	b004      	add	sp, #16
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	ffbdffbf 	.word	0xffbdffbf

0800b8ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d165      	bne.n	800b9cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	4a41      	ldr	r2, [pc, #260]	; (800ba08 <USB_SetTurnaroundTime+0x11c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d906      	bls.n	800b916 <USB_SetTurnaroundTime+0x2a>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4a40      	ldr	r2, [pc, #256]	; (800ba0c <USB_SetTurnaroundTime+0x120>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d202      	bcs.n	800b916 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b910:	230f      	movs	r3, #15
 800b912:	617b      	str	r3, [r7, #20]
 800b914:	e062      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	4a3c      	ldr	r2, [pc, #240]	; (800ba0c <USB_SetTurnaroundTime+0x120>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d306      	bcc.n	800b92c <USB_SetTurnaroundTime+0x40>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	4a3b      	ldr	r2, [pc, #236]	; (800ba10 <USB_SetTurnaroundTime+0x124>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d202      	bcs.n	800b92c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b926:	230e      	movs	r3, #14
 800b928:	617b      	str	r3, [r7, #20]
 800b92a:	e057      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	4a38      	ldr	r2, [pc, #224]	; (800ba10 <USB_SetTurnaroundTime+0x124>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d306      	bcc.n	800b942 <USB_SetTurnaroundTime+0x56>
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	4a37      	ldr	r2, [pc, #220]	; (800ba14 <USB_SetTurnaroundTime+0x128>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d202      	bcs.n	800b942 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b93c:	230d      	movs	r3, #13
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e04c      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	4a33      	ldr	r2, [pc, #204]	; (800ba14 <USB_SetTurnaroundTime+0x128>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d306      	bcc.n	800b958 <USB_SetTurnaroundTime+0x6c>
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	4a32      	ldr	r2, [pc, #200]	; (800ba18 <USB_SetTurnaroundTime+0x12c>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d802      	bhi.n	800b958 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b952:	230c      	movs	r3, #12
 800b954:	617b      	str	r3, [r7, #20]
 800b956:	e041      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	4a2f      	ldr	r2, [pc, #188]	; (800ba18 <USB_SetTurnaroundTime+0x12c>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d906      	bls.n	800b96e <USB_SetTurnaroundTime+0x82>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	4a2e      	ldr	r2, [pc, #184]	; (800ba1c <USB_SetTurnaroundTime+0x130>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d802      	bhi.n	800b96e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b968:	230b      	movs	r3, #11
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	e036      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	4a2a      	ldr	r2, [pc, #168]	; (800ba1c <USB_SetTurnaroundTime+0x130>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d906      	bls.n	800b984 <USB_SetTurnaroundTime+0x98>
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4a29      	ldr	r2, [pc, #164]	; (800ba20 <USB_SetTurnaroundTime+0x134>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d802      	bhi.n	800b984 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b97e:	230a      	movs	r3, #10
 800b980:	617b      	str	r3, [r7, #20]
 800b982:	e02b      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	4a26      	ldr	r2, [pc, #152]	; (800ba20 <USB_SetTurnaroundTime+0x134>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d906      	bls.n	800b99a <USB_SetTurnaroundTime+0xae>
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	4a25      	ldr	r2, [pc, #148]	; (800ba24 <USB_SetTurnaroundTime+0x138>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d202      	bcs.n	800b99a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b994:	2309      	movs	r3, #9
 800b996:	617b      	str	r3, [r7, #20]
 800b998:	e020      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	4a21      	ldr	r2, [pc, #132]	; (800ba24 <USB_SetTurnaroundTime+0x138>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d306      	bcc.n	800b9b0 <USB_SetTurnaroundTime+0xc4>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	4a20      	ldr	r2, [pc, #128]	; (800ba28 <USB_SetTurnaroundTime+0x13c>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d802      	bhi.n	800b9b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b9aa:	2308      	movs	r3, #8
 800b9ac:	617b      	str	r3, [r7, #20]
 800b9ae:	e015      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	4a1d      	ldr	r2, [pc, #116]	; (800ba28 <USB_SetTurnaroundTime+0x13c>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d906      	bls.n	800b9c6 <USB_SetTurnaroundTime+0xda>
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	4a1c      	ldr	r2, [pc, #112]	; (800ba2c <USB_SetTurnaroundTime+0x140>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d202      	bcs.n	800b9c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b9c0:	2307      	movs	r3, #7
 800b9c2:	617b      	str	r3, [r7, #20]
 800b9c4:	e00a      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b9c6:	2306      	movs	r3, #6
 800b9c8:	617b      	str	r3, [r7, #20]
 800b9ca:	e007      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b9cc:	79fb      	ldrb	r3, [r7, #7]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d102      	bne.n	800b9d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b9d2:	2309      	movs	r3, #9
 800b9d4:	617b      	str	r3, [r7, #20]
 800b9d6:	e001      	b.n	800b9dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b9d8:	2309      	movs	r3, #9
 800b9da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	68da      	ldr	r2, [r3, #12]
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	029b      	lsls	r3, r3, #10
 800b9f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	371c      	adds	r7, #28
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	00d8acbf 	.word	0x00d8acbf
 800ba0c:	00e4e1c0 	.word	0x00e4e1c0
 800ba10:	00f42400 	.word	0x00f42400
 800ba14:	01067380 	.word	0x01067380
 800ba18:	011a499f 	.word	0x011a499f
 800ba1c:	01312cff 	.word	0x01312cff
 800ba20:	014ca43f 	.word	0x014ca43f
 800ba24:	016e3600 	.word	0x016e3600
 800ba28:	01a6ab1f 	.word	0x01a6ab1f
 800ba2c:	01e84800 	.word	0x01e84800

0800ba30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	f043 0201 	orr.w	r2, r3, #1
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f023 0201 	bic.w	r2, r3, #1
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d115      	bne.n	800bac2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800baa2:	2001      	movs	r0, #1
 800baa4:	f7f6 fd20 	bl	80024e8 <HAL_Delay>
      ms++;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	3301      	adds	r3, #1
 800baac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f001 fa6c 	bl	800cf8c <USB_GetMode>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d01e      	beq.n	800baf8 <USB_SetCurrentMode+0x84>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2b31      	cmp	r3, #49	; 0x31
 800babe:	d9f0      	bls.n	800baa2 <USB_SetCurrentMode+0x2e>
 800bac0:	e01a      	b.n	800baf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d115      	bne.n	800baf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bad4:	2001      	movs	r0, #1
 800bad6:	f7f6 fd07 	bl	80024e8 <HAL_Delay>
      ms++;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3301      	adds	r3, #1
 800bade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 fa53 	bl	800cf8c <USB_GetMode>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <USB_SetCurrentMode+0x84>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b31      	cmp	r3, #49	; 0x31
 800baf0:	d9f0      	bls.n	800bad4 <USB_SetCurrentMode+0x60>
 800baf2:	e001      	b.n	800baf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e005      	b.n	800bb04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b32      	cmp	r3, #50	; 0x32
 800bafc:	d101      	bne.n	800bb02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e000      	b.n	800bb04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b086      	sub	sp, #24
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb26:	2300      	movs	r3, #0
 800bb28:	613b      	str	r3, [r7, #16]
 800bb2a:	e009      	b.n	800bb40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	3340      	adds	r3, #64	; 0x40
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	2200      	movs	r2, #0
 800bb38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	613b      	str	r3, [r7, #16]
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	2b0e      	cmp	r3, #14
 800bb44:	d9f2      	bls.n	800bb2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d11c      	bne.n	800bb86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb5a:	f043 0302 	orr.w	r3, r3, #2
 800bb5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	e005      	b.n	800bb92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb98:	461a      	mov	r2, r3
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba4:	4619      	mov	r1, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbac:	461a      	mov	r2, r3
 800bbae:	680b      	ldr	r3, [r1, #0]
 800bbb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d10c      	bne.n	800bbd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d104      	bne.n	800bbc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f965 	bl	800be90 <USB_SetDevSpeed>
 800bbc6:	e008      	b.n	800bbda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bbc8:	2101      	movs	r1, #1
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f960 	bl	800be90 <USB_SetDevSpeed>
 800bbd0:	e003      	b.n	800bbda <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bbd2:	2103      	movs	r1, #3
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f95b 	bl	800be90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bbda:	2110      	movs	r1, #16
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f8f3 	bl	800bdc8 <USB_FlushTxFifo>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f91f 	bl	800be30 <USB_FlushRxFifo>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc02:	461a      	mov	r2, r3
 800bc04:	2300      	movs	r3, #0
 800bc06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc0e:	461a      	mov	r2, r3
 800bc10:	2300      	movs	r3, #0
 800bc12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc20:	2300      	movs	r3, #0
 800bc22:	613b      	str	r3, [r7, #16]
 800bc24:	e043      	b.n	800bcae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc3c:	d118      	bne.n	800bc70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10a      	bne.n	800bc5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	015a      	lsls	r2, r3, #5
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc50:	461a      	mov	r2, r3
 800bc52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc56:	6013      	str	r3, [r2, #0]
 800bc58:	e013      	b.n	800bc82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	015a      	lsls	r2, r3, #5
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	4413      	add	r3, r2
 800bc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc66:	461a      	mov	r2, r3
 800bc68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc6c:	6013      	str	r3, [r2, #0]
 800bc6e:	e008      	b.n	800bc82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8e:	461a      	mov	r2, r3
 800bc90:	2300      	movs	r3, #0
 800bc92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	015a      	lsls	r2, r3, #5
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca0:	461a      	mov	r2, r3
 800bca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d3b7      	bcc.n	800bc26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	613b      	str	r3, [r7, #16]
 800bcba:	e043      	b.n	800bd44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	015a      	lsls	r2, r3, #5
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcd2:	d118      	bne.n	800bd06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d10a      	bne.n	800bcf0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	015a      	lsls	r2, r3, #5
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	4413      	add	r3, r2
 800bce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce6:	461a      	mov	r2, r3
 800bce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	e013      	b.n	800bd18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	e008      	b.n	800bd18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd12:	461a      	mov	r2, r3
 800bd14:	2300      	movs	r3, #0
 800bd16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd24:	461a      	mov	r2, r3
 800bd26:	2300      	movs	r3, #0
 800bd28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	015a      	lsls	r2, r3, #5
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	4413      	add	r3, r2
 800bd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd36:	461a      	mov	r2, r3
 800bd38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	3301      	adds	r3, #1
 800bd42:	613b      	str	r3, [r7, #16]
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d3b7      	bcc.n	800bcbc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d105      	bne.n	800bd80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	f043 0210 	orr.w	r2, r3, #16
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	699a      	ldr	r2, [r3, #24]
 800bd84:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <USB_DevInit+0x2b4>)
 800bd86:	4313      	orrs	r3, r2
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d005      	beq.n	800bd9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	f043 0208 	orr.w	r2, r3, #8
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d105      	bne.n	800bdb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	699a      	ldr	r2, [r3, #24]
 800bda8:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <USB_DevInit+0x2b8>)
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdbc:	b004      	add	sp, #16
 800bdbe:	4770      	bx	lr
 800bdc0:	803c3800 	.word	0x803c3800
 800bdc4:	40000004 	.word	0x40000004

0800bdc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	4a13      	ldr	r2, [pc, #76]	; (800be2c <USB_FlushTxFifo+0x64>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d901      	bls.n	800bde8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bde4:	2303      	movs	r3, #3
 800bde6:	e01b      	b.n	800be20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	daf2      	bge.n	800bdd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	019b      	lsls	r3, r3, #6
 800bdf8:	f043 0220 	orr.w	r2, r3, #32
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	3301      	adds	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	4a08      	ldr	r2, [pc, #32]	; (800be2c <USB_FlushTxFifo+0x64>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d901      	bls.n	800be12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be0e:	2303      	movs	r3, #3
 800be10:	e006      	b.n	800be20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	f003 0320 	and.w	r3, r3, #32
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	d0f0      	beq.n	800be00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	00030d40 	.word	0x00030d40

0800be30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be38:	2300      	movs	r3, #0
 800be3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	3301      	adds	r3, #1
 800be40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	4a11      	ldr	r2, [pc, #68]	; (800be8c <USB_FlushRxFifo+0x5c>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d901      	bls.n	800be4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be4a:	2303      	movs	r3, #3
 800be4c:	e018      	b.n	800be80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	2b00      	cmp	r3, #0
 800be54:	daf2      	bge.n	800be3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be56:	2300      	movs	r3, #0
 800be58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2210      	movs	r2, #16
 800be5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3301      	adds	r3, #1
 800be64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	4a08      	ldr	r2, [pc, #32]	; (800be8c <USB_FlushRxFifo+0x5c>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d901      	bls.n	800be72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e006      	b.n	800be80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	f003 0310 	and.w	r3, r3, #16
 800be7a:	2b10      	cmp	r3, #16
 800be7c:	d0f0      	beq.n	800be60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	00030d40 	.word	0x00030d40

0800be90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	68f9      	ldr	r1, [r7, #12]
 800beac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800beb0:	4313      	orrs	r3, r2
 800beb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3714      	adds	r7, #20
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b087      	sub	sp, #28
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	f003 0306 	and.w	r3, r3, #6
 800beda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d102      	bne.n	800bee8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bee2:	2300      	movs	r3, #0
 800bee4:	75fb      	strb	r3, [r7, #23]
 800bee6:	e00a      	b.n	800befe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2b02      	cmp	r3, #2
 800beec:	d002      	beq.n	800bef4 <USB_GetDevSpeed+0x32>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2b06      	cmp	r3, #6
 800bef2:	d102      	bne.n	800befa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bef4:	2302      	movs	r3, #2
 800bef6:	75fb      	strb	r3, [r7, #23]
 800bef8:	e001      	b.n	800befe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800befa:	230f      	movs	r3, #15
 800befc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800befe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	371c      	adds	r7, #28
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d139      	bne.n	800bf9c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf2e:	69da      	ldr	r2, [r3, #28]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f003 030f 	and.w	r3, r3, #15
 800bf38:	2101      	movs	r1, #1
 800bf3a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	68f9      	ldr	r1, [r7, #12]
 800bf42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf46:	4313      	orrs	r3, r2
 800bf48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	015a      	lsls	r2, r3, #5
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	4413      	add	r3, r2
 800bf52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d153      	bne.n	800c008 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	015a      	lsls	r2, r3, #5
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	791b      	ldrb	r3, [r3, #4]
 800bf7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	059b      	lsls	r3, r3, #22
 800bf82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf84:	431a      	orrs	r2, r3
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	0159      	lsls	r1, r3, #5
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	440b      	add	r3, r1
 800bf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf92:	4619      	mov	r1, r3
 800bf94:	4b20      	ldr	r3, [pc, #128]	; (800c018 <USB_ActivateEndpoint+0x10c>)
 800bf96:	4313      	orrs	r3, r2
 800bf98:	600b      	str	r3, [r1, #0]
 800bf9a:	e035      	b.n	800c008 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfa2:	69da      	ldr	r2, [r3, #28]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f003 030f 	and.w	r3, r3, #15
 800bfac:	2101      	movs	r1, #1
 800bfae:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb2:	041b      	lsls	r3, r3, #16
 800bfb4:	68f9      	ldr	r1, [r7, #12]
 800bfb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	015a      	lsls	r2, r3, #5
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d119      	bne.n	800c008 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	791b      	ldrb	r3, [r3, #4]
 800bfee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bff0:	430b      	orrs	r3, r1
 800bff2:	431a      	orrs	r2, r3
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	0159      	lsls	r1, r3, #5
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	440b      	add	r3, r1
 800bffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c000:	4619      	mov	r1, r3
 800c002:	4b05      	ldr	r3, [pc, #20]	; (800c018 <USB_ActivateEndpoint+0x10c>)
 800c004:	4313      	orrs	r3, r2
 800c006:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3714      	adds	r7, #20
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr
 800c016:	bf00      	nop
 800c018:	10008000 	.word	0x10008000

0800c01c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	785b      	ldrb	r3, [r3, #1]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d161      	bne.n	800c0fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	015a      	lsls	r2, r3, #5
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c04a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c04e:	d11f      	bne.n	800c090 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	015a      	lsls	r2, r3, #5
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4413      	add	r3, r2
 800c058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68ba      	ldr	r2, [r7, #8]
 800c060:	0151      	lsls	r1, r2, #5
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	440a      	add	r2, r1
 800c066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c06a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c06e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	0151      	lsls	r1, r2, #5
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	440a      	add	r2, r1
 800c086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c08a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c08e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	f003 030f 	and.w	r3, r3, #15
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	43db      	mvns	r3, r3
 800c0aa:	68f9      	ldr	r1, [r7, #12]
 800c0ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ba:	69da      	ldr	r2, [r3, #28]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	f003 030f 	and.w	r3, r3, #15
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	43db      	mvns	r3, r3
 800c0ce:	68f9      	ldr	r1, [r7, #12]
 800c0d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	015a      	lsls	r2, r3, #5
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4413      	add	r3, r2
 800c0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	0159      	lsls	r1, r3, #5
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	440b      	add	r3, r1
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4b35      	ldr	r3, [pc, #212]	; (800c1cc <USB_DeactivateEndpoint+0x1b0>)
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	600b      	str	r3, [r1, #0]
 800c0fa:	e060      	b.n	800c1be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	015a      	lsls	r2, r3, #5
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4413      	add	r3, r2
 800c104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c10e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c112:	d11f      	bne.n	800c154 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	0151      	lsls	r1, r2, #5
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	440a      	add	r2, r1
 800c12a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c12e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c132:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	015a      	lsls	r2, r3, #5
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4413      	add	r3, r2
 800c13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	0151      	lsls	r1, r2, #5
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	440a      	add	r2, r1
 800c14a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c14e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c152:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c15a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	f003 030f 	and.w	r3, r3, #15
 800c164:	2101      	movs	r1, #1
 800c166:	fa01 f303 	lsl.w	r3, r1, r3
 800c16a:	041b      	lsls	r3, r3, #16
 800c16c:	43db      	mvns	r3, r3
 800c16e:	68f9      	ldr	r1, [r7, #12]
 800c170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c174:	4013      	ands	r3, r2
 800c176:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c17e:	69da      	ldr	r2, [r3, #28]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	f003 030f 	and.w	r3, r3, #15
 800c188:	2101      	movs	r1, #1
 800c18a:	fa01 f303 	lsl.w	r3, r1, r3
 800c18e:	041b      	lsls	r3, r3, #16
 800c190:	43db      	mvns	r3, r3
 800c192:	68f9      	ldr	r1, [r7, #12]
 800c194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c198:	4013      	ands	r3, r2
 800c19a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	015a      	lsls	r2, r3, #5
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	0159      	lsls	r1, r3, #5
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	440b      	add	r3, r1
 800c1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <USB_DeactivateEndpoint+0x1b4>)
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3714      	adds	r7, #20
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	ec337800 	.word	0xec337800
 800c1d0:	eff37800 	.word	0xeff37800

0800c1d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08a      	sub	sp, #40	; 0x28
 800c1d8:	af02      	add	r7, sp, #8
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	785b      	ldrb	r3, [r3, #1]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	f040 8163 	bne.w	800c4bc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d132      	bne.n	800c264 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20a:	691a      	ldr	r2, [r3, #16]
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	0159      	lsls	r1, r3, #5
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	440b      	add	r3, r1
 800c214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c218:	4619      	mov	r1, r3
 800c21a:	4ba5      	ldr	r3, [pc, #660]	; (800c4b0 <USB_EPStartXfer+0x2dc>)
 800c21c:	4013      	ands	r3, r2
 800c21e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	0151      	lsls	r1, r2, #5
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	440a      	add	r2, r1
 800c236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c23a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c23e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	4413      	add	r3, r2
 800c248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24c:	691a      	ldr	r2, [r3, #16]
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	0159      	lsls	r1, r3, #5
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	440b      	add	r3, r1
 800c256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25a:	4619      	mov	r1, r3
 800c25c:	4b95      	ldr	r3, [pc, #596]	; (800c4b4 <USB_EPStartXfer+0x2e0>)
 800c25e:	4013      	ands	r3, r2
 800c260:	610b      	str	r3, [r1, #16]
 800c262:	e074      	b.n	800c34e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	015a      	lsls	r2, r3, #5
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	4413      	add	r3, r2
 800c26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c270:	691a      	ldr	r2, [r3, #16]
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	0159      	lsls	r1, r3, #5
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	440b      	add	r3, r1
 800c27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27e:	4619      	mov	r1, r3
 800c280:	4b8c      	ldr	r3, [pc, #560]	; (800c4b4 <USB_EPStartXfer+0x2e0>)
 800c282:	4013      	ands	r3, r2
 800c284:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	015a      	lsls	r2, r3, #5
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c292:	691a      	ldr	r2, [r3, #16]
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	0159      	lsls	r1, r3, #5
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	440b      	add	r3, r1
 800c29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4b83      	ldr	r3, [pc, #524]	; (800c4b0 <USB_EPStartXfer+0x2dc>)
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	015a      	lsls	r2, r3, #5
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	6999      	ldr	r1, [r3, #24]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	440b      	add	r3, r1
 800c2c0:	1e59      	subs	r1, r3, #1
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c2ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c2cc:	4b7a      	ldr	r3, [pc, #488]	; (800c4b8 <USB_EPStartXfer+0x2e4>)
 800c2ce:	400b      	ands	r3, r1
 800c2d0:	69b9      	ldr	r1, [r7, #24]
 800c2d2:	0148      	lsls	r0, r1, #5
 800c2d4:	69f9      	ldr	r1, [r7, #28]
 800c2d6:	4401      	add	r1, r0
 800c2d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	015a      	lsls	r2, r3, #5
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ec:	691a      	ldr	r2, [r3, #16]
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2f6:	69b9      	ldr	r1, [r7, #24]
 800c2f8:	0148      	lsls	r0, r1, #5
 800c2fa:	69f9      	ldr	r1, [r7, #28]
 800c2fc:	4401      	add	r1, r0
 800c2fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c302:	4313      	orrs	r3, r2
 800c304:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	791b      	ldrb	r3, [r3, #4]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d11f      	bne.n	800c34e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	015a      	lsls	r2, r3, #5
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	4413      	add	r3, r2
 800c316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	69ba      	ldr	r2, [r7, #24]
 800c31e:	0151      	lsls	r1, r2, #5
 800c320:	69fa      	ldr	r2, [r7, #28]
 800c322:	440a      	add	r2, r1
 800c324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c328:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c32c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	015a      	lsls	r2, r3, #5
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	4413      	add	r3, r2
 800c336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	69ba      	ldr	r2, [r7, #24]
 800c33e:	0151      	lsls	r1, r2, #5
 800c340:	69fa      	ldr	r2, [r7, #28]
 800c342:	440a      	add	r2, r1
 800c344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c34c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c34e:	79fb      	ldrb	r3, [r7, #7]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d14b      	bne.n	800c3ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d009      	beq.n	800c370 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	015a      	lsls	r2, r3, #5
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	4413      	add	r3, r2
 800c364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c368:	461a      	mov	r2, r3
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	791b      	ldrb	r3, [r3, #4]
 800c374:	2b01      	cmp	r3, #1
 800c376:	d128      	bne.n	800c3ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c384:	2b00      	cmp	r3, #0
 800c386:	d110      	bne.n	800c3aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	015a      	lsls	r2, r3, #5
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	4413      	add	r3, r2
 800c390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	69ba      	ldr	r2, [r7, #24]
 800c398:	0151      	lsls	r1, r2, #5
 800c39a:	69fa      	ldr	r2, [r7, #28]
 800c39c:	440a      	add	r2, r1
 800c39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	e00f      	b.n	800c3ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	015a      	lsls	r2, r3, #5
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	69ba      	ldr	r2, [r7, #24]
 800c3ba:	0151      	lsls	r1, r2, #5
 800c3bc:	69fa      	ldr	r2, [r7, #28]
 800c3be:	440a      	add	r2, r1
 800c3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	015a      	lsls	r2, r3, #5
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	0151      	lsls	r1, r2, #5
 800c3dc:	69fa      	ldr	r2, [r7, #28]
 800c3de:	440a      	add	r2, r1
 800c3e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	e137      	b.n	800c65c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	69ba      	ldr	r2, [r7, #24]
 800c3fc:	0151      	lsls	r1, r2, #5
 800c3fe:	69fa      	ldr	r2, [r7, #28]
 800c400:	440a      	add	r2, r1
 800c402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c40a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	791b      	ldrb	r3, [r3, #4]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d015      	beq.n	800c440 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 811f 	beq.w	800c65c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	f003 030f 	and.w	r3, r3, #15
 800c42e:	2101      	movs	r1, #1
 800c430:	fa01 f303 	lsl.w	r3, r1, r3
 800c434:	69f9      	ldr	r1, [r7, #28]
 800c436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c43a:	4313      	orrs	r3, r2
 800c43c:	634b      	str	r3, [r1, #52]	; 0x34
 800c43e:	e10d      	b.n	800c65c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d110      	bne.n	800c472 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	015a      	lsls	r2, r3, #5
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	4413      	add	r3, r2
 800c458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	0151      	lsls	r1, r2, #5
 800c462:	69fa      	ldr	r2, [r7, #28]
 800c464:	440a      	add	r2, r1
 800c466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c46a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c46e:	6013      	str	r3, [r2, #0]
 800c470:	e00f      	b.n	800c492 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	69ba      	ldr	r2, [r7, #24]
 800c482:	0151      	lsls	r1, r2, #5
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	440a      	add	r2, r1
 800c488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c48c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c490:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	6919      	ldr	r1, [r3, #16]
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	781a      	ldrb	r2, [r3, #0]
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	b298      	uxth	r0, r3
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f000 faea 	bl	800ca80 <USB_WritePacket>
 800c4ac:	e0d6      	b.n	800c65c <USB_EPStartXfer+0x488>
 800c4ae:	bf00      	nop
 800c4b0:	e007ffff 	.word	0xe007ffff
 800c4b4:	fff80000 	.word	0xfff80000
 800c4b8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c8:	691a      	ldr	r2, [r3, #16]
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	0159      	lsls	r1, r3, #5
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	440b      	add	r3, r1
 800c4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4b63      	ldr	r3, [pc, #396]	; (800c668 <USB_EPStartXfer+0x494>)
 800c4da:	4013      	ands	r3, r2
 800c4dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	015a      	lsls	r2, r3, #5
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ea:	691a      	ldr	r2, [r3, #16]
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	0159      	lsls	r1, r3, #5
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	440b      	add	r3, r1
 800c4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4b5c      	ldr	r3, [pc, #368]	; (800c66c <USB_EPStartXfer+0x498>)
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d123      	bne.n	800c550 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	015a      	lsls	r2, r3, #5
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	4413      	add	r3, r2
 800c510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c514:	691a      	ldr	r2, [r3, #16]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c51e:	69b9      	ldr	r1, [r7, #24]
 800c520:	0148      	lsls	r0, r1, #5
 800c522:	69f9      	ldr	r1, [r7, #28]
 800c524:	4401      	add	r1, r0
 800c526:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c52a:	4313      	orrs	r3, r2
 800c52c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	015a      	lsls	r2, r3, #5
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	4413      	add	r3, r2
 800c536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	69ba      	ldr	r2, [r7, #24]
 800c53e:	0151      	lsls	r1, r2, #5
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	440a      	add	r2, r1
 800c544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c54c:	6113      	str	r3, [r2, #16]
 800c54e:	e037      	b.n	800c5c0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	699a      	ldr	r2, [r3, #24]
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	4413      	add	r3, r2
 800c55a:	1e5a      	subs	r2, r3, #1
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	fbb2 f3f3 	udiv	r3, r2, r3
 800c564:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	8afa      	ldrh	r2, [r7, #22]
 800c56c:	fb03 f202 	mul.w	r2, r3, r2
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c580:	691a      	ldr	r2, [r3, #16]
 800c582:	8afb      	ldrh	r3, [r7, #22]
 800c584:	04d9      	lsls	r1, r3, #19
 800c586:	4b3a      	ldr	r3, [pc, #232]	; (800c670 <USB_EPStartXfer+0x49c>)
 800c588:	400b      	ands	r3, r1
 800c58a:	69b9      	ldr	r1, [r7, #24]
 800c58c:	0148      	lsls	r0, r1, #5
 800c58e:	69f9      	ldr	r1, [r7, #28]
 800c590:	4401      	add	r1, r0
 800c592:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c596:	4313      	orrs	r3, r2
 800c598:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a6:	691a      	ldr	r2, [r3, #16]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	69db      	ldr	r3, [r3, #28]
 800c5ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5b0:	69b9      	ldr	r1, [r7, #24]
 800c5b2:	0148      	lsls	r0, r1, #5
 800c5b4:	69f9      	ldr	r1, [r7, #28]
 800c5b6:	4401      	add	r1, r0
 800c5b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c5c0:	79fb      	ldrb	r3, [r7, #7]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d10d      	bne.n	800c5e2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d009      	beq.n	800c5e2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	6919      	ldr	r1, [r3, #16]
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5de:	460a      	mov	r2, r1
 800c5e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	791b      	ldrb	r3, [r3, #4]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d128      	bne.n	800c63c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d110      	bne.n	800c61c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	015a      	lsls	r2, r3, #5
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	4413      	add	r3, r2
 800c602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	69ba      	ldr	r2, [r7, #24]
 800c60a:	0151      	lsls	r1, r2, #5
 800c60c:	69fa      	ldr	r2, [r7, #28]
 800c60e:	440a      	add	r2, r1
 800c610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	e00f      	b.n	800c63c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	69ba      	ldr	r2, [r7, #24]
 800c62c:	0151      	lsls	r1, r2, #5
 800c62e:	69fa      	ldr	r2, [r7, #28]
 800c630:	440a      	add	r2, r1
 800c632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c63a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	015a      	lsls	r2, r3, #5
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	4413      	add	r3, r2
 800c644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	69ba      	ldr	r2, [r7, #24]
 800c64c:	0151      	lsls	r1, r2, #5
 800c64e:	69fa      	ldr	r2, [r7, #28]
 800c650:	440a      	add	r2, r1
 800c652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c656:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c65a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3720      	adds	r7, #32
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	fff80000 	.word	0xfff80000
 800c66c:	e007ffff 	.word	0xe007ffff
 800c670:	1ff80000 	.word	0x1ff80000

0800c674 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	4613      	mov	r3, r2
 800c680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	785b      	ldrb	r3, [r3, #1]
 800c690:	2b01      	cmp	r3, #1
 800c692:	f040 80ce 	bne.w	800c832 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d132      	bne.n	800c704 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	015a      	lsls	r2, r3, #5
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6aa:	691a      	ldr	r2, [r3, #16]
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	0159      	lsls	r1, r3, #5
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	440b      	add	r3, r1
 800c6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	4b9a      	ldr	r3, [pc, #616]	; (800c924 <USB_EP0StartXfer+0x2b0>)
 800c6bc:	4013      	ands	r3, r2
 800c6be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	015a      	lsls	r2, r3, #5
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	0151      	lsls	r1, r2, #5
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	440a      	add	r2, r1
 800c6d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ec:	691a      	ldr	r2, [r3, #16]
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	0159      	lsls	r1, r3, #5
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	440b      	add	r3, r1
 800c6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4b8a      	ldr	r3, [pc, #552]	; (800c928 <USB_EP0StartXfer+0x2b4>)
 800c6fe:	4013      	ands	r3, r2
 800c700:	610b      	str	r3, [r1, #16]
 800c702:	e04e      	b.n	800c7a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	015a      	lsls	r2, r3, #5
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	4413      	add	r3, r2
 800c70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c710:	691a      	ldr	r2, [r3, #16]
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	0159      	lsls	r1, r3, #5
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	440b      	add	r3, r1
 800c71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71e:	4619      	mov	r1, r3
 800c720:	4b81      	ldr	r3, [pc, #516]	; (800c928 <USB_EP0StartXfer+0x2b4>)
 800c722:	4013      	ands	r3, r2
 800c724:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	015a      	lsls	r2, r3, #5
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	4413      	add	r3, r2
 800c72e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c732:	691a      	ldr	r2, [r3, #16]
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	0159      	lsls	r1, r3, #5
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	440b      	add	r3, r1
 800c73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c740:	4619      	mov	r1, r3
 800c742:	4b78      	ldr	r3, [pc, #480]	; (800c924 <USB_EP0StartXfer+0x2b0>)
 800c744:	4013      	ands	r3, r2
 800c746:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	699a      	ldr	r2, [r3, #24]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	429a      	cmp	r2, r3
 800c752:	d903      	bls.n	800c75c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	68da      	ldr	r2, [r3, #12]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	015a      	lsls	r2, r3, #5
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	4413      	add	r3, r2
 800c764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	0151      	lsls	r1, r2, #5
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	440a      	add	r2, r1
 800c772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c77a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c788:	691a      	ldr	r2, [r3, #16]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	699b      	ldr	r3, [r3, #24]
 800c78e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c792:	6939      	ldr	r1, [r7, #16]
 800c794:	0148      	lsls	r0, r1, #5
 800c796:	6979      	ldr	r1, [r7, #20]
 800c798:	4401      	add	r1, r0
 800c79a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d11e      	bne.n	800c7e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	695b      	ldr	r3, [r3, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d009      	beq.n	800c7c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7bc:	461a      	mov	r2, r3
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	0151      	lsls	r1, r2, #5
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	440a      	add	r2, r1
 800c7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	e097      	b.n	800c916 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	015a      	lsls	r2, r3, #5
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	0151      	lsls	r1, r2, #5
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	440a      	add	r2, r1
 800c7fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c800:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c804:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	699b      	ldr	r3, [r3, #24]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8083 	beq.w	800c916 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	f003 030f 	and.w	r3, r3, #15
 800c820:	2101      	movs	r1, #1
 800c822:	fa01 f303 	lsl.w	r3, r1, r3
 800c826:	6979      	ldr	r1, [r7, #20]
 800c828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c82c:	4313      	orrs	r3, r2
 800c82e:	634b      	str	r3, [r1, #52]	; 0x34
 800c830:	e071      	b.n	800c916 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	015a      	lsls	r2, r3, #5
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	4413      	add	r3, r2
 800c83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83e:	691a      	ldr	r2, [r3, #16]
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	0159      	lsls	r1, r3, #5
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	440b      	add	r3, r1
 800c848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84c:	4619      	mov	r1, r3
 800c84e:	4b36      	ldr	r3, [pc, #216]	; (800c928 <USB_EP0StartXfer+0x2b4>)
 800c850:	4013      	ands	r3, r2
 800c852:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c860:	691a      	ldr	r2, [r3, #16]
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	0159      	lsls	r1, r3, #5
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	440b      	add	r3, r1
 800c86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c86e:	4619      	mov	r1, r3
 800c870:	4b2c      	ldr	r3, [pc, #176]	; (800c924 <USB_EP0StartXfer+0x2b0>)
 800c872:	4013      	ands	r3, r2
 800c874:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	68da      	ldr	r2, [r3, #12]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	0151      	lsls	r1, r2, #5
 800c8a0:	697a      	ldr	r2, [r7, #20]
 800c8a2:	440a      	add	r2, r1
 800c8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ba:	691a      	ldr	r2, [r3, #16]
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	69db      	ldr	r3, [r3, #28]
 800c8c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8c4:	6939      	ldr	r1, [r7, #16]
 800c8c6:	0148      	lsls	r0, r1, #5
 800c8c8:	6979      	ldr	r1, [r7, #20]
 800c8ca:	4401      	add	r1, r0
 800c8cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d10d      	bne.n	800c8f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d009      	beq.n	800c8f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	6919      	ldr	r1, [r3, #16]
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	015a      	lsls	r2, r3, #5
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f2:	460a      	mov	r2, r1
 800c8f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	015a      	lsls	r2, r3, #5
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	0151      	lsls	r1, r2, #5
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	440a      	add	r2, r1
 800c90c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c914:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	371c      	adds	r7, #28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr
 800c924:	e007ffff 	.word	0xe007ffff
 800c928:	fff80000 	.word	0xfff80000

0800c92c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b087      	sub	sp, #28
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	785b      	ldrb	r3, [r3, #1]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d14a      	bne.n	800c9e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c95e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c962:	f040 8086 	bne.w	800ca72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	015a      	lsls	r2, r3, #5
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	4413      	add	r3, r2
 800c970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	7812      	ldrb	r2, [r2, #0]
 800c97a:	0151      	lsls	r1, r2, #5
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	440a      	add	r2, r1
 800c980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c984:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c988:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	015a      	lsls	r2, r3, #5
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	4413      	add	r3, r2
 800c994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	7812      	ldrb	r2, [r2, #0]
 800c99e:	0151      	lsls	r1, r2, #5
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	440a      	add	r2, r1
 800c9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d902      	bls.n	800c9c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	75fb      	strb	r3, [r7, #23]
          break;
 800c9c2:	e056      	b.n	800ca72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	015a      	lsls	r2, r3, #5
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9dc:	d0e7      	beq.n	800c9ae <USB_EPStopXfer+0x82>
 800c9de:	e048      	b.n	800ca72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9f8:	d13b      	bne.n	800ca72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	015a      	lsls	r2, r3, #5
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	7812      	ldrb	r2, [r2, #0]
 800ca0e:	0151      	lsls	r1, r2, #5
 800ca10:	693a      	ldr	r2, [r7, #16]
 800ca12:	440a      	add	r2, r1
 800ca14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	7812      	ldrb	r2, [r2, #0]
 800ca32:	0151      	lsls	r1, r2, #5
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	440a      	add	r2, r1
 800ca38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3301      	adds	r3, #1
 800ca46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d902      	bls.n	800ca58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	75fb      	strb	r3, [r7, #23]
          break;
 800ca56:	e00c      	b.n	800ca72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	015a      	lsls	r2, r3, #5
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	4413      	add	r3, r2
 800ca62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca70:	d0e7      	beq.n	800ca42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	371c      	adds	r7, #28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b089      	sub	sp, #36	; 0x24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	460b      	mov	r3, r1
 800ca90:	71fb      	strb	r3, [r7, #7]
 800ca92:	4613      	mov	r3, r2
 800ca94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ca9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d123      	bne.n	800caee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800caa6:	88bb      	ldrh	r3, [r7, #4]
 800caa8:	3303      	adds	r3, #3
 800caaa:	089b      	lsrs	r3, r3, #2
 800caac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800caae:	2300      	movs	r3, #0
 800cab0:	61bb      	str	r3, [r7, #24]
 800cab2:	e018      	b.n	800cae6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cab4:	79fb      	ldrb	r3, [r7, #7]
 800cab6:	031a      	lsls	r2, r3, #12
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	4413      	add	r3, r2
 800cabc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cac0:	461a      	mov	r2, r3
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	3301      	adds	r3, #1
 800cacc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	3301      	adds	r3, #1
 800cad2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	3301      	adds	r3, #1
 800cad8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	3301      	adds	r3, #1
 800cade:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	3301      	adds	r3, #1
 800cae4:	61bb      	str	r3, [r7, #24]
 800cae6:	69ba      	ldr	r2, [r7, #24]
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	429a      	cmp	r2, r3
 800caec:	d3e2      	bcc.n	800cab4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3724      	adds	r7, #36	; 0x24
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b08b      	sub	sp, #44	; 0x2c
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	4613      	mov	r3, r2
 800cb08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb12:	88fb      	ldrh	r3, [r7, #6]
 800cb14:	089b      	lsrs	r3, r3, #2
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb1a:	88fb      	ldrh	r3, [r7, #6]
 800cb1c:	f003 0303 	and.w	r3, r3, #3
 800cb20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb22:	2300      	movs	r3, #0
 800cb24:	623b      	str	r3, [r7, #32]
 800cb26:	e014      	b.n	800cb52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	3301      	adds	r3, #1
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	3301      	adds	r3, #1
 800cb44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	3301      	adds	r3, #1
 800cb4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	623b      	str	r3, [r7, #32]
 800cb52:	6a3a      	ldr	r2, [r7, #32]
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d3e6      	bcc.n	800cb28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cb5a:	8bfb      	ldrh	r3, [r7, #30]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01e      	beq.n	800cb9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cb60:	2300      	movs	r3, #0
 800cb62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	f107 0310 	add.w	r3, r7, #16
 800cb70:	6812      	ldr	r2, [r2, #0]
 800cb72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cb74:	693a      	ldr	r2, [r7, #16]
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	701a      	strb	r2, [r3, #0]
      i++;
 800cb86:	6a3b      	ldr	r3, [r7, #32]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	623b      	str	r3, [r7, #32]
      pDest++;
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	3301      	adds	r3, #1
 800cb90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cb92:	8bfb      	ldrh	r3, [r7, #30]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cb98:	8bfb      	ldrh	r3, [r7, #30]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1ea      	bne.n	800cb74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	372c      	adds	r7, #44	; 0x2c
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	785b      	ldrb	r3, [r3, #1]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d12c      	bne.n	800cc22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	015a      	lsls	r2, r3, #5
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	4413      	add	r3, r2
 800cbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	db12      	blt.n	800cc00 <USB_EPSetStall+0x54>
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00f      	beq.n	800cc00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	015a      	lsls	r2, r3, #5
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	68ba      	ldr	r2, [r7, #8]
 800cbf0:	0151      	lsls	r1, r2, #5
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	440a      	add	r2, r1
 800cbf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cbfe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	0151      	lsls	r1, r2, #5
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	440a      	add	r2, r1
 800cc16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc1e:	6013      	str	r3, [r2, #0]
 800cc20:	e02b      	b.n	800cc7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	db12      	blt.n	800cc5a <USB_EPSetStall+0xae>
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00f      	beq.n	800cc5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	015a      	lsls	r2, r3, #5
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	4413      	add	r3, r2
 800cc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	0151      	lsls	r1, r2, #5
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	440a      	add	r2, r1
 800cc50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	015a      	lsls	r2, r3, #5
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	4413      	add	r3, r2
 800cc62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	0151      	lsls	r1, r2, #5
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	440a      	add	r2, r1
 800cc70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	785b      	ldrb	r3, [r3, #1]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d128      	bne.n	800ccf6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	015a      	lsls	r2, r3, #5
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4413      	add	r3, r2
 800ccac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	0151      	lsls	r1, r2, #5
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	440a      	add	r2, r1
 800ccba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ccc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	791b      	ldrb	r3, [r3, #4]
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d003      	beq.n	800ccd4 <USB_EPClearStall+0x4c>
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	791b      	ldrb	r3, [r3, #4]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d138      	bne.n	800cd46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	015a      	lsls	r2, r3, #5
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	4413      	add	r3, r2
 800ccdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	0151      	lsls	r1, r2, #5
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	440a      	add	r2, r1
 800ccea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccf2:	6013      	str	r3, [r2, #0]
 800ccf4:	e027      	b.n	800cd46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	015a      	lsls	r2, r3, #5
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	0151      	lsls	r1, r2, #5
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	440a      	add	r2, r1
 800cd0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	791b      	ldrb	r3, [r3, #4]
 800cd1a:	2b03      	cmp	r3, #3
 800cd1c:	d003      	beq.n	800cd26 <USB_EPClearStall+0x9e>
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	791b      	ldrb	r3, [r3, #4]
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d10f      	bne.n	800cd46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	015a      	lsls	r2, r3, #5
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	0151      	lsls	r1, r2, #5
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	440a      	add	r2, r1
 800cd3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cd76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	78fb      	ldrb	r3, [r7, #3]
 800cd82:	011b      	lsls	r3, r3, #4
 800cd84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cd88:	68f9      	ldr	r1, [r7, #12]
 800cd8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cdba:	f023 0303 	bic.w	r3, r3, #3
 800cdbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdce:	f023 0302 	bic.w	r3, r3, #2
 800cdd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3714      	adds	r7, #20
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cde2:	b480      	push	{r7}
 800cde4:	b085      	sub	sp, #20
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cdfc:	f023 0303 	bic.w	r3, r3, #3
 800ce00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	68fa      	ldr	r2, [r7, #12]
 800ce0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce10:	f043 0302 	orr.w	r3, r3, #2
 800ce14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce16:	2300      	movs	r3, #0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	695b      	ldr	r3, [r3, #20]
 800ce30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	4013      	ands	r3, r2
 800ce3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	460b      	mov	r3, r1
 800ce54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800ce5a:	78fb      	ldrb	r3, [r7, #3]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800ce6a:	78fb      	ldrb	r3, [r7, #3]
 800ce6c:	015a      	lsls	r2, r3, #5
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	4413      	add	r3, r2
 800ce72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ce7e:	68bb      	ldr	r3, [r7, #8]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce9e:	699b      	ldr	r3, [r3, #24]
 800cea0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea8:	69db      	ldr	r3, [r3, #28]
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	4013      	ands	r3, r2
 800ceae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	0c1b      	lsrs	r3, r3, #16
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cedc:	69db      	ldr	r3, [r3, #28]
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	4013      	ands	r3, r2
 800cee2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	b29b      	uxth	r3, r3
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3714      	adds	r7, #20
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	460b      	mov	r3, r1
 800cefe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cf04:	78fb      	ldrb	r3, [r7, #3]
 800cf06:	015a      	lsls	r2, r3, #5
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf1a:	695b      	ldr	r3, [r3, #20]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	4013      	ands	r3, r2
 800cf20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf22:	68bb      	ldr	r3, [r7, #8]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3714      	adds	r7, #20
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b087      	sub	sp, #28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf52:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf54:	78fb      	ldrb	r3, [r7, #3]
 800cf56:	f003 030f 	and.w	r3, r3, #15
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf60:	01db      	lsls	r3, r3, #7
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	693a      	ldr	r2, [r7, #16]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf6a:	78fb      	ldrb	r3, [r7, #3]
 800cf6c:	015a      	lsls	r2, r3, #5
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	4413      	add	r3, r2
 800cf72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf7e:	68bb      	ldr	r3, [r7, #8]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	371c      	adds	r7, #28
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	695b      	ldr	r3, [r3, #20]
 800cf98:	f003 0301 	and.w	r3, r3, #1
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	4b09      	ldr	r3, [pc, #36]	; (800cfec <USB_ActivateSetup+0x44>)
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	fffff800 	.word	0xfffff800

0800cff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b087      	sub	sp, #28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	460b      	mov	r3, r1
 800cffa:	607a      	str	r2, [r7, #4]
 800cffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	333c      	adds	r3, #60	; 0x3c
 800d006:	3304      	adds	r3, #4
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	4a26      	ldr	r2, [pc, #152]	; (800d0a8 <USB_EP0_OutStart+0xb8>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d90a      	bls.n	800d02a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d024:	d101      	bne.n	800d02a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	e037      	b.n	800d09a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d030:	461a      	mov	r2, r3
 800d032:	2300      	movs	r3, #0
 800d034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d058:	f043 0318 	orr.w	r3, r3, #24
 800d05c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d06c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d072:	7afb      	ldrb	r3, [r7, #11]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d10f      	bne.n	800d098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d07e:	461a      	mov	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	697a      	ldr	r2, [r7, #20]
 800d08e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d092:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	371c      	adds	r7, #28
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	4f54300a 	.word	0x4f54300a

0800d0ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	4a13      	ldr	r2, [pc, #76]	; (800d110 <USB_CoreReset+0x64>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d901      	bls.n	800d0ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e01b      	b.n	800d102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	daf2      	bge.n	800d0b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	f043 0201 	orr.w	r2, r3, #1
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	4a09      	ldr	r2, [pc, #36]	; (800d110 <USB_CoreReset+0x64>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d901      	bls.n	800d0f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	e006      	b.n	800d102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	691b      	ldr	r3, [r3, #16]
 800d0f8:	f003 0301 	and.w	r3, r3, #1
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d0f0      	beq.n	800d0e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3714      	adds	r7, #20
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	00030d40 	.word	0x00030d40

0800d114 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d114:	b084      	sub	sp, #16
 800d116:	b580      	push	{r7, lr}
 800d118:	b086      	sub	sp, #24
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d126:	2300      	movs	r3, #0
 800d128:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d134:	461a      	mov	r2, r3
 800d136:	2300      	movs	r3, #0
 800d138:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d018      	beq.n	800d184 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	2b01      	cmp	r3, #1
 800d156:	d10a      	bne.n	800d16e <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d166:	f043 0304 	orr.w	r3, r3, #4
 800d16a:	6013      	str	r3, [r2, #0]
 800d16c:	e014      	b.n	800d198 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d17c:	f023 0304 	bic.w	r3, r3, #4
 800d180:	6013      	str	r3, [r2, #0]
 800d182:	e009      	b.n	800d198 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d192:	f023 0304 	bic.w	r3, r3, #4
 800d196:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d198:	2110      	movs	r1, #16
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f7fe fe14 	bl	800bdc8 <USB_FlushTxFifo>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7fe fe40 	bl	800be30 <USB_FlushRxFifo>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	613b      	str	r3, [r7, #16]
 800d1be:	e015      	b.n	800d1ec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	015a      	lsls	r2, r3, #5
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	613b      	str	r3, [r7, #16]
 800d1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d3e5      	bcc.n	800d1c0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d200:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00b      	beq.n	800d226 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d214:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a13      	ldr	r2, [pc, #76]	; (800d268 <USB_HostInit+0x154>)
 800d21a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a13      	ldr	r2, [pc, #76]	; (800d26c <USB_HostInit+0x158>)
 800d220:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d224:	e009      	b.n	800d23a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2280      	movs	r2, #128	; 0x80
 800d22a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a10      	ldr	r2, [pc, #64]	; (800d270 <USB_HostInit+0x15c>)
 800d230:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a0f      	ldr	r2, [pc, #60]	; (800d274 <USB_HostInit+0x160>)
 800d236:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d105      	bne.n	800d24c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	699b      	ldr	r3, [r3, #24]
 800d244:	f043 0210 	orr.w	r2, r3, #16
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	699a      	ldr	r2, [r3, #24]
 800d250:	4b09      	ldr	r3, [pc, #36]	; (800d278 <USB_HostInit+0x164>)
 800d252:	4313      	orrs	r3, r2
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d258:	7dfb      	ldrb	r3, [r7, #23]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3718      	adds	r7, #24
 800d25e:	46bd      	mov	sp, r7
 800d260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d264:	b004      	add	sp, #16
 800d266:	4770      	bx	lr
 800d268:	01000200 	.word	0x01000200
 800d26c:	00e00300 	.word	0x00e00300
 800d270:	00600080 	.word	0x00600080
 800d274:	004000e0 	.word	0x004000e0
 800d278:	a3200008 	.word	0xa3200008

0800d27c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	460b      	mov	r3, r1
 800d286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d29a:	f023 0303 	bic.w	r3, r3, #3
 800d29e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	78fb      	ldrb	r3, [r7, #3]
 800d2aa:	f003 0303 	and.w	r3, r3, #3
 800d2ae:	68f9      	ldr	r1, [r7, #12]
 800d2b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d2b8:	78fb      	ldrb	r3, [r7, #3]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d107      	bne.n	800d2ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d2ca:	6053      	str	r3, [r2, #4]
 800d2cc:	e009      	b.n	800d2e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d2ce:	78fb      	ldrb	r3, [r7, #3]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d106      	bne.n	800d2e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f241 7370 	movw	r3, #6000	; 0x1770
 800d2e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3714      	adds	r7, #20
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d310:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d31a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d31e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d320:	2064      	movs	r0, #100	; 0x64
 800d322:	f7f5 f8e1 	bl	80024e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d32e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d332:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d334:	200a      	movs	r0, #10
 800d336:	f7f5 f8d7 	bl	80024e8 <HAL_Delay>

  return HAL_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d354:	2300      	movs	r3, #0
 800d356:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d368:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d370:	2b00      	cmp	r3, #0
 800d372:	d109      	bne.n	800d388 <USB_DriveVbus+0x44>
 800d374:	78fb      	ldrb	r3, [r7, #3]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d106      	bne.n	800d388 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d386:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d392:	d109      	bne.n	800d3a8 <USB_DriveVbus+0x64>
 800d394:	78fb      	ldrb	r3, [r7, #3]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d3a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d3b6:	b480      	push	{r7}
 800d3b8:	b085      	sub	sp, #20
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	0c5b      	lsrs	r3, r3, #17
 800d3d4:	f003 0303 	and.w	r3, r3, #3
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	b29b      	uxth	r3, r3
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3714      	adds	r7, #20
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
	...

0800d408 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	4608      	mov	r0, r1
 800d412:	4611      	mov	r1, r2
 800d414:	461a      	mov	r2, r3
 800d416:	4603      	mov	r3, r0
 800d418:	70fb      	strb	r3, [r7, #3]
 800d41a:	460b      	mov	r3, r1
 800d41c:	70bb      	strb	r3, [r7, #2]
 800d41e:	4613      	mov	r3, r2
 800d420:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d42a:	78fb      	ldrb	r3, [r7, #3]
 800d42c:	015a      	lsls	r2, r3, #5
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	4413      	add	r3, r2
 800d432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d436:	461a      	mov	r2, r3
 800d438:	f04f 33ff 	mov.w	r3, #4294967295
 800d43c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d43e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d442:	2b03      	cmp	r3, #3
 800d444:	d87e      	bhi.n	800d544 <USB_HC_Init+0x13c>
 800d446:	a201      	add	r2, pc, #4	; (adr r2, 800d44c <USB_HC_Init+0x44>)
 800d448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44c:	0800d45d 	.word	0x0800d45d
 800d450:	0800d507 	.word	0x0800d507
 800d454:	0800d45d 	.word	0x0800d45d
 800d458:	0800d4c9 	.word	0x0800d4c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d45c:	78fb      	ldrb	r3, [r7, #3]
 800d45e:	015a      	lsls	r2, r3, #5
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	4413      	add	r3, r2
 800d464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d468:	461a      	mov	r2, r3
 800d46a:	f240 439d 	movw	r3, #1181	; 0x49d
 800d46e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d474:	2b00      	cmp	r3, #0
 800d476:	da10      	bge.n	800d49a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d478:	78fb      	ldrb	r3, [r7, #3]
 800d47a:	015a      	lsls	r2, r3, #5
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	4413      	add	r3, r2
 800d480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	78fa      	ldrb	r2, [r7, #3]
 800d488:	0151      	lsls	r1, r2, #5
 800d48a:	693a      	ldr	r2, [r7, #16]
 800d48c:	440a      	add	r2, r1
 800d48e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d496:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d498:	e057      	b.n	800d54a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d051      	beq.n	800d54a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d4a6:	78fb      	ldrb	r3, [r7, #3]
 800d4a8:	015a      	lsls	r2, r3, #5
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	78fa      	ldrb	r2, [r7, #3]
 800d4b6:	0151      	lsls	r1, r2, #5
 800d4b8:	693a      	ldr	r2, [r7, #16]
 800d4ba:	440a      	add	r2, r1
 800d4bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d4c4:	60d3      	str	r3, [r2, #12]
      break;
 800d4c6:	e040      	b.n	800d54a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d4c8:	78fb      	ldrb	r3, [r7, #3]
 800d4ca:	015a      	lsls	r2, r3, #5
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	f240 639d 	movw	r3, #1693	; 0x69d
 800d4da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d4dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	da34      	bge.n	800d54e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d4e4:	78fb      	ldrb	r3, [r7, #3]
 800d4e6:	015a      	lsls	r2, r3, #5
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	78fa      	ldrb	r2, [r7, #3]
 800d4f4:	0151      	lsls	r1, r2, #5
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	440a      	add	r2, r1
 800d4fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d502:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d504:	e023      	b.n	800d54e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d506:	78fb      	ldrb	r3, [r7, #3]
 800d508:	015a      	lsls	r2, r3, #5
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	4413      	add	r3, r2
 800d50e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d512:	461a      	mov	r2, r3
 800d514:	f240 2325 	movw	r3, #549	; 0x225
 800d518:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d51a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	da17      	bge.n	800d552 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d522:	78fb      	ldrb	r3, [r7, #3]
 800d524:	015a      	lsls	r2, r3, #5
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	4413      	add	r3, r2
 800d52a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	78fa      	ldrb	r2, [r7, #3]
 800d532:	0151      	lsls	r1, r2, #5
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	440a      	add	r2, r1
 800d538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d53c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d540:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d542:	e006      	b.n	800d552 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	77fb      	strb	r3, [r7, #31]
      break;
 800d548:	e004      	b.n	800d554 <USB_HC_Init+0x14c>
      break;
 800d54a:	bf00      	nop
 800d54c:	e002      	b.n	800d554 <USB_HC_Init+0x14c>
      break;
 800d54e:	bf00      	nop
 800d550:	e000      	b.n	800d554 <USB_HC_Init+0x14c>
      break;
 800d552:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d554:	78fb      	ldrb	r3, [r7, #3]
 800d556:	015a      	lsls	r2, r3, #5
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	4413      	add	r3, r2
 800d55c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	78fa      	ldrb	r2, [r7, #3]
 800d564:	0151      	lsls	r1, r2, #5
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	440a      	add	r2, r1
 800d56a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d56e:	f043 0302 	orr.w	r3, r3, #2
 800d572:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d57a:	699a      	ldr	r2, [r3, #24]
 800d57c:	78fb      	ldrb	r3, [r7, #3]
 800d57e:	f003 030f 	and.w	r3, r3, #15
 800d582:	2101      	movs	r1, #1
 800d584:	fa01 f303 	lsl.w	r3, r1, r3
 800d588:	6939      	ldr	r1, [r7, #16]
 800d58a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d58e:	4313      	orrs	r3, r2
 800d590:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d59e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	da03      	bge.n	800d5ae <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d5a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5aa:	61bb      	str	r3, [r7, #24]
 800d5ac:	e001      	b.n	800d5b2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7ff feff 	bl	800d3b6 <USB_GetHostSpeed>
 800d5b8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d5ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d106      	bne.n	800d5d0 <USB_HC_Init+0x1c8>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d003      	beq.n	800d5d0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d5c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d5cc:	617b      	str	r3, [r7, #20]
 800d5ce:	e001      	b.n	800d5d4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5d4:	787b      	ldrb	r3, [r7, #1]
 800d5d6:	059b      	lsls	r3, r3, #22
 800d5d8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d5dc:	78bb      	ldrb	r3, [r7, #2]
 800d5de:	02db      	lsls	r3, r3, #11
 800d5e0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5e4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d5e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d5ea:	049b      	lsls	r3, r3, #18
 800d5ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d5f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d5f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d5f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d5f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5fe:	78fb      	ldrb	r3, [r7, #3]
 800d600:	0159      	lsls	r1, r3, #5
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	440b      	add	r3, r1
 800d606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d60a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d610:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d612:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d616:	2b03      	cmp	r3, #3
 800d618:	d003      	beq.n	800d622 <USB_HC_Init+0x21a>
 800d61a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d10f      	bne.n	800d642 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d622:	78fb      	ldrb	r3, [r7, #3]
 800d624:	015a      	lsls	r2, r3, #5
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	4413      	add	r3, r2
 800d62a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	78fa      	ldrb	r2, [r7, #3]
 800d632:	0151      	lsls	r1, r2, #5
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	440a      	add	r2, r1
 800d638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d63c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d640:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d642:	7ffb      	ldrb	r3, [r7, #31]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3720      	adds	r7, #32
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b08c      	sub	sp, #48	; 0x30
 800d650:	af02      	add	r7, sp, #8
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	4613      	mov	r3, r2
 800d658:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	785b      	ldrb	r3, [r3, #1]
 800d662:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d664:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d668:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d66e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d672:	2b00      	cmp	r3, #0
 800d674:	d02d      	beq.n	800d6d2 <USB_HC_StartXfer+0x86>
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	791b      	ldrb	r3, [r3, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d129      	bne.n	800d6d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d67e:	79fb      	ldrb	r3, [r7, #7]
 800d680:	2b01      	cmp	r3, #1
 800d682:	d117      	bne.n	800d6b4 <USB_HC_StartXfer+0x68>
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	79db      	ldrb	r3, [r3, #7]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <USB_HC_StartXfer+0x48>
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	79db      	ldrb	r3, [r3, #7]
 800d690:	2b02      	cmp	r3, #2
 800d692:	d10f      	bne.n	800d6b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	015a      	lsls	r2, r3, #5
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	4413      	add	r3, r2
 800d69c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	69fa      	ldr	r2, [r7, #28]
 800d6a4:	0151      	lsls	r1, r2, #5
 800d6a6:	6a3a      	ldr	r2, [r7, #32]
 800d6a8:	440a      	add	r2, r1
 800d6aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10b      	bne.n	800d6d2 <USB_HC_StartXfer+0x86>
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	795b      	ldrb	r3, [r3, #5]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d107      	bne.n	800d6d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	785b      	ldrb	r3, [r3, #1]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 fa0f 	bl	800daec <USB_DoPing>
      return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e0f8      	b.n	800d8c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	695b      	ldr	r3, [r3, #20]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d018      	beq.n	800d70c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	695b      	ldr	r3, [r3, #20]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	8912      	ldrh	r2, [r2, #8]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	8912      	ldrh	r2, [r2, #8]
 800d6ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d6f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6f2:	8b7b      	ldrh	r3, [r7, #26]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d90b      	bls.n	800d710 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d6f8:	8b7b      	ldrh	r3, [r7, #26]
 800d6fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d6fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	8912      	ldrh	r2, [r2, #8]
 800d702:	fb03 f202 	mul.w	r2, r3, r2
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	611a      	str	r2, [r3, #16]
 800d70a:	e001      	b.n	800d710 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d70c:	2301      	movs	r3, #1
 800d70e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	78db      	ldrb	r3, [r3, #3]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d007      	beq.n	800d728 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	8912      	ldrh	r2, [r2, #8]
 800d71e:	fb03 f202 	mul.w	r2, r3, r2
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	611a      	str	r2, [r3, #16]
 800d726:	e003      	b.n	800d730 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	695a      	ldr	r2, [r3, #20]
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	691b      	ldr	r3, [r3, #16]
 800d734:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d73a:	04d9      	lsls	r1, r3, #19
 800d73c:	4b63      	ldr	r3, [pc, #396]	; (800d8cc <USB_HC_StartXfer+0x280>)
 800d73e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d740:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	7a9b      	ldrb	r3, [r3, #10]
 800d746:	075b      	lsls	r3, r3, #29
 800d748:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d74c:	69f9      	ldr	r1, [r7, #28]
 800d74e:	0148      	lsls	r0, r1, #5
 800d750:	6a39      	ldr	r1, [r7, #32]
 800d752:	4401      	add	r1, r0
 800d754:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d758:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d75a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d75c:	79fb      	ldrb	r3, [r7, #7]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d009      	beq.n	800d776 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	68d9      	ldr	r1, [r3, #12]
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	015a      	lsls	r2, r3, #5
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	4413      	add	r3, r2
 800d76e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d772:	460a      	mov	r2, r1
 800d774:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	f003 0301 	and.w	r3, r3, #1
 800d782:	2b00      	cmp	r3, #0
 800d784:	bf0c      	ite	eq
 800d786:	2301      	moveq	r3, #1
 800d788:	2300      	movne	r3, #0
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	015a      	lsls	r2, r3, #5
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	4413      	add	r3, r2
 800d796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	69fa      	ldr	r2, [r7, #28]
 800d79e:	0151      	lsls	r1, r2, #5
 800d7a0:	6a3a      	ldr	r2, [r7, #32]
 800d7a2:	440a      	add	r2, r1
 800d7a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d7ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	015a      	lsls	r2, r3, #5
 800d7b2:	6a3b      	ldr	r3, [r7, #32]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	7e7b      	ldrb	r3, [r7, #25]
 800d7be:	075b      	lsls	r3, r3, #29
 800d7c0:	69f9      	ldr	r1, [r7, #28]
 800d7c2:	0148      	lsls	r0, r1, #5
 800d7c4:	6a39      	ldr	r1, [r7, #32]
 800d7c6:	4401      	add	r1, r0
 800d7c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	015a      	lsls	r2, r3, #5
 800d7d4:	6a3b      	ldr	r3, [r7, #32]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	78db      	ldrb	r3, [r3, #3]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d004      	beq.n	800d7fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7f6:	613b      	str	r3, [r7, #16]
 800d7f8:	e003      	b.n	800d802 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d800:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d808:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	015a      	lsls	r2, r3, #5
 800d80e:	6a3b      	ldr	r3, [r7, #32]
 800d810:	4413      	add	r3, r2
 800d812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d816:	461a      	mov	r2, r3
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d81c:	79fb      	ldrb	r3, [r7, #7]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	e04e      	b.n	800d8c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	78db      	ldrb	r3, [r3, #3]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d149      	bne.n	800d8c2 <USB_HC_StartXfer+0x276>
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d045      	beq.n	800d8c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	79db      	ldrb	r3, [r3, #7]
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	d830      	bhi.n	800d8a0 <USB_HC_StartXfer+0x254>
 800d83e:	a201      	add	r2, pc, #4	; (adr r2, 800d844 <USB_HC_StartXfer+0x1f8>)
 800d840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d844:	0800d855 	.word	0x0800d855
 800d848:	0800d879 	.word	0x0800d879
 800d84c:	0800d855 	.word	0x0800d855
 800d850:	0800d879 	.word	0x0800d879
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	3303      	adds	r3, #3
 800d85a:	089b      	lsrs	r3, r3, #2
 800d85c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d85e:	8afa      	ldrh	r2, [r7, #22]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d864:	b29b      	uxth	r3, r3
 800d866:	429a      	cmp	r2, r3
 800d868:	d91c      	bls.n	800d8a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	f043 0220 	orr.w	r2, r3, #32
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	619a      	str	r2, [r3, #24]
        }
        break;
 800d876:	e015      	b.n	800d8a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	695b      	ldr	r3, [r3, #20]
 800d87c:	3303      	adds	r3, #3
 800d87e:	089b      	lsrs	r3, r3, #2
 800d880:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d882:	8afa      	ldrh	r2, [r7, #22]
 800d884:	6a3b      	ldr	r3, [r7, #32]
 800d886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	429a      	cmp	r2, r3
 800d890:	d90a      	bls.n	800d8a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d89e:	e003      	b.n	800d8a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d8a0:	bf00      	nop
 800d8a2:	e002      	b.n	800d8aa <USB_HC_StartXfer+0x25e>
        break;
 800d8a4:	bf00      	nop
 800d8a6:	e000      	b.n	800d8aa <USB_HC_StartXfer+0x25e>
        break;
 800d8a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	68d9      	ldr	r1, [r3, #12]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	785a      	ldrb	r2, [r3, #1]
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	695b      	ldr	r3, [r3, #20]
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	9000      	str	r0, [sp, #0]
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff f8df 	bl	800ca80 <USB_WritePacket>
  }

  return HAL_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3728      	adds	r7, #40	; 0x28
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	1ff80000 	.word	0x1ff80000

0800d8d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	b29b      	uxth	r3, r3
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b089      	sub	sp, #36	; 0x24
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d902:	78fb      	ldrb	r3, [r7, #3]
 800d904:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d906:	2300      	movs	r3, #0
 800d908:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	015a      	lsls	r2, r3, #5
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	4413      	add	r3, r2
 800d912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	0c9b      	lsrs	r3, r3, #18
 800d91a:	f003 0303 	and.w	r3, r3, #3
 800d91e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	015a      	lsls	r2, r3, #5
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	4413      	add	r3, r2
 800d928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	0fdb      	lsrs	r3, r3, #31
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	f003 0320 	and.w	r3, r3, #32
 800d93e:	2b20      	cmp	r3, #32
 800d940:	d104      	bne.n	800d94c <USB_HC_Halt+0x5a>
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d948:	2300      	movs	r3, #0
 800d94a:	e0c8      	b.n	800dade <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d002      	beq.n	800d958 <USB_HC_Halt+0x66>
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	2b02      	cmp	r3, #2
 800d956:	d163      	bne.n	800da20 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	015a      	lsls	r2, r3, #5
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	4413      	add	r3, r2
 800d960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	69ba      	ldr	r2, [r7, #24]
 800d968:	0151      	lsls	r1, r2, #5
 800d96a:	69fa      	ldr	r2, [r7, #28]
 800d96c:	440a      	add	r2, r1
 800d96e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d976:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 80ab 	bne.w	800dadc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d98a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d133      	bne.n	800d9fa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	69ba      	ldr	r2, [r7, #24]
 800d9a2:	0151      	lsls	r1, r2, #5
 800d9a4:	69fa      	ldr	r2, [r7, #28]
 800d9a6:	440a      	add	r2, r1
 800d9a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	69ba      	ldr	r2, [r7, #24]
 800d9c2:	0151      	lsls	r1, r2, #5
 800d9c4:	69fa      	ldr	r2, [r7, #28]
 800d9c6:	440a      	add	r2, r1
 800d9c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9d0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9de:	d81d      	bhi.n	800da1c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	015a      	lsls	r2, r3, #5
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9f6:	d0ec      	beq.n	800d9d2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d9f8:	e070      	b.n	800dadc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	4413      	add	r3, r2
 800da02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	69ba      	ldr	r2, [r7, #24]
 800da0a:	0151      	lsls	r1, r2, #5
 800da0c:	69fa      	ldr	r2, [r7, #28]
 800da0e:	440a      	add	r2, r1
 800da10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da18:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800da1a:	e05f      	b.n	800dadc <USB_HC_Halt+0x1ea>
            break;
 800da1c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800da1e:	e05d      	b.n	800dadc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	015a      	lsls	r2, r3, #5
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	4413      	add	r3, r2
 800da28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	69ba      	ldr	r2, [r7, #24]
 800da30:	0151      	lsls	r1, r2, #5
 800da32:	69fa      	ldr	r2, [r7, #28]
 800da34:	440a      	add	r2, r1
 800da36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da3e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d133      	bne.n	800dab8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	015a      	lsls	r2, r3, #5
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	4413      	add	r3, r2
 800da58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	69ba      	ldr	r2, [r7, #24]
 800da60:	0151      	lsls	r1, r2, #5
 800da62:	69fa      	ldr	r2, [r7, #28]
 800da64:	440a      	add	r2, r1
 800da66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	015a      	lsls	r2, r3, #5
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	4413      	add	r3, r2
 800da78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	69ba      	ldr	r2, [r7, #24]
 800da80:	0151      	lsls	r1, r2, #5
 800da82:	69fa      	ldr	r2, [r7, #28]
 800da84:	440a      	add	r2, r1
 800da86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da8e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	3301      	adds	r3, #1
 800da94:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da9c:	d81d      	bhi.n	800dada <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	015a      	lsls	r2, r3, #5
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	4413      	add	r3, r2
 800daa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dab4:	d0ec      	beq.n	800da90 <USB_HC_Halt+0x19e>
 800dab6:	e011      	b.n	800dadc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	015a      	lsls	r2, r3, #5
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	4413      	add	r3, r2
 800dac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	69ba      	ldr	r2, [r7, #24]
 800dac8:	0151      	lsls	r1, r2, #5
 800daca:	69fa      	ldr	r2, [r7, #28]
 800dacc:	440a      	add	r2, r1
 800dace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dad6:	6013      	str	r3, [r2, #0]
 800dad8:	e000      	b.n	800dadc <USB_HC_Halt+0x1ea>
          break;
 800dada:	bf00      	nop
    }
  }

  return HAL_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3724      	adds	r7, #36	; 0x24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
	...

0800daec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800daec:	b480      	push	{r7}
 800daee:	b087      	sub	sp, #28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800dafc:	78fb      	ldrb	r3, [r7, #3]
 800dafe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800db00:	2301      	movs	r3, #1
 800db02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	04da      	lsls	r2, r3, #19
 800db08:	4b15      	ldr	r3, [pc, #84]	; (800db60 <USB_DoPing+0x74>)
 800db0a:	4013      	ands	r3, r2
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	0151      	lsls	r1, r2, #5
 800db10:	697a      	ldr	r2, [r7, #20]
 800db12:	440a      	add	r2, r1
 800db14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	015a      	lsls	r2, r3, #5
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	4413      	add	r3, r2
 800db26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	015a      	lsls	r2, r3, #5
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	4413      	add	r3, r2
 800db46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db4a:	461a      	mov	r2, r3
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	371c      	adds	r7, #28
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	1ff80000 	.word	0x1ff80000

0800db64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800db6c:	2300      	movs	r3, #0
 800db6e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800db74:	2300      	movs	r3, #0
 800db76:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7fd ff6a 	bl	800ba52 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800db7e:	2110      	movs	r1, #16
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f7fe f921 	bl	800bdc8 <USB_FlushTxFifo>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800db8c:	2301      	movs	r3, #1
 800db8e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7fe f94d 	bl	800be30 <USB_FlushRxFifo>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800dba0:	2300      	movs	r3, #0
 800dba2:	61bb      	str	r3, [r7, #24]
 800dba4:	e01f      	b.n	800dbe6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800dba6:	69bb      	ldr	r3, [r7, #24]
 800dba8:	015a      	lsls	r2, r3, #5
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	4413      	add	r3, r2
 800dbae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dbcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	015a      	lsls	r2, r3, #5
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbda:	461a      	mov	r2, r3
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	61bb      	str	r3, [r7, #24]
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	2b0f      	cmp	r3, #15
 800dbea:	d9dc      	bls.n	800dba6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800dbec:	2300      	movs	r3, #0
 800dbee:	61bb      	str	r3, [r7, #24]
 800dbf0:	e034      	b.n	800dc5c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	015a      	lsls	r2, r3, #5
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	015a      	lsls	r2, r3, #5
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	4413      	add	r3, r2
 800dc22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc26:	461a      	mov	r2, r3
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc38:	d80c      	bhi.n	800dc54 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	015a      	lsls	r2, r3, #5
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	4413      	add	r3, r2
 800dc42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc50:	d0ec      	beq.n	800dc2c <USB_StopHost+0xc8>
 800dc52:	e000      	b.n	800dc56 <USB_StopHost+0xf2>
        break;
 800dc54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	61bb      	str	r3, [r7, #24]
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	2b0f      	cmp	r3, #15
 800dc60:	d9c7      	bls.n	800dbf2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc68:	461a      	mov	r2, r3
 800dc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f04f 32ff 	mov.w	r2, #4294967295
 800dc76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7fd fed9 	bl	800ba30 <USB_EnableGlobalInt>

  return ret;
 800dc7e:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3720      	adds	r7, #32
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dc8c:	4904      	ldr	r1, [pc, #16]	; (800dca0 <MX_FATFS_Init+0x18>)
 800dc8e:	4805      	ldr	r0, [pc, #20]	; (800dca4 <MX_FATFS_Init+0x1c>)
 800dc90:	f004 f96a 	bl	8011f68 <FATFS_LinkDriver>
 800dc94:	4603      	mov	r3, r0
 800dc96:	461a      	mov	r2, r3
 800dc98:	4b03      	ldr	r3, [pc, #12]	; (800dca8 <MX_FATFS_Init+0x20>)
 800dc9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dc9c:	bf00      	nop
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	200027d4 	.word	0x200027d4
 800dca4:	08015b94 	.word	0x08015b94
 800dca8:	200027d0 	.word	0x200027d0

0800dcac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dcb6:	f000 f86b 	bl	800dd90 <BSP_SD_IsDetected>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d001      	beq.n	800dcc4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	e005      	b.n	800dcd0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dcc4:	4804      	ldr	r0, [pc, #16]	; (800dcd8 <BSP_SD_Init+0x2c>)
 800dcc6:	f7f9 fe3d 	bl	8007944 <HAL_SD_Init>
 800dcca:	4603      	mov	r3, r0
 800dccc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800dcce:	79fb      	ldrb	r3, [r7, #7]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	200003c0 	.word	0x200003c0

0800dcdc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b088      	sub	sp, #32
 800dce0:	af02      	add	r7, sp, #8
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
 800dce8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	68ba      	ldr	r2, [r7, #8]
 800dcf6:	68f9      	ldr	r1, [r7, #12]
 800dcf8:	4806      	ldr	r0, [pc, #24]	; (800dd14 <BSP_SD_ReadBlocks+0x38>)
 800dcfa:	f7f9 fedb 	bl	8007ab4 <HAL_SD_ReadBlocks>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	200003c0 	.word	0x200003c0

0800dd18 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af02      	add	r7, sp, #8
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
 800dd24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	68ba      	ldr	r2, [r7, #8]
 800dd32:	68f9      	ldr	r1, [r7, #12]
 800dd34:	4806      	ldr	r0, [pc, #24]	; (800dd50 <BSP_SD_WriteBlocks+0x38>)
 800dd36:	f7fa f89b 	bl	8007e70 <HAL_SD_WriteBlocks>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dd40:	2301      	movs	r3, #1
 800dd42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	200003c0 	.word	0x200003c0

0800dd54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd58:	4805      	ldr	r0, [pc, #20]	; (800dd70 <BSP_SD_GetCardState+0x1c>)
 800dd5a:	f7fa fbdf 	bl	800851c <HAL_SD_GetCardState>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b04      	cmp	r3, #4
 800dd62:	bf14      	ite	ne
 800dd64:	2301      	movne	r3, #1
 800dd66:	2300      	moveq	r3, #0
 800dd68:	b2db      	uxtb	r3, r3
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	200003c0 	.word	0x200003c0

0800dd74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dd7c:	6879      	ldr	r1, [r7, #4]
 800dd7e:	4803      	ldr	r0, [pc, #12]	; (800dd8c <BSP_SD_GetCardInfo+0x18>)
 800dd80:	f7fa fba0 	bl	80084c4 <HAL_SD_GetCardInfo>
}
 800dd84:	bf00      	nop
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	200003c0 	.word	0x200003c0

0800dd90 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dd96:	2301      	movs	r3, #1
 800dd98:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dd9a:	f000 f80b 	bl	800ddb4 <BSP_PlatformIsDetected>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dda4:	2300      	movs	r3, #0
 800dda6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dda8:	79fb      	ldrb	r3, [r7, #7]
 800ddaa:	b2db      	uxtb	r3, r3
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ddbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ddc2:	4806      	ldr	r0, [pc, #24]	; (800dddc <BSP_PlatformIsDetected+0x28>)
 800ddc4:	f7f5 fca0 	bl	8003708 <HAL_GPIO_ReadPin>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d001      	beq.n	800ddd2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ddd2:	79fb      	ldrb	r3, [r7, #7]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	40020000 	.word	0x40020000

0800dde0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	4603      	mov	r3, r0
 800dde8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ddea:	4b0b      	ldr	r3, [pc, #44]	; (800de18 <SD_CheckStatus+0x38>)
 800ddec:	2201      	movs	r2, #1
 800ddee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ddf0:	f7ff ffb0 	bl	800dd54 <BSP_SD_GetCardState>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d107      	bne.n	800de0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ddfa:	4b07      	ldr	r3, [pc, #28]	; (800de18 <SD_CheckStatus+0x38>)
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	f023 0301 	bic.w	r3, r3, #1
 800de04:	b2da      	uxtb	r2, r3
 800de06:	4b04      	ldr	r3, [pc, #16]	; (800de18 <SD_CheckStatus+0x38>)
 800de08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800de0a:	4b03      	ldr	r3, [pc, #12]	; (800de18 <SD_CheckStatus+0x38>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	b2db      	uxtb	r3, r3
}
 800de10:	4618      	mov	r0, r3
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	20000009 	.word	0x20000009

0800de1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800de26:	4b0b      	ldr	r3, [pc, #44]	; (800de54 <SD_initialize+0x38>)
 800de28:	2201      	movs	r2, #1
 800de2a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800de2c:	f7ff ff3e 	bl	800dcac <BSP_SD_Init>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d107      	bne.n	800de46 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800de36:	79fb      	ldrb	r3, [r7, #7]
 800de38:	4618      	mov	r0, r3
 800de3a:	f7ff ffd1 	bl	800dde0 <SD_CheckStatus>
 800de3e:	4603      	mov	r3, r0
 800de40:	461a      	mov	r2, r3
 800de42:	4b04      	ldr	r3, [pc, #16]	; (800de54 <SD_initialize+0x38>)
 800de44:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800de46:	4b03      	ldr	r3, [pc, #12]	; (800de54 <SD_initialize+0x38>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	b2db      	uxtb	r3, r3
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	20000009 	.word	0x20000009

0800de58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4603      	mov	r3, r0
 800de60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	4618      	mov	r0, r3
 800de66:	f7ff ffbb 	bl	800dde0 <SD_CheckStatus>
 800de6a:	4603      	mov	r3, r0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60b9      	str	r1, [r7, #8]
 800de7c:	607a      	str	r2, [r7, #4]
 800de7e:	603b      	str	r3, [r7, #0]
 800de80:	4603      	mov	r3, r0
 800de82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800de88:	f04f 33ff 	mov.w	r3, #4294967295
 800de8c:	683a      	ldr	r2, [r7, #0]
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	68b8      	ldr	r0, [r7, #8]
 800de92:	f7ff ff23 	bl	800dcdc <BSP_SD_ReadBlocks>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d107      	bne.n	800deac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800de9c:	bf00      	nop
 800de9e:	f7ff ff59 	bl	800dd54 <BSP_SD_GetCardState>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1fa      	bne.n	800de9e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dea8:	2300      	movs	r3, #0
 800deaa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800deac:	7dfb      	ldrb	r3, [r7, #23]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3718      	adds	r7, #24
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}

0800deb6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b086      	sub	sp, #24
 800deba:	af00      	add	r7, sp, #0
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]
 800dec2:	4603      	mov	r3, r0
 800dec4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800deca:	f04f 33ff 	mov.w	r3, #4294967295
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	68b8      	ldr	r0, [r7, #8]
 800ded4:	f7ff ff20 	bl	800dd18 <BSP_SD_WriteBlocks>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d107      	bne.n	800deee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dede:	bf00      	nop
 800dee0:	f7ff ff38 	bl	800dd54 <BSP_SD_GetCardState>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1fa      	bne.n	800dee0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800deee:	7dfb      	ldrb	r3, [r7, #23]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08c      	sub	sp, #48	; 0x30
 800defc:	af00      	add	r7, sp, #0
 800defe:	4603      	mov	r3, r0
 800df00:	603a      	str	r2, [r7, #0]
 800df02:	71fb      	strb	r3, [r7, #7]
 800df04:	460b      	mov	r3, r1
 800df06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800df08:	2301      	movs	r3, #1
 800df0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df0e:	4b25      	ldr	r3, [pc, #148]	; (800dfa4 <SD_ioctl+0xac>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	b2db      	uxtb	r3, r3
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <SD_ioctl+0x28>
 800df1c:	2303      	movs	r3, #3
 800df1e:	e03c      	b.n	800df9a <SD_ioctl+0xa2>

  switch (cmd)
 800df20:	79bb      	ldrb	r3, [r7, #6]
 800df22:	2b03      	cmp	r3, #3
 800df24:	d834      	bhi.n	800df90 <SD_ioctl+0x98>
 800df26:	a201      	add	r2, pc, #4	; (adr r2, 800df2c <SD_ioctl+0x34>)
 800df28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2c:	0800df3d 	.word	0x0800df3d
 800df30:	0800df45 	.word	0x0800df45
 800df34:	0800df5d 	.word	0x0800df5d
 800df38:	0800df77 	.word	0x0800df77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df42:	e028      	b.n	800df96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800df44:	f107 030c 	add.w	r3, r7, #12
 800df48:	4618      	mov	r0, r3
 800df4a:	f7ff ff13 	bl	800dd74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800df4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df54:	2300      	movs	r3, #0
 800df56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df5a:	e01c      	b.n	800df96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df5c:	f107 030c 	add.w	r3, r7, #12
 800df60:	4618      	mov	r0, r3
 800df62:	f7ff ff07 	bl	800dd74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df68:	b29a      	uxth	r2, r3
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800df6e:	2300      	movs	r3, #0
 800df70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df74:	e00f      	b.n	800df96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df76:	f107 030c 	add.w	r3, r7, #12
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7ff fefa 	bl	800dd74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	0a5a      	lsrs	r2, r3, #9
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df8e:	e002      	b.n	800df96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800df90:	2304      	movs	r3, #4
 800df92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800df96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3730      	adds	r7, #48	; 0x30
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20000009 	.word	0x20000009

0800dfa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dfb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dfb8:	f005 f884 	bl	80130c4 <malloc>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d109      	bne.n	800dfda <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	32b0      	adds	r2, #176	; 0xb0
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	e0d4      	b.n	800e184 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dfda:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dfde:	2100      	movs	r1, #0
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f005 f87f 	bl	80130e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	32b0      	adds	r2, #176	; 0xb0
 800dff0:	68f9      	ldr	r1, [r7, #12]
 800dff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	32b0      	adds	r2, #176	; 0xb0
 800e000:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	7c1b      	ldrb	r3, [r3, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d138      	bne.n	800e084 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e012:	4b5e      	ldr	r3, [pc, #376]	; (800e18c <USBD_CDC_Init+0x1e4>)
 800e014:	7819      	ldrb	r1, [r3, #0]
 800e016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e01a:	2202      	movs	r2, #2
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f004 fb6c 	bl	80126fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e022:	4b5a      	ldr	r3, [pc, #360]	; (800e18c <USBD_CDC_Init+0x1e4>)
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	f003 020f 	and.w	r2, r3, #15
 800e02a:	6879      	ldr	r1, [r7, #4]
 800e02c:	4613      	mov	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	4413      	add	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	440b      	add	r3, r1
 800e036:	3324      	adds	r3, #36	; 0x24
 800e038:	2201      	movs	r2, #1
 800e03a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e03c:	4b54      	ldr	r3, [pc, #336]	; (800e190 <USBD_CDC_Init+0x1e8>)
 800e03e:	7819      	ldrb	r1, [r3, #0]
 800e040:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e044:	2202      	movs	r2, #2
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f004 fb57 	bl	80126fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e04c:	4b50      	ldr	r3, [pc, #320]	; (800e190 <USBD_CDC_Init+0x1e8>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	f003 020f 	and.w	r2, r3, #15
 800e054:	6879      	ldr	r1, [r7, #4]
 800e056:	4613      	mov	r3, r2
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	4413      	add	r3, r2
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	440b      	add	r3, r1
 800e060:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e064:	2201      	movs	r2, #1
 800e066:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e068:	4b4a      	ldr	r3, [pc, #296]	; (800e194 <USBD_CDC_Init+0x1ec>)
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	f003 020f 	and.w	r2, r3, #15
 800e070:	6879      	ldr	r1, [r7, #4]
 800e072:	4613      	mov	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4413      	add	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	440b      	add	r3, r1
 800e07c:	3326      	adds	r3, #38	; 0x26
 800e07e:	2210      	movs	r2, #16
 800e080:	801a      	strh	r2, [r3, #0]
 800e082:	e035      	b.n	800e0f0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e084:	4b41      	ldr	r3, [pc, #260]	; (800e18c <USBD_CDC_Init+0x1e4>)
 800e086:	7819      	ldrb	r1, [r3, #0]
 800e088:	2340      	movs	r3, #64	; 0x40
 800e08a:	2202      	movs	r2, #2
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f004 fb34 	bl	80126fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e092:	4b3e      	ldr	r3, [pc, #248]	; (800e18c <USBD_CDC_Init+0x1e4>)
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	f003 020f 	and.w	r2, r3, #15
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	4613      	mov	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	4413      	add	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	440b      	add	r3, r1
 800e0a6:	3324      	adds	r3, #36	; 0x24
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e0ac:	4b38      	ldr	r3, [pc, #224]	; (800e190 <USBD_CDC_Init+0x1e8>)
 800e0ae:	7819      	ldrb	r1, [r3, #0]
 800e0b0:	2340      	movs	r3, #64	; 0x40
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f004 fb20 	bl	80126fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e0ba:	4b35      	ldr	r3, [pc, #212]	; (800e190 <USBD_CDC_Init+0x1e8>)
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	f003 020f 	and.w	r2, r3, #15
 800e0c2:	6879      	ldr	r1, [r7, #4]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	4413      	add	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	440b      	add	r3, r1
 800e0ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e0d6:	4b2f      	ldr	r3, [pc, #188]	; (800e194 <USBD_CDC_Init+0x1ec>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	f003 020f 	and.w	r2, r3, #15
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	440b      	add	r3, r1
 800e0ea:	3326      	adds	r3, #38	; 0x26
 800e0ec:	2210      	movs	r2, #16
 800e0ee:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e0f0:	4b28      	ldr	r3, [pc, #160]	; (800e194 <USBD_CDC_Init+0x1ec>)
 800e0f2:	7819      	ldrb	r1, [r3, #0]
 800e0f4:	2308      	movs	r3, #8
 800e0f6:	2203      	movs	r2, #3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f004 fafe 	bl	80126fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e0fe:	4b25      	ldr	r3, [pc, #148]	; (800e194 <USBD_CDC_Init+0x1ec>)
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	f003 020f 	and.w	r2, r3, #15
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	4613      	mov	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	440b      	add	r3, r1
 800e112:	3324      	adds	r3, #36	; 0x24
 800e114:	2201      	movs	r2, #1
 800e116:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	33b0      	adds	r3, #176	; 0xb0
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4413      	add	r3, r2
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2200      	movs	r2, #0
 800e138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800e14e:	2302      	movs	r3, #2
 800e150:	e018      	b.n	800e184 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	7c1b      	ldrb	r3, [r3, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d10a      	bne.n	800e170 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e15a:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <USBD_CDC_Init+0x1e8>)
 800e15c:	7819      	ldrb	r1, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e164:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f004 fbb5 	bl	80128d8 <USBD_LL_PrepareReceive>
 800e16e:	e008      	b.n	800e182 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <USBD_CDC_Init+0x1e8>)
 800e172:	7819      	ldrb	r1, [r3, #0]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e17a:	2340      	movs	r3, #64	; 0x40
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f004 fbab 	bl	80128d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	20000093 	.word	0x20000093
 800e190:	20000094 	.word	0x20000094
 800e194:	20000095 	.word	0x20000095

0800e198 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e1a4:	4b3a      	ldr	r3, [pc, #232]	; (800e290 <USBD_CDC_DeInit+0xf8>)
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f004 facb 	bl	8012746 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e1b0:	4b37      	ldr	r3, [pc, #220]	; (800e290 <USBD_CDC_DeInit+0xf8>)
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	f003 020f 	and.w	r2, r3, #15
 800e1b8:	6879      	ldr	r1, [r7, #4]
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	4413      	add	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	440b      	add	r3, r1
 800e1c4:	3324      	adds	r3, #36	; 0x24
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e1ca:	4b32      	ldr	r3, [pc, #200]	; (800e294 <USBD_CDC_DeInit+0xfc>)
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f004 fab8 	bl	8012746 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e1d6:	4b2f      	ldr	r3, [pc, #188]	; (800e294 <USBD_CDC_DeInit+0xfc>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	f003 020f 	and.w	r2, r3, #15
 800e1de:	6879      	ldr	r1, [r7, #4]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	440b      	add	r3, r1
 800e1ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e1f2:	4b29      	ldr	r3, [pc, #164]	; (800e298 <USBD_CDC_DeInit+0x100>)
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f004 faa4 	bl	8012746 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e1fe:	4b26      	ldr	r3, [pc, #152]	; (800e298 <USBD_CDC_DeInit+0x100>)
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	f003 020f 	and.w	r2, r3, #15
 800e206:	6879      	ldr	r1, [r7, #4]
 800e208:	4613      	mov	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	440b      	add	r3, r1
 800e212:	3324      	adds	r3, #36	; 0x24
 800e214:	2200      	movs	r2, #0
 800e216:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e218:	4b1f      	ldr	r3, [pc, #124]	; (800e298 <USBD_CDC_DeInit+0x100>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	f003 020f 	and.w	r2, r3, #15
 800e220:	6879      	ldr	r1, [r7, #4]
 800e222:	4613      	mov	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	440b      	add	r3, r1
 800e22c:	3326      	adds	r3, #38	; 0x26
 800e22e:	2200      	movs	r2, #0
 800e230:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	32b0      	adds	r2, #176	; 0xb0
 800e23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d01f      	beq.n	800e284 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	33b0      	adds	r3, #176	; 0xb0
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	32b0      	adds	r2, #176	; 0xb0
 800e262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e266:	4618      	mov	r0, r3
 800e268:	f004 ff34 	bl	80130d4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	32b0      	adds	r2, #176	; 0xb0
 800e276:	2100      	movs	r1, #0
 800e278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e284:	2300      	movs	r3, #0
}
 800e286:	4618      	mov	r0, r3
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	20000093 	.word	0x20000093
 800e294:	20000094 	.word	0x20000094
 800e298:	20000095 	.word	0x20000095

0800e29c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b086      	sub	sp, #24
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	32b0      	adds	r2, #176	; 0xb0
 800e2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e0bf      	b.n	800e44c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d050      	beq.n	800e37a <USBD_CDC_Setup+0xde>
 800e2d8:	2b20      	cmp	r3, #32
 800e2da:	f040 80af 	bne.w	800e43c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	88db      	ldrh	r3, [r3, #6]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d03a      	beq.n	800e35c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	b25b      	sxtb	r3, r3
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	da1b      	bge.n	800e328 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	33b0      	adds	r3, #176	; 0xb0
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	683a      	ldr	r2, [r7, #0]
 800e304:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e306:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	88d2      	ldrh	r2, [r2, #6]
 800e30c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	88db      	ldrh	r3, [r3, #6]
 800e312:	2b07      	cmp	r3, #7
 800e314:	bf28      	it	cs
 800e316:	2307      	movcs	r3, #7
 800e318:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	89fa      	ldrh	r2, [r7, #14]
 800e31e:	4619      	mov	r1, r3
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f001 fd6d 	bl	800fe00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e326:	e090      	b.n	800e44a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	785a      	ldrb	r2, [r3, #1]
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	88db      	ldrh	r3, [r3, #6]
 800e336:	2b3f      	cmp	r3, #63	; 0x3f
 800e338:	d803      	bhi.n	800e342 <USBD_CDC_Setup+0xa6>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	88db      	ldrh	r3, [r3, #6]
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	e000      	b.n	800e344 <USBD_CDC_Setup+0xa8>
 800e342:	2240      	movs	r2, #64	; 0x40
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e34a:	6939      	ldr	r1, [r7, #16]
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e352:	461a      	mov	r2, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f001 fd7f 	bl	800fe58 <USBD_CtlPrepareRx>
      break;
 800e35a:	e076      	b.n	800e44a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	33b0      	adds	r3, #176	; 0xb0
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	683a      	ldr	r2, [r7, #0]
 800e370:	7850      	ldrb	r0, [r2, #1]
 800e372:	2200      	movs	r2, #0
 800e374:	6839      	ldr	r1, [r7, #0]
 800e376:	4798      	blx	r3
      break;
 800e378:	e067      	b.n	800e44a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	785b      	ldrb	r3, [r3, #1]
 800e37e:	2b0b      	cmp	r3, #11
 800e380:	d851      	bhi.n	800e426 <USBD_CDC_Setup+0x18a>
 800e382:	a201      	add	r2, pc, #4	; (adr r2, 800e388 <USBD_CDC_Setup+0xec>)
 800e384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e388:	0800e3b9 	.word	0x0800e3b9
 800e38c:	0800e435 	.word	0x0800e435
 800e390:	0800e427 	.word	0x0800e427
 800e394:	0800e427 	.word	0x0800e427
 800e398:	0800e427 	.word	0x0800e427
 800e39c:	0800e427 	.word	0x0800e427
 800e3a0:	0800e427 	.word	0x0800e427
 800e3a4:	0800e427 	.word	0x0800e427
 800e3a8:	0800e427 	.word	0x0800e427
 800e3ac:	0800e427 	.word	0x0800e427
 800e3b0:	0800e3e3 	.word	0x0800e3e3
 800e3b4:	0800e40d 	.word	0x0800e40d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b03      	cmp	r3, #3
 800e3c2:	d107      	bne.n	800e3d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e3c4:	f107 030a 	add.w	r3, r7, #10
 800e3c8:	2202      	movs	r2, #2
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f001 fd17 	bl	800fe00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e3d2:	e032      	b.n	800e43a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f001 fca1 	bl	800fd1e <USBD_CtlError>
            ret = USBD_FAIL;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	75fb      	strb	r3, [r7, #23]
          break;
 800e3e0:	e02b      	b.n	800e43a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	2b03      	cmp	r3, #3
 800e3ec:	d107      	bne.n	800e3fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e3ee:	f107 030d 	add.w	r3, r7, #13
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 fd02 	bl	800fe00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e3fc:	e01d      	b.n	800e43a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f001 fc8c 	bl	800fd1e <USBD_CtlError>
            ret = USBD_FAIL;
 800e406:	2303      	movs	r3, #3
 800e408:	75fb      	strb	r3, [r7, #23]
          break;
 800e40a:	e016      	b.n	800e43a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b03      	cmp	r3, #3
 800e416:	d00f      	beq.n	800e438 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e418:	6839      	ldr	r1, [r7, #0]
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f001 fc7f 	bl	800fd1e <USBD_CtlError>
            ret = USBD_FAIL;
 800e420:	2303      	movs	r3, #3
 800e422:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e424:	e008      	b.n	800e438 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f001 fc78 	bl	800fd1e <USBD_CtlError>
          ret = USBD_FAIL;
 800e42e:	2303      	movs	r3, #3
 800e430:	75fb      	strb	r3, [r7, #23]
          break;
 800e432:	e002      	b.n	800e43a <USBD_CDC_Setup+0x19e>
          break;
 800e434:	bf00      	nop
 800e436:	e008      	b.n	800e44a <USBD_CDC_Setup+0x1ae>
          break;
 800e438:	bf00      	nop
      }
      break;
 800e43a:	e006      	b.n	800e44a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f001 fc6d 	bl	800fd1e <USBD_CtlError>
      ret = USBD_FAIL;
 800e444:	2303      	movs	r3, #3
 800e446:	75fb      	strb	r3, [r7, #23]
      break;
 800e448:	bf00      	nop
  }

  return (uint8_t)ret;
 800e44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e466:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	32b0      	adds	r2, #176	; 0xb0
 800e472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d101      	bne.n	800e47e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e47a:	2303      	movs	r3, #3
 800e47c:	e065      	b.n	800e54a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	32b0      	adds	r2, #176	; 0xb0
 800e488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e48c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e48e:	78fb      	ldrb	r3, [r7, #3]
 800e490:	f003 020f 	and.w	r2, r3, #15
 800e494:	6879      	ldr	r1, [r7, #4]
 800e496:	4613      	mov	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4413      	add	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	440b      	add	r3, r1
 800e4a0:	3318      	adds	r3, #24
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d02f      	beq.n	800e508 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e4a8:	78fb      	ldrb	r3, [r7, #3]
 800e4aa:	f003 020f 	and.w	r2, r3, #15
 800e4ae:	6879      	ldr	r1, [r7, #4]
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	4413      	add	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	440b      	add	r3, r1
 800e4ba:	3318      	adds	r3, #24
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	78fb      	ldrb	r3, [r7, #3]
 800e4c0:	f003 010f 	and.w	r1, r3, #15
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	00db      	lsls	r3, r3, #3
 800e4ca:	440b      	add	r3, r1
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	4403      	add	r3, r0
 800e4d0:	3348      	adds	r3, #72	; 0x48
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e4d8:	fb01 f303 	mul.w	r3, r1, r3
 800e4dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d112      	bne.n	800e508 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e4e2:	78fb      	ldrb	r3, [r7, #3]
 800e4e4:	f003 020f 	and.w	r2, r3, #15
 800e4e8:	6879      	ldr	r1, [r7, #4]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	440b      	add	r3, r1
 800e4f4:	3318      	adds	r3, #24
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e4fa:	78f9      	ldrb	r1, [r7, #3]
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	2200      	movs	r2, #0
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f004 f9c8 	bl	8012896 <USBD_LL_Transmit>
 800e506:	e01f      	b.n	800e548 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	33b0      	adds	r3, #176	; 0xb0
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4413      	add	r3, r2
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	691b      	ldr	r3, [r3, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d010      	beq.n	800e548 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	33b0      	adds	r3, #176	; 0xb0
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	691b      	ldr	r3, [r3, #16]
 800e538:	68ba      	ldr	r2, [r7, #8]
 800e53a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e544:	78fa      	ldrb	r2, [r7, #3]
 800e546:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b084      	sub	sp, #16
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
 800e55a:	460b      	mov	r3, r1
 800e55c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	32b0      	adds	r2, #176	; 0xb0
 800e568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e56c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	32b0      	adds	r2, #176	; 0xb0
 800e578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e580:	2303      	movs	r3, #3
 800e582:	e01a      	b.n	800e5ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e584:	78fb      	ldrb	r3, [r7, #3]
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f004 f9c6 	bl	801291a <USBD_LL_GetRxDataSize>
 800e58e:	4602      	mov	r2, r0
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	33b0      	adds	r3, #176	; 0xb0
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e5b4:	4611      	mov	r1, r2
 800e5b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	32b0      	adds	r2, #176	; 0xb0
 800e5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d101      	bne.n	800e5e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e5e0:	2303      	movs	r3, #3
 800e5e2:	e025      	b.n	800e630 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	33b0      	adds	r3, #176	; 0xb0
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	4413      	add	r3, r2
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d01a      	beq.n	800e62e <USBD_CDC_EP0_RxReady+0x6c>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e5fe:	2bff      	cmp	r3, #255	; 0xff
 800e600:	d015      	beq.n	800e62e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	33b0      	adds	r3, #176	; 0xb0
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4413      	add	r3, r2
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e61a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e622:	b292      	uxth	r2, r2
 800e624:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	22ff      	movs	r2, #255	; 0xff
 800e62a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e640:	2182      	movs	r1, #130	; 0x82
 800e642:	4818      	ldr	r0, [pc, #96]	; (800e6a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e644:	f000 fd09 	bl	800f05a <USBD_GetEpDesc>
 800e648:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e64a:	2101      	movs	r1, #1
 800e64c:	4815      	ldr	r0, [pc, #84]	; (800e6a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e64e:	f000 fd04 	bl	800f05a <USBD_GetEpDesc>
 800e652:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e654:	2181      	movs	r1, #129	; 0x81
 800e656:	4813      	ldr	r0, [pc, #76]	; (800e6a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e658:	f000 fcff 	bl	800f05a <USBD_GetEpDesc>
 800e65c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d002      	beq.n	800e66a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	2210      	movs	r2, #16
 800e668:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d006      	beq.n	800e67e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	2200      	movs	r2, #0
 800e674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e678:	711a      	strb	r2, [r3, #4]
 800e67a:	2200      	movs	r2, #0
 800e67c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d006      	beq.n	800e692 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e68c:	711a      	strb	r2, [r3, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2243      	movs	r2, #67	; 0x43
 800e696:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e698:	4b02      	ldr	r3, [pc, #8]	; (800e6a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	20000050 	.word	0x20000050

0800e6a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e6b0:	2182      	movs	r1, #130	; 0x82
 800e6b2:	4818      	ldr	r0, [pc, #96]	; (800e714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e6b4:	f000 fcd1 	bl	800f05a <USBD_GetEpDesc>
 800e6b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e6ba:	2101      	movs	r1, #1
 800e6bc:	4815      	ldr	r0, [pc, #84]	; (800e714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e6be:	f000 fccc 	bl	800f05a <USBD_GetEpDesc>
 800e6c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e6c4:	2181      	movs	r1, #129	; 0x81
 800e6c6:	4813      	ldr	r0, [pc, #76]	; (800e714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e6c8:	f000 fcc7 	bl	800f05a <USBD_GetEpDesc>
 800e6cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d002      	beq.n	800e6da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	2210      	movs	r2, #16
 800e6d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d006      	beq.n	800e6ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	711a      	strb	r2, [r3, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f042 0202 	orr.w	r2, r2, #2
 800e6ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d006      	beq.n	800e702 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	711a      	strb	r2, [r3, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f042 0202 	orr.w	r2, r2, #2
 800e700:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2243      	movs	r2, #67	; 0x43
 800e706:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3718      	adds	r7, #24
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	20000050 	.word	0x20000050

0800e718 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e720:	2182      	movs	r1, #130	; 0x82
 800e722:	4818      	ldr	r0, [pc, #96]	; (800e784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e724:	f000 fc99 	bl	800f05a <USBD_GetEpDesc>
 800e728:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e72a:	2101      	movs	r1, #1
 800e72c:	4815      	ldr	r0, [pc, #84]	; (800e784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e72e:	f000 fc94 	bl	800f05a <USBD_GetEpDesc>
 800e732:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e734:	2181      	movs	r1, #129	; 0x81
 800e736:	4813      	ldr	r0, [pc, #76]	; (800e784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e738:	f000 fc8f 	bl	800f05a <USBD_GetEpDesc>
 800e73c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d002      	beq.n	800e74a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	2210      	movs	r2, #16
 800e748:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d006      	beq.n	800e75e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	2200      	movs	r2, #0
 800e754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e758:	711a      	strb	r2, [r3, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d006      	beq.n	800e772 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e76c:	711a      	strb	r2, [r3, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2243      	movs	r2, #67	; 0x43
 800e776:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e778:	4b02      	ldr	r3, [pc, #8]	; (800e784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3718      	adds	r7, #24
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	20000050 	.word	0x20000050

0800e788 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	220a      	movs	r2, #10
 800e794:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e796:	4b03      	ldr	r3, [pc, #12]	; (800e7a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e798:	4618      	mov	r0, r3
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	2000000c 	.word	0x2000000c

0800e7a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d101      	bne.n	800e7bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	e009      	b.n	800e7d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	33b0      	adds	r3, #176	; 0xb0
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	683a      	ldr	r2, [r7, #0]
 800e7cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b087      	sub	sp, #28
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	32b0      	adds	r2, #176	; 0xb0
 800e7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d101      	bne.n	800e802 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e7fe:	2303      	movs	r3, #3
 800e800:	e008      	b.n	800e814 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	371c      	adds	r7, #28
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	32b0      	adds	r2, #176	; 0xb0
 800e834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e838:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d101      	bne.n	800e844 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e840:	2303      	movs	r3, #3
 800e842:	e004      	b.n	800e84e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3714      	adds	r7, #20
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
	...

0800e85c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	32b0      	adds	r2, #176	; 0xb0
 800e86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e872:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	32b0      	adds	r2, #176	; 0xb0
 800e87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e886:	2303      	movs	r3, #3
 800e888:	e018      	b.n	800e8bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	7c1b      	ldrb	r3, [r3, #16]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10a      	bne.n	800e8a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e892:	4b0c      	ldr	r3, [pc, #48]	; (800e8c4 <USBD_CDC_ReceivePacket+0x68>)
 800e894:	7819      	ldrb	r1, [r3, #0]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e89c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f004 f819 	bl	80128d8 <USBD_LL_PrepareReceive>
 800e8a6:	e008      	b.n	800e8ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e8a8:	4b06      	ldr	r3, [pc, #24]	; (800e8c4 <USBD_CDC_ReceivePacket+0x68>)
 800e8aa:	7819      	ldrb	r1, [r3, #0]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8b2:	2340      	movs	r3, #64	; 0x40
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f004 f80f 	bl	80128d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3710      	adds	r7, #16
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	20000094 	.word	0x20000094

0800e8c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b086      	sub	sp, #24
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e8dc:	2303      	movs	r3, #3
 800e8de:	e01f      	b.n	800e920 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d003      	beq.n	800e906 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2201      	movs	r2, #1
 800e90a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	79fa      	ldrb	r2, [r7, #7]
 800e912:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f003 fe83 	bl	8012620 <USBD_LL_Init>
 800e91a:	4603      	mov	r3, r0
 800e91c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3718      	adds	r7, #24
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e932:	2300      	movs	r3, #0
 800e934:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d101      	bne.n	800e940 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e93c:	2303      	movs	r3, #3
 800e93e:	e025      	b.n	800e98c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	683a      	ldr	r2, [r7, #0]
 800e944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	32ae      	adds	r2, #174	; 0xae
 800e952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00f      	beq.n	800e97c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	32ae      	adds	r2, #174	; 0xae
 800e966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e96c:	f107 020e 	add.w	r2, r7, #14
 800e970:	4610      	mov	r0, r2
 800e972:	4798      	blx	r3
 800e974:	4602      	mov	r2, r0
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f003 fe91 	bl	80126c4 <USBD_LL_Start>
 800e9a2:	4603      	mov	r3, r0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e9b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b084      	sub	sp, #16
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d009      	beq.n	800e9f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	78fa      	ldrb	r2, [r7, #3]
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	4798      	blx	r3
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b084      	sub	sp, #16
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	460b      	mov	r3, r1
 800ea04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea06:	2300      	movs	r3, #0
 800ea08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	78fa      	ldrb	r2, [r7, #3]
 800ea14:	4611      	mov	r1, r2
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	4798      	blx	r3
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ea20:	2303      	movs	r3, #3
 800ea22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ea24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b084      	sub	sp, #16
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
 800ea36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea3e:	6839      	ldr	r1, [r7, #0]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f001 f932 	bl	800fcaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ea54:	461a      	mov	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea62:	f003 031f 	and.w	r3, r3, #31
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d01a      	beq.n	800eaa0 <USBD_LL_SetupStage+0x72>
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	d822      	bhi.n	800eab4 <USBD_LL_SetupStage+0x86>
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d002      	beq.n	800ea78 <USBD_LL_SetupStage+0x4a>
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d00a      	beq.n	800ea8c <USBD_LL_SetupStage+0x5e>
 800ea76:	e01d      	b.n	800eab4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea7e:	4619      	mov	r1, r3
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 fb5f 	bl	800f144 <USBD_StdDevReq>
 800ea86:	4603      	mov	r3, r0
 800ea88:	73fb      	strb	r3, [r7, #15]
      break;
 800ea8a:	e020      	b.n	800eace <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 fbc7 	bl	800f228 <USBD_StdItfReq>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ea9e:	e016      	b.n	800eace <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 fc29 	bl	800f300 <USBD_StdEPReq>
 800eaae:	4603      	mov	r3, r0
 800eab0:	73fb      	strb	r3, [r7, #15]
      break;
 800eab2:	e00c      	b.n	800eace <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eaba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	4619      	mov	r1, r3
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f003 fe5e 	bl	8012784 <USBD_LL_StallEP>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73fb      	strb	r3, [r7, #15]
      break;
 800eacc:	bf00      	nop
  }

  return ret;
 800eace:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	460b      	mov	r3, r1
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800eae6:	2300      	movs	r3, #0
 800eae8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800eaea:	7afb      	ldrb	r3, [r7, #11]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d16e      	bne.n	800ebce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eaf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eafe:	2b03      	cmp	r3, #3
 800eb00:	f040 8098 	bne.w	800ec34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	689a      	ldr	r2, [r3, #8]
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d913      	bls.n	800eb38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	689a      	ldr	r2, [r3, #8]
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	1ad2      	subs	r2, r2, r3
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	68da      	ldr	r2, [r3, #12]
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	4293      	cmp	r3, r2
 800eb28:	bf28      	it	cs
 800eb2a:	4613      	movcs	r3, r2
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f001 f9ae 	bl	800fe92 <USBD_CtlContinueRx>
 800eb36:	e07d      	b.n	800ec34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb3e:	f003 031f 	and.w	r3, r3, #31
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d014      	beq.n	800eb70 <USBD_LL_DataOutStage+0x98>
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d81d      	bhi.n	800eb86 <USBD_LL_DataOutStage+0xae>
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <USBD_LL_DataOutStage+0x7c>
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d003      	beq.n	800eb5a <USBD_LL_DataOutStage+0x82>
 800eb52:	e018      	b.n	800eb86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800eb54:	2300      	movs	r3, #0
 800eb56:	75bb      	strb	r3, [r7, #22]
            break;
 800eb58:	e018      	b.n	800eb8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	4619      	mov	r1, r3
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f000 fa5e 	bl	800f026 <USBD_CoreFindIF>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	75bb      	strb	r3, [r7, #22]
            break;
 800eb6e:	e00d      	b.n	800eb8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	4619      	mov	r1, r3
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f000 fa60 	bl	800f040 <USBD_CoreFindEP>
 800eb80:	4603      	mov	r3, r0
 800eb82:	75bb      	strb	r3, [r7, #22]
            break;
 800eb84:	e002      	b.n	800eb8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800eb86:	2300      	movs	r3, #0
 800eb88:	75bb      	strb	r3, [r7, #22]
            break;
 800eb8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eb8c:	7dbb      	ldrb	r3, [r7, #22]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d119      	bne.n	800ebc6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	2b03      	cmp	r3, #3
 800eb9c:	d113      	bne.n	800ebc6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eb9e:	7dba      	ldrb	r2, [r7, #22]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	32ae      	adds	r2, #174	; 0xae
 800eba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00b      	beq.n	800ebc6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ebae:	7dba      	ldrb	r2, [r7, #22]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ebb6:	7dba      	ldrb	r2, [r7, #22]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	32ae      	adds	r2, #174	; 0xae
 800ebbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc0:	691b      	ldr	r3, [r3, #16]
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f001 f974 	bl	800feb4 <USBD_CtlSendStatus>
 800ebcc:	e032      	b.n	800ec34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ebce:	7afb      	ldrb	r3, [r7, #11]
 800ebd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	f000 fa31 	bl	800f040 <USBD_CoreFindEP>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebe2:	7dbb      	ldrb	r3, [r7, #22]
 800ebe4:	2bff      	cmp	r3, #255	; 0xff
 800ebe6:	d025      	beq.n	800ec34 <USBD_LL_DataOutStage+0x15c>
 800ebe8:	7dbb      	ldrb	r3, [r7, #22]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d122      	bne.n	800ec34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	d117      	bne.n	800ec2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ebfa:	7dba      	ldrb	r2, [r7, #22]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	32ae      	adds	r2, #174	; 0xae
 800ec00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec04:	699b      	ldr	r3, [r3, #24]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00f      	beq.n	800ec2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ec0a:	7dba      	ldrb	r2, [r7, #22]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ec12:	7dba      	ldrb	r2, [r7, #22]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	32ae      	adds	r2, #174	; 0xae
 800ec18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec1c:	699b      	ldr	r3, [r3, #24]
 800ec1e:	7afa      	ldrb	r2, [r7, #11]
 800ec20:	4611      	mov	r1, r2
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	4798      	blx	r3
 800ec26:	4603      	mov	r3, r0
 800ec28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ec2a:	7dfb      	ldrb	r3, [r7, #23]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d001      	beq.n	800ec34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ec30:	7dfb      	ldrb	r3, [r7, #23]
 800ec32:	e000      	b.n	800ec36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ec34:	2300      	movs	r3, #0
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b086      	sub	sp, #24
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	60f8      	str	r0, [r7, #12]
 800ec46:	460b      	mov	r3, r1
 800ec48:	607a      	str	r2, [r7, #4]
 800ec4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ec4c:	7afb      	ldrb	r3, [r7, #11]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d16f      	bne.n	800ed32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	3314      	adds	r3, #20
 800ec56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d15a      	bne.n	800ed18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	689a      	ldr	r2, [r3, #8]
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d914      	bls.n	800ec98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	689a      	ldr	r2, [r3, #8]
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	1ad2      	subs	r2, r2, r3
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	461a      	mov	r2, r3
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f001 f8d6 	bl	800fe36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	2100      	movs	r1, #0
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f003 fe21 	bl	80128d8 <USBD_LL_PrepareReceive>
 800ec96:	e03f      	b.n	800ed18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	68da      	ldr	r2, [r3, #12]
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d11c      	bne.n	800ecde <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	685a      	ldr	r2, [r3, #4]
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d316      	bcc.n	800ecde <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	685a      	ldr	r2, [r3, #4]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d20f      	bcs.n	800ecde <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f001 f8b7 	bl	800fe36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2100      	movs	r1, #0
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f003 fdfe 	bl	80128d8 <USBD_LL_PrepareReceive>
 800ecdc:	e01c      	b.n	800ed18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	d10f      	bne.n	800ed0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d009      	beq.n	800ed0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed0a:	2180      	movs	r1, #128	; 0x80
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f003 fd39 	bl	8012784 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f001 f8e1 	bl	800feda <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d03a      	beq.n	800ed98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ed22:	68f8      	ldr	r0, [r7, #12]
 800ed24:	f7ff fe42 	bl	800e9ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ed30:	e032      	b.n	800ed98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ed32:	7afb      	ldrb	r3, [r7, #11]
 800ed34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f000 f97f 	bl	800f040 <USBD_CoreFindEP>
 800ed42:	4603      	mov	r3, r0
 800ed44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	2bff      	cmp	r3, #255	; 0xff
 800ed4a:	d025      	beq.n	800ed98 <USBD_LL_DataInStage+0x15a>
 800ed4c:	7dfb      	ldrb	r3, [r7, #23]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d122      	bne.n	800ed98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d11c      	bne.n	800ed98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ed5e:	7dfa      	ldrb	r2, [r7, #23]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	32ae      	adds	r2, #174	; 0xae
 800ed64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d014      	beq.n	800ed98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ed6e:	7dfa      	ldrb	r2, [r7, #23]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ed76:	7dfa      	ldrb	r2, [r7, #23]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	32ae      	adds	r2, #174	; 0xae
 800ed7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed80:	695b      	ldr	r3, [r3, #20]
 800ed82:	7afa      	ldrb	r2, [r7, #11]
 800ed84:	4611      	mov	r1, r2
 800ed86:	68f8      	ldr	r0, [r7, #12]
 800ed88:	4798      	blx	r3
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ed8e:	7dbb      	ldrb	r3, [r7, #22]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ed94:	7dbb      	ldrb	r3, [r7, #22]
 800ed96:	e000      	b.n	800ed9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b084      	sub	sp, #16
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2201      	movs	r2, #1
 800edb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2200      	movs	r2, #0
 800edc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d014      	beq.n	800ee08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00e      	beq.n	800ee08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	6852      	ldr	r2, [r2, #4]
 800edf6:	b2d2      	uxtb	r2, r2
 800edf8:	4611      	mov	r1, r2
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	4798      	blx	r3
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d001      	beq.n	800ee08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ee04:	2303      	movs	r3, #3
 800ee06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee08:	2340      	movs	r3, #64	; 0x40
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f003 fc73 	bl	80126fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2240      	movs	r2, #64	; 0x40
 800ee20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee24:	2340      	movs	r3, #64	; 0x40
 800ee26:	2200      	movs	r2, #0
 800ee28:	2180      	movs	r1, #128	; 0x80
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f003 fc65 	bl	80126fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2240      	movs	r2, #64	; 0x40
 800ee3a:	621a      	str	r2, [r3, #32]

  return ret;
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ee46:	b480      	push	{r7}
 800ee48:	b083      	sub	sp, #12
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	460b      	mov	r3, r1
 800ee50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	78fa      	ldrb	r2, [r7, #3]
 800ee56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	370c      	adds	r7, #12
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr

0800ee66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ee66:	b480      	push	{r7}
 800ee68:	b083      	sub	sp, #12
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee74:	b2da      	uxtb	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2204      	movs	r2, #4
 800ee80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ee84:	2300      	movs	r3, #0
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr

0800ee92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ee92:	b480      	push	{r7}
 800ee94:	b083      	sub	sp, #12
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b04      	cmp	r3, #4
 800eea4:	d106      	bne.n	800eeb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b082      	sub	sp, #8
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b03      	cmp	r3, #3
 800eed4:	d110      	bne.n	800eef8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00b      	beq.n	800eef8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee6:	69db      	ldr	r3, [r3, #28]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d005      	beq.n	800eef8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef2:	69db      	ldr	r3, [r3, #28]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800eef8:	2300      	movs	r3, #0
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3708      	adds	r7, #8
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b082      	sub	sp, #8
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	32ae      	adds	r2, #174	; 0xae
 800ef18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d101      	bne.n	800ef24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ef20:	2303      	movs	r3, #3
 800ef22:	e01c      	b.n	800ef5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b03      	cmp	r3, #3
 800ef2e:	d115      	bne.n	800ef5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	32ae      	adds	r2, #174	; 0xae
 800ef3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef3e:	6a1b      	ldr	r3, [r3, #32]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d00b      	beq.n	800ef5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	32ae      	adds	r2, #174	; 0xae
 800ef4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef52:	6a1b      	ldr	r3, [r3, #32]
 800ef54:	78fa      	ldrb	r2, [r7, #3]
 800ef56:	4611      	mov	r1, r2
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef5c:	2300      	movs	r3, #0
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b082      	sub	sp, #8
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
 800ef6e:	460b      	mov	r3, r1
 800ef70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	32ae      	adds	r2, #174	; 0xae
 800ef7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d101      	bne.n	800ef88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ef84:	2303      	movs	r3, #3
 800ef86:	e01c      	b.n	800efc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	2b03      	cmp	r3, #3
 800ef92:	d115      	bne.n	800efc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	32ae      	adds	r2, #174	; 0xae
 800ef9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d00b      	beq.n	800efc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	32ae      	adds	r2, #174	; 0xae
 800efb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb8:	78fa      	ldrb	r2, [r7, #3]
 800efba:	4611      	mov	r1, r2
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800efca:	b480      	push	{r7}
 800efcc:	b083      	sub	sp, #12
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800efe8:	2300      	movs	r3, #0
 800efea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00e      	beq.n	800f01c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	6852      	ldr	r2, [r2, #4]
 800f00a:	b2d2      	uxtb	r2, r2
 800f00c:	4611      	mov	r1, r2
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	4798      	blx	r3
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f018:	2303      	movs	r3, #3
 800f01a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f026:	b480      	push	{r7}
 800f028:	b083      	sub	sp, #12
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
 800f02e:	460b      	mov	r3, r1
 800f030:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f032:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f034:	4618      	mov	r0, r3
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f04c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f04e:	4618      	mov	r0, r3
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b086      	sub	sp, #24
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	460b      	mov	r3, r1
 800f064:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f06e:	2300      	movs	r3, #0
 800f070:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	885b      	ldrh	r3, [r3, #2]
 800f076:	b29a      	uxth	r2, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	429a      	cmp	r2, r3
 800f080:	d920      	bls.n	800f0c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	b29b      	uxth	r3, r3
 800f088:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f08a:	e013      	b.n	800f0b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f08c:	f107 030a 	add.w	r3, r7, #10
 800f090:	4619      	mov	r1, r3
 800f092:	6978      	ldr	r0, [r7, #20]
 800f094:	f000 f81b 	bl	800f0ce <USBD_GetNextDesc>
 800f098:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	785b      	ldrb	r3, [r3, #1]
 800f09e:	2b05      	cmp	r3, #5
 800f0a0:	d108      	bne.n	800f0b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	789b      	ldrb	r3, [r3, #2]
 800f0aa:	78fa      	ldrb	r2, [r7, #3]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d008      	beq.n	800f0c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	885b      	ldrh	r3, [r3, #2]
 800f0b8:	b29a      	uxth	r2, r3
 800f0ba:	897b      	ldrh	r3, [r7, #10]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d8e5      	bhi.n	800f08c <USBD_GetEpDesc+0x32>
 800f0c0:	e000      	b.n	800f0c4 <USBD_GetEpDesc+0x6a>
          break;
 800f0c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f0c4:	693b      	ldr	r3, [r7, #16]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f0ce:	b480      	push	{r7}
 800f0d0:	b085      	sub	sp, #20
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	881a      	ldrh	r2, [r3, #0]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	4413      	add	r3, r2
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3714      	adds	r7, #20
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f108:	b480      	push	{r7}
 800f10a:	b087      	sub	sp, #28
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	3301      	adds	r3, #1
 800f11e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f126:	8a3b      	ldrh	r3, [r7, #16]
 800f128:	021b      	lsls	r3, r3, #8
 800f12a:	b21a      	sxth	r2, r3
 800f12c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f130:	4313      	orrs	r3, r2
 800f132:	b21b      	sxth	r3, r3
 800f134:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f136:	89fb      	ldrh	r3, [r7, #14]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	371c      	adds	r7, #28
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f14e:	2300      	movs	r3, #0
 800f150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f15a:	2b40      	cmp	r3, #64	; 0x40
 800f15c:	d005      	beq.n	800f16a <USBD_StdDevReq+0x26>
 800f15e:	2b40      	cmp	r3, #64	; 0x40
 800f160:	d857      	bhi.n	800f212 <USBD_StdDevReq+0xce>
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00f      	beq.n	800f186 <USBD_StdDevReq+0x42>
 800f166:	2b20      	cmp	r3, #32
 800f168:	d153      	bne.n	800f212 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	32ae      	adds	r2, #174	; 0xae
 800f174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	6839      	ldr	r1, [r7, #0]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	4798      	blx	r3
 800f180:	4603      	mov	r3, r0
 800f182:	73fb      	strb	r3, [r7, #15]
      break;
 800f184:	e04a      	b.n	800f21c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	785b      	ldrb	r3, [r3, #1]
 800f18a:	2b09      	cmp	r3, #9
 800f18c:	d83b      	bhi.n	800f206 <USBD_StdDevReq+0xc2>
 800f18e:	a201      	add	r2, pc, #4	; (adr r2, 800f194 <USBD_StdDevReq+0x50>)
 800f190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f194:	0800f1e9 	.word	0x0800f1e9
 800f198:	0800f1fd 	.word	0x0800f1fd
 800f19c:	0800f207 	.word	0x0800f207
 800f1a0:	0800f1f3 	.word	0x0800f1f3
 800f1a4:	0800f207 	.word	0x0800f207
 800f1a8:	0800f1c7 	.word	0x0800f1c7
 800f1ac:	0800f1bd 	.word	0x0800f1bd
 800f1b0:	0800f207 	.word	0x0800f207
 800f1b4:	0800f1df 	.word	0x0800f1df
 800f1b8:	0800f1d1 	.word	0x0800f1d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 fa3c 	bl	800f63c <USBD_GetDescriptor>
          break;
 800f1c4:	e024      	b.n	800f210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 fbcb 	bl	800f964 <USBD_SetAddress>
          break;
 800f1ce:	e01f      	b.n	800f210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f1d0:	6839      	ldr	r1, [r7, #0]
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 fc0a 	bl	800f9ec <USBD_SetConfig>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	73fb      	strb	r3, [r7, #15]
          break;
 800f1dc:	e018      	b.n	800f210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f1de:	6839      	ldr	r1, [r7, #0]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 fcad 	bl	800fb40 <USBD_GetConfig>
          break;
 800f1e6:	e013      	b.n	800f210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f1e8:	6839      	ldr	r1, [r7, #0]
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 fcde 	bl	800fbac <USBD_GetStatus>
          break;
 800f1f0:	e00e      	b.n	800f210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f1f2:	6839      	ldr	r1, [r7, #0]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fd0d 	bl	800fc14 <USBD_SetFeature>
          break;
 800f1fa:	e009      	b.n	800f210 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f1fc:	6839      	ldr	r1, [r7, #0]
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 fd31 	bl	800fc66 <USBD_ClrFeature>
          break;
 800f204:	e004      	b.n	800f210 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 fd88 	bl	800fd1e <USBD_CtlError>
          break;
 800f20e:	bf00      	nop
      }
      break;
 800f210:	e004      	b.n	800f21c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f212:	6839      	ldr	r1, [r7, #0]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fd82 	bl	800fd1e <USBD_CtlError>
      break;
 800f21a:	bf00      	nop
  }

  return ret;
 800f21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop

0800f228 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f232:	2300      	movs	r3, #0
 800f234:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f23e:	2b40      	cmp	r3, #64	; 0x40
 800f240:	d005      	beq.n	800f24e <USBD_StdItfReq+0x26>
 800f242:	2b40      	cmp	r3, #64	; 0x40
 800f244:	d852      	bhi.n	800f2ec <USBD_StdItfReq+0xc4>
 800f246:	2b00      	cmp	r3, #0
 800f248:	d001      	beq.n	800f24e <USBD_StdItfReq+0x26>
 800f24a:	2b20      	cmp	r3, #32
 800f24c:	d14e      	bne.n	800f2ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f254:	b2db      	uxtb	r3, r3
 800f256:	3b01      	subs	r3, #1
 800f258:	2b02      	cmp	r3, #2
 800f25a:	d840      	bhi.n	800f2de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	889b      	ldrh	r3, [r3, #4]
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b01      	cmp	r3, #1
 800f264:	d836      	bhi.n	800f2d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	889b      	ldrh	r3, [r3, #4]
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7ff fed9 	bl	800f026 <USBD_CoreFindIF>
 800f274:	4603      	mov	r3, r0
 800f276:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f278:	7bbb      	ldrb	r3, [r7, #14]
 800f27a:	2bff      	cmp	r3, #255	; 0xff
 800f27c:	d01d      	beq.n	800f2ba <USBD_StdItfReq+0x92>
 800f27e:	7bbb      	ldrb	r3, [r7, #14]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d11a      	bne.n	800f2ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f284:	7bba      	ldrb	r2, [r7, #14]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	32ae      	adds	r2, #174	; 0xae
 800f28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d00f      	beq.n	800f2b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f294:	7bba      	ldrb	r2, [r7, #14]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f29c:	7bba      	ldrb	r2, [r7, #14]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	32ae      	adds	r2, #174	; 0xae
 800f2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	6839      	ldr	r1, [r7, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	4798      	blx	r3
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f2b2:	e004      	b.n	800f2be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f2b4:	2303      	movs	r3, #3
 800f2b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f2b8:	e001      	b.n	800f2be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	88db      	ldrh	r3, [r3, #6]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d110      	bne.n	800f2e8 <USBD_StdItfReq+0xc0>
 800f2c6:	7bfb      	ldrb	r3, [r7, #15]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10d      	bne.n	800f2e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 fdf1 	bl	800feb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f2d2:	e009      	b.n	800f2e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fd21 	bl	800fd1e <USBD_CtlError>
          break;
 800f2dc:	e004      	b.n	800f2e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f2de:	6839      	ldr	r1, [r7, #0]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fd1c 	bl	800fd1e <USBD_CtlError>
          break;
 800f2e6:	e000      	b.n	800f2ea <USBD_StdItfReq+0xc2>
          break;
 800f2e8:	bf00      	nop
      }
      break;
 800f2ea:	e004      	b.n	800f2f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f2ec:	6839      	ldr	r1, [r7, #0]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 fd15 	bl	800fd1e <USBD_CtlError>
      break;
 800f2f4:	bf00      	nop
  }

  return ret;
 800f2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f30a:	2300      	movs	r3, #0
 800f30c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	889b      	ldrh	r3, [r3, #4]
 800f312:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f31c:	2b40      	cmp	r3, #64	; 0x40
 800f31e:	d007      	beq.n	800f330 <USBD_StdEPReq+0x30>
 800f320:	2b40      	cmp	r3, #64	; 0x40
 800f322:	f200 817f 	bhi.w	800f624 <USBD_StdEPReq+0x324>
 800f326:	2b00      	cmp	r3, #0
 800f328:	d02a      	beq.n	800f380 <USBD_StdEPReq+0x80>
 800f32a:	2b20      	cmp	r3, #32
 800f32c:	f040 817a 	bne.w	800f624 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f330:	7bbb      	ldrb	r3, [r7, #14]
 800f332:	4619      	mov	r1, r3
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7ff fe83 	bl	800f040 <USBD_CoreFindEP>
 800f33a:	4603      	mov	r3, r0
 800f33c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f33e:	7b7b      	ldrb	r3, [r7, #13]
 800f340:	2bff      	cmp	r3, #255	; 0xff
 800f342:	f000 8174 	beq.w	800f62e <USBD_StdEPReq+0x32e>
 800f346:	7b7b      	ldrb	r3, [r7, #13]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f040 8170 	bne.w	800f62e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f34e:	7b7a      	ldrb	r2, [r7, #13]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f356:	7b7a      	ldrb	r2, [r7, #13]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	32ae      	adds	r2, #174	; 0xae
 800f35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	2b00      	cmp	r3, #0
 800f364:	f000 8163 	beq.w	800f62e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f368:	7b7a      	ldrb	r2, [r7, #13]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	32ae      	adds	r2, #174	; 0xae
 800f36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	4798      	blx	r3
 800f37a:	4603      	mov	r3, r0
 800f37c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f37e:	e156      	b.n	800f62e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	785b      	ldrb	r3, [r3, #1]
 800f384:	2b03      	cmp	r3, #3
 800f386:	d008      	beq.n	800f39a <USBD_StdEPReq+0x9a>
 800f388:	2b03      	cmp	r3, #3
 800f38a:	f300 8145 	bgt.w	800f618 <USBD_StdEPReq+0x318>
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 809b 	beq.w	800f4ca <USBD_StdEPReq+0x1ca>
 800f394:	2b01      	cmp	r3, #1
 800f396:	d03c      	beq.n	800f412 <USBD_StdEPReq+0x112>
 800f398:	e13e      	b.n	800f618 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	2b02      	cmp	r3, #2
 800f3a4:	d002      	beq.n	800f3ac <USBD_StdEPReq+0xac>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d016      	beq.n	800f3d8 <USBD_StdEPReq+0xd8>
 800f3aa:	e02c      	b.n	800f406 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3ac:	7bbb      	ldrb	r3, [r7, #14]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00d      	beq.n	800f3ce <USBD_StdEPReq+0xce>
 800f3b2:	7bbb      	ldrb	r3, [r7, #14]
 800f3b4:	2b80      	cmp	r3, #128	; 0x80
 800f3b6:	d00a      	beq.n	800f3ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3b8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f003 f9e1 	bl	8012784 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3c2:	2180      	movs	r1, #128	; 0x80
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f003 f9dd 	bl	8012784 <USBD_LL_StallEP>
 800f3ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3cc:	e020      	b.n	800f410 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fca4 	bl	800fd1e <USBD_CtlError>
              break;
 800f3d6:	e01b      	b.n	800f410 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	885b      	ldrh	r3, [r3, #2]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d10e      	bne.n	800f3fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f3e0:	7bbb      	ldrb	r3, [r7, #14]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d00b      	beq.n	800f3fe <USBD_StdEPReq+0xfe>
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
 800f3e8:	2b80      	cmp	r3, #128	; 0x80
 800f3ea:	d008      	beq.n	800f3fe <USBD_StdEPReq+0xfe>
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	88db      	ldrh	r3, [r3, #6]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d104      	bne.n	800f3fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3f4:	7bbb      	ldrb	r3, [r7, #14]
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f003 f9c3 	bl	8012784 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fd58 	bl	800feb4 <USBD_CtlSendStatus>

              break;
 800f404:	e004      	b.n	800f410 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f406:	6839      	ldr	r1, [r7, #0]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fc88 	bl	800fd1e <USBD_CtlError>
              break;
 800f40e:	bf00      	nop
          }
          break;
 800f410:	e107      	b.n	800f622 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	2b02      	cmp	r3, #2
 800f41c:	d002      	beq.n	800f424 <USBD_StdEPReq+0x124>
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d016      	beq.n	800f450 <USBD_StdEPReq+0x150>
 800f422:	e04b      	b.n	800f4bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f424:	7bbb      	ldrb	r3, [r7, #14]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00d      	beq.n	800f446 <USBD_StdEPReq+0x146>
 800f42a:	7bbb      	ldrb	r3, [r7, #14]
 800f42c:	2b80      	cmp	r3, #128	; 0x80
 800f42e:	d00a      	beq.n	800f446 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f430:	7bbb      	ldrb	r3, [r7, #14]
 800f432:	4619      	mov	r1, r3
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f003 f9a5 	bl	8012784 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f43a:	2180      	movs	r1, #128	; 0x80
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f003 f9a1 	bl	8012784 <USBD_LL_StallEP>
 800f442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f444:	e040      	b.n	800f4c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 fc68 	bl	800fd1e <USBD_CtlError>
              break;
 800f44e:	e03b      	b.n	800f4c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	885b      	ldrh	r3, [r3, #2]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d136      	bne.n	800f4c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f458:	7bbb      	ldrb	r3, [r7, #14]
 800f45a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d004      	beq.n	800f46c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f462:	7bbb      	ldrb	r3, [r7, #14]
 800f464:	4619      	mov	r1, r3
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f003 f9ab 	bl	80127c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 fd21 	bl	800feb4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f472:	7bbb      	ldrb	r3, [r7, #14]
 800f474:	4619      	mov	r1, r3
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7ff fde2 	bl	800f040 <USBD_CoreFindEP>
 800f47c:	4603      	mov	r3, r0
 800f47e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f480:	7b7b      	ldrb	r3, [r7, #13]
 800f482:	2bff      	cmp	r3, #255	; 0xff
 800f484:	d01f      	beq.n	800f4c6 <USBD_StdEPReq+0x1c6>
 800f486:	7b7b      	ldrb	r3, [r7, #13]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d11c      	bne.n	800f4c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f48c:	7b7a      	ldrb	r2, [r7, #13]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f494:	7b7a      	ldrb	r2, [r7, #13]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	32ae      	adds	r2, #174	; 0xae
 800f49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d010      	beq.n	800f4c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f4a4:	7b7a      	ldrb	r2, [r7, #13]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	32ae      	adds	r2, #174	; 0xae
 800f4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	4798      	blx	r3
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f4ba:	e004      	b.n	800f4c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f4bc:	6839      	ldr	r1, [r7, #0]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 fc2d 	bl	800fd1e <USBD_CtlError>
              break;
 800f4c4:	e000      	b.n	800f4c8 <USBD_StdEPReq+0x1c8>
              break;
 800f4c6:	bf00      	nop
          }
          break;
 800f4c8:	e0ab      	b.n	800f622 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d002      	beq.n	800f4dc <USBD_StdEPReq+0x1dc>
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	d032      	beq.n	800f540 <USBD_StdEPReq+0x240>
 800f4da:	e097      	b.n	800f60c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4dc:	7bbb      	ldrb	r3, [r7, #14]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d007      	beq.n	800f4f2 <USBD_StdEPReq+0x1f2>
 800f4e2:	7bbb      	ldrb	r3, [r7, #14]
 800f4e4:	2b80      	cmp	r3, #128	; 0x80
 800f4e6:	d004      	beq.n	800f4f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 fc17 	bl	800fd1e <USBD_CtlError>
                break;
 800f4f0:	e091      	b.n	800f616 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	da0b      	bge.n	800f512 <USBD_StdEPReq+0x212>
 800f4fa:	7bbb      	ldrb	r3, [r7, #14]
 800f4fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f500:	4613      	mov	r3, r2
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	4413      	add	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	3310      	adds	r3, #16
 800f50a:	687a      	ldr	r2, [r7, #4]
 800f50c:	4413      	add	r3, r2
 800f50e:	3304      	adds	r3, #4
 800f510:	e00b      	b.n	800f52a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f512:	7bbb      	ldrb	r3, [r7, #14]
 800f514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f518:	4613      	mov	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	4413      	add	r3, r2
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	4413      	add	r3, r2
 800f528:	3304      	adds	r3, #4
 800f52a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	2200      	movs	r2, #0
 800f530:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	2202      	movs	r2, #2
 800f536:	4619      	mov	r1, r3
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 fc61 	bl	800fe00 <USBD_CtlSendData>
              break;
 800f53e:	e06a      	b.n	800f616 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f544:	2b00      	cmp	r3, #0
 800f546:	da11      	bge.n	800f56c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f548:	7bbb      	ldrb	r3, [r7, #14]
 800f54a:	f003 020f 	and.w	r2, r3, #15
 800f54e:	6879      	ldr	r1, [r7, #4]
 800f550:	4613      	mov	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4413      	add	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	440b      	add	r3, r1
 800f55a:	3324      	adds	r3, #36	; 0x24
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d117      	bne.n	800f592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f562:	6839      	ldr	r1, [r7, #0]
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f000 fbda 	bl	800fd1e <USBD_CtlError>
                  break;
 800f56a:	e054      	b.n	800f616 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f56c:	7bbb      	ldrb	r3, [r7, #14]
 800f56e:	f003 020f 	and.w	r2, r3, #15
 800f572:	6879      	ldr	r1, [r7, #4]
 800f574:	4613      	mov	r3, r2
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	4413      	add	r3, r2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	440b      	add	r3, r1
 800f57e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f582:	881b      	ldrh	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d104      	bne.n	800f592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f588:	6839      	ldr	r1, [r7, #0]
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 fbc7 	bl	800fd1e <USBD_CtlError>
                  break;
 800f590:	e041      	b.n	800f616 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f596:	2b00      	cmp	r3, #0
 800f598:	da0b      	bge.n	800f5b2 <USBD_StdEPReq+0x2b2>
 800f59a:	7bbb      	ldrb	r3, [r7, #14]
 800f59c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	4413      	add	r3, r2
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	3310      	adds	r3, #16
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	e00b      	b.n	800f5ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f5b2:	7bbb      	ldrb	r3, [r7, #14]
 800f5b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	4413      	add	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	3304      	adds	r3, #4
 800f5ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f5cc:	7bbb      	ldrb	r3, [r7, #14]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d002      	beq.n	800f5d8 <USBD_StdEPReq+0x2d8>
 800f5d2:	7bbb      	ldrb	r3, [r7, #14]
 800f5d4:	2b80      	cmp	r3, #128	; 0x80
 800f5d6:	d103      	bne.n	800f5e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	601a      	str	r2, [r3, #0]
 800f5de:	e00e      	b.n	800f5fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f5e0:	7bbb      	ldrb	r3, [r7, #14]
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f003 f90b 	bl	8012800 <USBD_LL_IsStallEP>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d003      	beq.n	800f5f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	601a      	str	r2, [r3, #0]
 800f5f6:	e002      	b.n	800f5fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	2202      	movs	r2, #2
 800f602:	4619      	mov	r1, r3
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f000 fbfb 	bl	800fe00 <USBD_CtlSendData>
              break;
 800f60a:	e004      	b.n	800f616 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f60c:	6839      	ldr	r1, [r7, #0]
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 fb85 	bl	800fd1e <USBD_CtlError>
              break;
 800f614:	bf00      	nop
          }
          break;
 800f616:	e004      	b.n	800f622 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f618:	6839      	ldr	r1, [r7, #0]
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fb7f 	bl	800fd1e <USBD_CtlError>
          break;
 800f620:	bf00      	nop
      }
      break;
 800f622:	e005      	b.n	800f630 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 fb79 	bl	800fd1e <USBD_CtlError>
      break;
 800f62c:	e000      	b.n	800f630 <USBD_StdEPReq+0x330>
      break;
 800f62e:	bf00      	nop
  }

  return ret;
 800f630:	7bfb      	ldrb	r3, [r7, #15]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
	...

0800f63c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f646:	2300      	movs	r3, #0
 800f648:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f64a:	2300      	movs	r3, #0
 800f64c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f64e:	2300      	movs	r3, #0
 800f650:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	885b      	ldrh	r3, [r3, #2]
 800f656:	0a1b      	lsrs	r3, r3, #8
 800f658:	b29b      	uxth	r3, r3
 800f65a:	3b01      	subs	r3, #1
 800f65c:	2b0e      	cmp	r3, #14
 800f65e:	f200 8152 	bhi.w	800f906 <USBD_GetDescriptor+0x2ca>
 800f662:	a201      	add	r2, pc, #4	; (adr r2, 800f668 <USBD_GetDescriptor+0x2c>)
 800f664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f668:	0800f6d9 	.word	0x0800f6d9
 800f66c:	0800f6f1 	.word	0x0800f6f1
 800f670:	0800f731 	.word	0x0800f731
 800f674:	0800f907 	.word	0x0800f907
 800f678:	0800f907 	.word	0x0800f907
 800f67c:	0800f8a7 	.word	0x0800f8a7
 800f680:	0800f8d3 	.word	0x0800f8d3
 800f684:	0800f907 	.word	0x0800f907
 800f688:	0800f907 	.word	0x0800f907
 800f68c:	0800f907 	.word	0x0800f907
 800f690:	0800f907 	.word	0x0800f907
 800f694:	0800f907 	.word	0x0800f907
 800f698:	0800f907 	.word	0x0800f907
 800f69c:	0800f907 	.word	0x0800f907
 800f6a0:	0800f6a5 	.word	0x0800f6a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6aa:	69db      	ldr	r3, [r3, #28]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00b      	beq.n	800f6c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6b6:	69db      	ldr	r3, [r3, #28]
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	7c12      	ldrb	r2, [r2, #16]
 800f6bc:	f107 0108 	add.w	r1, r7, #8
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	4798      	blx	r3
 800f6c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6c6:	e126      	b.n	800f916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f000 fb27 	bl	800fd1e <USBD_CtlError>
        err++;
 800f6d0:	7afb      	ldrb	r3, [r7, #11]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	72fb      	strb	r3, [r7, #11]
      break;
 800f6d6:	e11e      	b.n	800f916 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	7c12      	ldrb	r2, [r2, #16]
 800f6e4:	f107 0108 	add.w	r1, r7, #8
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	4798      	blx	r3
 800f6ec:	60f8      	str	r0, [r7, #12]
      break;
 800f6ee:	e112      	b.n	800f916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	7c1b      	ldrb	r3, [r3, #16]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d10d      	bne.n	800f714 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f700:	f107 0208 	add.w	r2, r7, #8
 800f704:	4610      	mov	r0, r2
 800f706:	4798      	blx	r3
 800f708:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	3301      	adds	r3, #1
 800f70e:	2202      	movs	r2, #2
 800f710:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f712:	e100      	b.n	800f916 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f71c:	f107 0208 	add.w	r2, r7, #8
 800f720:	4610      	mov	r0, r2
 800f722:	4798      	blx	r3
 800f724:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	3301      	adds	r3, #1
 800f72a:	2202      	movs	r2, #2
 800f72c:	701a      	strb	r2, [r3, #0]
      break;
 800f72e:	e0f2      	b.n	800f916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	885b      	ldrh	r3, [r3, #2]
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b05      	cmp	r3, #5
 800f738:	f200 80ac 	bhi.w	800f894 <USBD_GetDescriptor+0x258>
 800f73c:	a201      	add	r2, pc, #4	; (adr r2, 800f744 <USBD_GetDescriptor+0x108>)
 800f73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f742:	bf00      	nop
 800f744:	0800f75d 	.word	0x0800f75d
 800f748:	0800f791 	.word	0x0800f791
 800f74c:	0800f7c5 	.word	0x0800f7c5
 800f750:	0800f7f9 	.word	0x0800f7f9
 800f754:	0800f82d 	.word	0x0800f82d
 800f758:	0800f861 	.word	0x0800f861
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00b      	beq.n	800f780 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	7c12      	ldrb	r2, [r2, #16]
 800f774:	f107 0108 	add.w	r1, r7, #8
 800f778:	4610      	mov	r0, r2
 800f77a:	4798      	blx	r3
 800f77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f77e:	e091      	b.n	800f8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 facb 	bl	800fd1e <USBD_CtlError>
            err++;
 800f788:	7afb      	ldrb	r3, [r7, #11]
 800f78a:	3301      	adds	r3, #1
 800f78c:	72fb      	strb	r3, [r7, #11]
          break;
 800f78e:	e089      	b.n	800f8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00b      	beq.n	800f7b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	7c12      	ldrb	r2, [r2, #16]
 800f7a8:	f107 0108 	add.w	r1, r7, #8
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	4798      	blx	r3
 800f7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7b2:	e077      	b.n	800f8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7b4:	6839      	ldr	r1, [r7, #0]
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fab1 	bl	800fd1e <USBD_CtlError>
            err++;
 800f7bc:	7afb      	ldrb	r3, [r7, #11]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f7c2:	e06f      	b.n	800f8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00b      	beq.n	800f7e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	7c12      	ldrb	r2, [r2, #16]
 800f7dc:	f107 0108 	add.w	r1, r7, #8
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
 800f7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7e6:	e05d      	b.n	800f8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fa97 	bl	800fd1e <USBD_CtlError>
            err++;
 800f7f0:	7afb      	ldrb	r3, [r7, #11]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7f6:	e055      	b.n	800f8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7fe:	691b      	ldr	r3, [r3, #16]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00b      	beq.n	800f81c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f80a:	691b      	ldr	r3, [r3, #16]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	7c12      	ldrb	r2, [r2, #16]
 800f810:	f107 0108 	add.w	r1, r7, #8
 800f814:	4610      	mov	r0, r2
 800f816:	4798      	blx	r3
 800f818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f81a:	e043      	b.n	800f8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fa7d 	bl	800fd1e <USBD_CtlError>
            err++;
 800f824:	7afb      	ldrb	r3, [r7, #11]
 800f826:	3301      	adds	r3, #1
 800f828:	72fb      	strb	r3, [r7, #11]
          break;
 800f82a:	e03b      	b.n	800f8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f832:	695b      	ldr	r3, [r3, #20]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00b      	beq.n	800f850 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f83e:	695b      	ldr	r3, [r3, #20]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	7c12      	ldrb	r2, [r2, #16]
 800f844:	f107 0108 	add.w	r1, r7, #8
 800f848:	4610      	mov	r0, r2
 800f84a:	4798      	blx	r3
 800f84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f84e:	e029      	b.n	800f8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 fa63 	bl	800fd1e <USBD_CtlError>
            err++;
 800f858:	7afb      	ldrb	r3, [r7, #11]
 800f85a:	3301      	adds	r3, #1
 800f85c:	72fb      	strb	r3, [r7, #11]
          break;
 800f85e:	e021      	b.n	800f8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f866:	699b      	ldr	r3, [r3, #24]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d00b      	beq.n	800f884 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f872:	699b      	ldr	r3, [r3, #24]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	7c12      	ldrb	r2, [r2, #16]
 800f878:	f107 0108 	add.w	r1, r7, #8
 800f87c:	4610      	mov	r0, r2
 800f87e:	4798      	blx	r3
 800f880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f882:	e00f      	b.n	800f8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 fa49 	bl	800fd1e <USBD_CtlError>
            err++;
 800f88c:	7afb      	ldrb	r3, [r7, #11]
 800f88e:	3301      	adds	r3, #1
 800f890:	72fb      	strb	r3, [r7, #11]
          break;
 800f892:	e007      	b.n	800f8a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 fa41 	bl	800fd1e <USBD_CtlError>
          err++;
 800f89c:	7afb      	ldrb	r3, [r7, #11]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f8a2:	bf00      	nop
      }
      break;
 800f8a4:	e037      	b.n	800f916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	7c1b      	ldrb	r3, [r3, #16]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d109      	bne.n	800f8c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8b6:	f107 0208 	add.w	r2, r7, #8
 800f8ba:	4610      	mov	r0, r2
 800f8bc:	4798      	blx	r3
 800f8be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8c0:	e029      	b.n	800f916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 fa2a 	bl	800fd1e <USBD_CtlError>
        err++;
 800f8ca:	7afb      	ldrb	r3, [r7, #11]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	72fb      	strb	r3, [r7, #11]
      break;
 800f8d0:	e021      	b.n	800f916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	7c1b      	ldrb	r3, [r3, #16]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d10d      	bne.n	800f8f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e2:	f107 0208 	add.w	r2, r7, #8
 800f8e6:	4610      	mov	r0, r2
 800f8e8:	4798      	blx	r3
 800f8ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	2207      	movs	r2, #7
 800f8f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8f4:	e00f      	b.n	800f916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f8f6:	6839      	ldr	r1, [r7, #0]
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 fa10 	bl	800fd1e <USBD_CtlError>
        err++;
 800f8fe:	7afb      	ldrb	r3, [r7, #11]
 800f900:	3301      	adds	r3, #1
 800f902:	72fb      	strb	r3, [r7, #11]
      break;
 800f904:	e007      	b.n	800f916 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fa08 	bl	800fd1e <USBD_CtlError>
      err++;
 800f90e:	7afb      	ldrb	r3, [r7, #11]
 800f910:	3301      	adds	r3, #1
 800f912:	72fb      	strb	r3, [r7, #11]
      break;
 800f914:	bf00      	nop
  }

  if (err != 0U)
 800f916:	7afb      	ldrb	r3, [r7, #11]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d11e      	bne.n	800f95a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	88db      	ldrh	r3, [r3, #6]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d016      	beq.n	800f952 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f924:	893b      	ldrh	r3, [r7, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00e      	beq.n	800f948 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	88da      	ldrh	r2, [r3, #6]
 800f92e:	893b      	ldrh	r3, [r7, #8]
 800f930:	4293      	cmp	r3, r2
 800f932:	bf28      	it	cs
 800f934:	4613      	movcs	r3, r2
 800f936:	b29b      	uxth	r3, r3
 800f938:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f93a:	893b      	ldrh	r3, [r7, #8]
 800f93c:	461a      	mov	r2, r3
 800f93e:	68f9      	ldr	r1, [r7, #12]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 fa5d 	bl	800fe00 <USBD_CtlSendData>
 800f946:	e009      	b.n	800f95c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f948:	6839      	ldr	r1, [r7, #0]
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f9e7 	bl	800fd1e <USBD_CtlError>
 800f950:	e004      	b.n	800f95c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 faae 	bl	800feb4 <USBD_CtlSendStatus>
 800f958:	e000      	b.n	800f95c <USBD_GetDescriptor+0x320>
    return;
 800f95a:	bf00      	nop
  }
}
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop

0800f964 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	889b      	ldrh	r3, [r3, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d131      	bne.n	800f9da <USBD_SetAddress+0x76>
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	88db      	ldrh	r3, [r3, #6]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d12d      	bne.n	800f9da <USBD_SetAddress+0x76>
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	885b      	ldrh	r3, [r3, #2]
 800f982:	2b7f      	cmp	r3, #127	; 0x7f
 800f984:	d829      	bhi.n	800f9da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	885b      	ldrh	r3, [r3, #2]
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	2b03      	cmp	r3, #3
 800f99c:	d104      	bne.n	800f9a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f99e:	6839      	ldr	r1, [r7, #0]
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f9bc 	bl	800fd1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9a6:	e01d      	b.n	800f9e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	7bfa      	ldrb	r2, [r7, #15]
 800f9ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f002 ff4f 	bl	8012858 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 fa7a 	bl	800feb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f9c0:	7bfb      	ldrb	r3, [r7, #15]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d004      	beq.n	800f9d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2202      	movs	r2, #2
 800f9ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9ce:	e009      	b.n	800f9e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9d8:	e004      	b.n	800f9e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f9da:	6839      	ldr	r1, [r7, #0]
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 f99e 	bl	800fd1e <USBD_CtlError>
  }
}
 800f9e2:	bf00      	nop
 800f9e4:	bf00      	nop
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	885b      	ldrh	r3, [r3, #2]
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	4b4e      	ldr	r3, [pc, #312]	; (800fb3c <USBD_SetConfig+0x150>)
 800fa02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fa04:	4b4d      	ldr	r3, [pc, #308]	; (800fb3c <USBD_SetConfig+0x150>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d905      	bls.n	800fa18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fa0c:	6839      	ldr	r1, [r7, #0]
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 f985 	bl	800fd1e <USBD_CtlError>
    return USBD_FAIL;
 800fa14:	2303      	movs	r3, #3
 800fa16:	e08c      	b.n	800fb32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b02      	cmp	r3, #2
 800fa22:	d002      	beq.n	800fa2a <USBD_SetConfig+0x3e>
 800fa24:	2b03      	cmp	r3, #3
 800fa26:	d029      	beq.n	800fa7c <USBD_SetConfig+0x90>
 800fa28:	e075      	b.n	800fb16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fa2a:	4b44      	ldr	r3, [pc, #272]	; (800fb3c <USBD_SetConfig+0x150>)
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d020      	beq.n	800fa74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fa32:	4b42      	ldr	r3, [pc, #264]	; (800fb3c <USBD_SetConfig+0x150>)
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa3c:	4b3f      	ldr	r3, [pc, #252]	; (800fb3c <USBD_SetConfig+0x150>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	4619      	mov	r1, r3
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7fe ffbd 	bl	800e9c2 <USBD_SetClassConfig>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fa4c:	7bfb      	ldrb	r3, [r7, #15]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d008      	beq.n	800fa64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f000 f962 	bl	800fd1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2202      	movs	r2, #2
 800fa5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa62:	e065      	b.n	800fb30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 fa25 	bl	800feb4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2203      	movs	r2, #3
 800fa6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa72:	e05d      	b.n	800fb30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 fa1d 	bl	800feb4 <USBD_CtlSendStatus>
      break;
 800fa7a:	e059      	b.n	800fb30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fa7c:	4b2f      	ldr	r3, [pc, #188]	; (800fb3c <USBD_SetConfig+0x150>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d112      	bne.n	800faaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2202      	movs	r2, #2
 800fa88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fa8c:	4b2b      	ldr	r3, [pc, #172]	; (800fb3c <USBD_SetConfig+0x150>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	461a      	mov	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa96:	4b29      	ldr	r3, [pc, #164]	; (800fb3c <USBD_SetConfig+0x150>)
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7fe ffac 	bl	800e9fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fa06 	bl	800feb4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800faa8:	e042      	b.n	800fb30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800faaa:	4b24      	ldr	r3, [pc, #144]	; (800fb3c <USBD_SetConfig+0x150>)
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	461a      	mov	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d02a      	beq.n	800fb0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	4619      	mov	r1, r3
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f7fe ff9a 	bl	800e9fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fac6:	4b1d      	ldr	r3, [pc, #116]	; (800fb3c <USBD_SetConfig+0x150>)
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	461a      	mov	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fad0:	4b1a      	ldr	r3, [pc, #104]	; (800fb3c <USBD_SetConfig+0x150>)
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7fe ff73 	bl	800e9c2 <USBD_SetClassConfig>
 800fadc:	4603      	mov	r3, r0
 800fade:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00f      	beq.n	800fb06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fae6:	6839      	ldr	r1, [r7, #0]
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f918 	bl	800fd1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7fe ff7f 	bl	800e9fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2202      	movs	r2, #2
 800fb00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fb04:	e014      	b.n	800fb30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 f9d4 	bl	800feb4 <USBD_CtlSendStatus>
      break;
 800fb0c:	e010      	b.n	800fb30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f9d0 	bl	800feb4 <USBD_CtlSendStatus>
      break;
 800fb14:	e00c      	b.n	800fb30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f900 	bl	800fd1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb1e:	4b07      	ldr	r3, [pc, #28]	; (800fb3c <USBD_SetConfig+0x150>)
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	4619      	mov	r1, r3
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7fe ff68 	bl	800e9fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fb2a:	2303      	movs	r3, #3
 800fb2c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb2e:	bf00      	nop
  }

  return ret;
 800fb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3710      	adds	r7, #16
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	200027d8 	.word	0x200027d8

0800fb40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	88db      	ldrh	r3, [r3, #6]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d004      	beq.n	800fb5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fb52:	6839      	ldr	r1, [r7, #0]
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f8e2 	bl	800fd1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fb5a:	e023      	b.n	800fba4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	2b02      	cmp	r3, #2
 800fb66:	dc02      	bgt.n	800fb6e <USBD_GetConfig+0x2e>
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	dc03      	bgt.n	800fb74 <USBD_GetConfig+0x34>
 800fb6c:	e015      	b.n	800fb9a <USBD_GetConfig+0x5a>
 800fb6e:	2b03      	cmp	r3, #3
 800fb70:	d00b      	beq.n	800fb8a <USBD_GetConfig+0x4a>
 800fb72:	e012      	b.n	800fb9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	2201      	movs	r2, #1
 800fb80:	4619      	mov	r1, r3
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f93c 	bl	800fe00 <USBD_CtlSendData>
        break;
 800fb88:	e00c      	b.n	800fba4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	2201      	movs	r2, #1
 800fb90:	4619      	mov	r1, r3
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f934 	bl	800fe00 <USBD_CtlSendData>
        break;
 800fb98:	e004      	b.n	800fba4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fb9a:	6839      	ldr	r1, [r7, #0]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 f8be 	bl	800fd1e <USBD_CtlError>
        break;
 800fba2:	bf00      	nop
}
 800fba4:	bf00      	nop
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	d81e      	bhi.n	800fc02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	88db      	ldrh	r3, [r3, #6]
 800fbc8:	2b02      	cmp	r3, #2
 800fbca:	d004      	beq.n	800fbd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fbcc:	6839      	ldr	r1, [r7, #0]
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f000 f8a5 	bl	800fd1e <USBD_CtlError>
        break;
 800fbd4:	e01a      	b.n	800fc0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2201      	movs	r2, #1
 800fbda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d005      	beq.n	800fbf2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	68db      	ldr	r3, [r3, #12]
 800fbea:	f043 0202 	orr.w	r2, r3, #2
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	330c      	adds	r3, #12
 800fbf6:	2202      	movs	r2, #2
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f900 	bl	800fe00 <USBD_CtlSendData>
      break;
 800fc00:	e004      	b.n	800fc0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fc02:	6839      	ldr	r1, [r7, #0]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f000 f88a 	bl	800fd1e <USBD_CtlError>
      break;
 800fc0a:	bf00      	nop
  }
}
 800fc0c:	bf00      	nop
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	885b      	ldrh	r3, [r3, #2]
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d107      	bne.n	800fc36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 f940 	bl	800feb4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fc34:	e013      	b.n	800fc5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	885b      	ldrh	r3, [r3, #2]
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d10b      	bne.n	800fc56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	889b      	ldrh	r3, [r3, #4]
 800fc42:	0a1b      	lsrs	r3, r3, #8
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 f930 	bl	800feb4 <USBD_CtlSendStatus>
}
 800fc54:	e003      	b.n	800fc5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fc56:	6839      	ldr	r1, [r7, #0]
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f000 f860 	bl	800fd1e <USBD_CtlError>
}
 800fc5e:	bf00      	nop
 800fc60:	3708      	adds	r7, #8
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b082      	sub	sp, #8
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
 800fc6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d80b      	bhi.n	800fc96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	885b      	ldrh	r3, [r3, #2]
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d10c      	bne.n	800fca0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f910 	bl	800feb4 <USBD_CtlSendStatus>
      }
      break;
 800fc94:	e004      	b.n	800fca0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fc96:	6839      	ldr	r1, [r7, #0]
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f000 f840 	bl	800fd1e <USBD_CtlError>
      break;
 800fc9e:	e000      	b.n	800fca2 <USBD_ClrFeature+0x3c>
      break;
 800fca0:	bf00      	nop
  }
}
 800fca2:	bf00      	nop
 800fca4:	3708      	adds	r7, #8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}

0800fcaa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fcaa:	b580      	push	{r7, lr}
 800fcac:	b084      	sub	sp, #16
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	6078      	str	r0, [r7, #4]
 800fcb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	781a      	ldrb	r2, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	781a      	ldrb	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f7ff fa17 	bl	800f108 <SWAPBYTE>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	461a      	mov	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3301      	adds	r3, #1
 800fce6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	3301      	adds	r3, #1
 800fcec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	f7ff fa0a 	bl	800f108 <SWAPBYTE>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	3301      	adds	r3, #1
 800fd06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f7ff f9fd 	bl	800f108 <SWAPBYTE>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	461a      	mov	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	80da      	strh	r2, [r3, #6]
}
 800fd16:	bf00      	nop
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b082      	sub	sp, #8
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
 800fd26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd28:	2180      	movs	r1, #128	; 0x80
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f002 fd2a 	bl	8012784 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fd30:	2100      	movs	r1, #0
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f002 fd26 	bl	8012784 <USBD_LL_StallEP>
}
 800fd38:	bf00      	nop
 800fd3a:	3708      	adds	r7, #8
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d036      	beq.n	800fdc4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fd5a:	6938      	ldr	r0, [r7, #16]
 800fd5c:	f000 f836 	bl	800fdcc <USBD_GetLen>
 800fd60:	4603      	mov	r3, r0
 800fd62:	3301      	adds	r3, #1
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fd6e:	7dfb      	ldrb	r3, [r7, #23]
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	4413      	add	r3, r2
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	7812      	ldrb	r2, [r2, #0]
 800fd78:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd7a:	7dfb      	ldrb	r3, [r7, #23]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fd80:	7dfb      	ldrb	r3, [r7, #23]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	4413      	add	r3, r2
 800fd86:	2203      	movs	r2, #3
 800fd88:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd8a:	7dfb      	ldrb	r3, [r7, #23]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fd90:	e013      	b.n	800fdba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	68ba      	ldr	r2, [r7, #8]
 800fd96:	4413      	add	r3, r2
 800fd98:	693a      	ldr	r2, [r7, #16]
 800fd9a:	7812      	ldrb	r2, [r2, #0]
 800fd9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	3301      	adds	r3, #1
 800fda2:	613b      	str	r3, [r7, #16]
    idx++;
 800fda4:	7dfb      	ldrb	r3, [r7, #23]
 800fda6:	3301      	adds	r3, #1
 800fda8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fdaa:	7dfb      	ldrb	r3, [r7, #23]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	4413      	add	r3, r2
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	701a      	strb	r2, [r3, #0]
    idx++;
 800fdb4:	7dfb      	ldrb	r3, [r7, #23]
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d1e7      	bne.n	800fd92 <USBD_GetString+0x52>
 800fdc2:	e000      	b.n	800fdc6 <USBD_GetString+0x86>
    return;
 800fdc4:	bf00      	nop
  }
}
 800fdc6:	3718      	adds	r7, #24
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b085      	sub	sp, #20
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fddc:	e005      	b.n	800fdea <USBD_GetLen+0x1e>
  {
    len++;
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	3301      	adds	r3, #1
 800fde2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	3301      	adds	r3, #1
 800fde8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1f5      	bne.n	800fdde <USBD_GetLen+0x12>
  }

  return len;
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3714      	adds	r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	60b9      	str	r1, [r7, #8]
 800fe0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2202      	movs	r2, #2
 800fe10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	68ba      	ldr	r2, [r7, #8]
 800fe24:	2100      	movs	r1, #0
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f002 fd35 	bl	8012896 <USBD_LL_Transmit>

  return USBD_OK;
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3710      	adds	r7, #16
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fe36:	b580      	push	{r7, lr}
 800fe38:	b084      	sub	sp, #16
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	60f8      	str	r0, [r7, #12]
 800fe3e:	60b9      	str	r1, [r7, #8]
 800fe40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	68ba      	ldr	r2, [r7, #8]
 800fe46:	2100      	movs	r1, #0
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f002 fd24 	bl	8012896 <USBD_LL_Transmit>

  return USBD_OK;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2203      	movs	r2, #3
 800fe68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	2100      	movs	r1, #0
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f002 fd28 	bl	80128d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b084      	sub	sp, #16
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	60f8      	str	r0, [r7, #12]
 800fe9a:	60b9      	str	r1, [r7, #8]
 800fe9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	68ba      	ldr	r2, [r7, #8]
 800fea2:	2100      	movs	r1, #0
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	f002 fd17 	bl	80128d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800feaa:	2300      	movs	r3, #0
}
 800feac:	4618      	mov	r0, r3
 800feae:	3710      	adds	r7, #16
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2204      	movs	r2, #4
 800fec0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fec4:	2300      	movs	r3, #0
 800fec6:	2200      	movs	r2, #0
 800fec8:	2100      	movs	r1, #0
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f002 fce3 	bl	8012896 <USBD_LL_Transmit>

  return USBD_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800feda:	b580      	push	{r7, lr}
 800fedc:	b082      	sub	sp, #8
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2205      	movs	r2, #5
 800fee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800feea:	2300      	movs	r3, #0
 800feec:	2200      	movs	r2, #0
 800feee:	2100      	movs	r1, #0
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f002 fcf1 	bl	80128d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ff00:	b590      	push	{r4, r7, lr}
 800ff02:	b089      	sub	sp, #36	; 0x24
 800ff04:	af04      	add	r7, sp, #16
 800ff06:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ff08:	2301      	movs	r3, #1
 800ff0a:	2202      	movs	r2, #2
 800ff0c:	2102      	movs	r1, #2
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 fc85 	bl	801081e <USBH_FindInterface>
 800ff14:	4603      	mov	r3, r0
 800ff16:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ff18:	7bfb      	ldrb	r3, [r7, #15]
 800ff1a:	2bff      	cmp	r3, #255	; 0xff
 800ff1c:	d002      	beq.n	800ff24 <USBH_CDC_InterfaceInit+0x24>
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d901      	bls.n	800ff28 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ff24:	2302      	movs	r3, #2
 800ff26:	e13d      	b.n	80101a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fc5a 	bl	80107e6 <USBH_SelectInterface>
 800ff32:	4603      	mov	r3, r0
 800ff34:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ff36:	7bbb      	ldrb	r3, [r7, #14]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d001      	beq.n	800ff40 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ff3c:	2302      	movs	r3, #2
 800ff3e:	e131      	b.n	80101a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ff46:	2050      	movs	r0, #80	; 0x50
 800ff48:	f003 f8bc 	bl	80130c4 <malloc>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ff56:	69db      	ldr	r3, [r3, #28]
 800ff58:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d101      	bne.n	800ff64 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ff60:	2302      	movs	r3, #2
 800ff62:	e11f      	b.n	80101a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ff64:	2250      	movs	r2, #80	; 0x50
 800ff66:	2100      	movs	r1, #0
 800ff68:	68b8      	ldr	r0, [r7, #8]
 800ff6a:	f003 f8bb 	bl	80130e4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	211a      	movs	r1, #26
 800ff74:	fb01 f303 	mul.w	r3, r1, r3
 800ff78:	4413      	add	r3, r2
 800ff7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	b25b      	sxtb	r3, r3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	da15      	bge.n	800ffb2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ff86:	7bfb      	ldrb	r3, [r7, #15]
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	211a      	movs	r1, #26
 800ff8c:	fb01 f303 	mul.w	r3, r1, r3
 800ff90:	4413      	add	r3, r2
 800ff92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ff96:	781a      	ldrb	r2, [r3, #0]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	211a      	movs	r1, #26
 800ffa2:	fb01 f303 	mul.w	r3, r1, r3
 800ffa6:	4413      	add	r3, r2
 800ffa8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ffac:	881a      	ldrh	r2, [r3, #0]
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	785b      	ldrb	r3, [r3, #1]
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f001 ff26 	bl	8011e0a <USBH_AllocPipe>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	7819      	ldrb	r1, [r3, #0]
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	7858      	ldrb	r0, [r3, #1]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	8952      	ldrh	r2, [r2, #10]
 800ffde:	9202      	str	r2, [sp, #8]
 800ffe0:	2203      	movs	r2, #3
 800ffe2:	9201      	str	r2, [sp, #4]
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	4623      	mov	r3, r4
 800ffe8:	4602      	mov	r2, r0
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f001 fede 	bl	8011dac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	2200      	movs	r2, #0
 800fff6:	4619      	mov	r1, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f002 ffb5 	bl	8012f68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800fffe:	2300      	movs	r3, #0
 8010000:	2200      	movs	r2, #0
 8010002:	210a      	movs	r1, #10
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 fc0a 	bl	801081e <USBH_FindInterface>
 801000a:	4603      	mov	r3, r0
 801000c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801000e:	7bfb      	ldrb	r3, [r7, #15]
 8010010:	2bff      	cmp	r3, #255	; 0xff
 8010012:	d002      	beq.n	801001a <USBH_CDC_InterfaceInit+0x11a>
 8010014:	7bfb      	ldrb	r3, [r7, #15]
 8010016:	2b01      	cmp	r3, #1
 8010018:	d901      	bls.n	801001e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801001a:	2302      	movs	r3, #2
 801001c:	e0c2      	b.n	80101a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801001e:	7bfb      	ldrb	r3, [r7, #15]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	211a      	movs	r1, #26
 8010024:	fb01 f303 	mul.w	r3, r1, r3
 8010028:	4413      	add	r3, r2
 801002a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	b25b      	sxtb	r3, r3
 8010032:	2b00      	cmp	r3, #0
 8010034:	da16      	bge.n	8010064 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010036:	7bfb      	ldrb	r3, [r7, #15]
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	211a      	movs	r1, #26
 801003c:	fb01 f303 	mul.w	r3, r1, r3
 8010040:	4413      	add	r3, r2
 8010042:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010046:	781a      	ldrb	r2, [r3, #0]
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801004c:	7bfb      	ldrb	r3, [r7, #15]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	211a      	movs	r1, #26
 8010052:	fb01 f303 	mul.w	r3, r1, r3
 8010056:	4413      	add	r3, r2
 8010058:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801005c:	881a      	ldrh	r2, [r3, #0]
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	835a      	strh	r2, [r3, #26]
 8010062:	e015      	b.n	8010090 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010064:	7bfb      	ldrb	r3, [r7, #15]
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	211a      	movs	r1, #26
 801006a:	fb01 f303 	mul.w	r3, r1, r3
 801006e:	4413      	add	r3, r2
 8010070:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010074:	781a      	ldrb	r2, [r3, #0]
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801007a:	7bfb      	ldrb	r3, [r7, #15]
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	211a      	movs	r1, #26
 8010080:	fb01 f303 	mul.w	r3, r1, r3
 8010084:	4413      	add	r3, r2
 8010086:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801008a:	881a      	ldrh	r2, [r3, #0]
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	211a      	movs	r1, #26
 8010096:	fb01 f303 	mul.w	r3, r1, r3
 801009a:	4413      	add	r3, r2
 801009c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	b25b      	sxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	da16      	bge.n	80100d6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	211a      	movs	r1, #26
 80100ae:	fb01 f303 	mul.w	r3, r1, r3
 80100b2:	4413      	add	r3, r2
 80100b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80100b8:	781a      	ldrb	r2, [r3, #0]
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80100be:	7bfb      	ldrb	r3, [r7, #15]
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	211a      	movs	r1, #26
 80100c4:	fb01 f303 	mul.w	r3, r1, r3
 80100c8:	4413      	add	r3, r2
 80100ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80100ce:	881a      	ldrh	r2, [r3, #0]
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	835a      	strh	r2, [r3, #26]
 80100d4:	e015      	b.n	8010102 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80100d6:	7bfb      	ldrb	r3, [r7, #15]
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	211a      	movs	r1, #26
 80100dc:	fb01 f303 	mul.w	r3, r1, r3
 80100e0:	4413      	add	r3, r2
 80100e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80100e6:	781a      	ldrb	r2, [r3, #0]
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	211a      	movs	r1, #26
 80100f2:	fb01 f303 	mul.w	r3, r1, r3
 80100f6:	4413      	add	r3, r2
 80100f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80100fc:	881a      	ldrh	r2, [r3, #0]
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	7b9b      	ldrb	r3, [r3, #14]
 8010106:	4619      	mov	r1, r3
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f001 fe7e 	bl	8011e0a <USBH_AllocPipe>
 801010e:	4603      	mov	r3, r0
 8010110:	461a      	mov	r2, r3
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	7bdb      	ldrb	r3, [r3, #15]
 801011a:	4619      	mov	r1, r3
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f001 fe74 	bl	8011e0a <USBH_AllocPipe>
 8010122:	4603      	mov	r3, r0
 8010124:	461a      	mov	r2, r3
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	7b59      	ldrb	r1, [r3, #13]
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	7b98      	ldrb	r0, [r3, #14]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801013e:	68ba      	ldr	r2, [r7, #8]
 8010140:	8b12      	ldrh	r2, [r2, #24]
 8010142:	9202      	str	r2, [sp, #8]
 8010144:	2202      	movs	r2, #2
 8010146:	9201      	str	r2, [sp, #4]
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	4623      	mov	r3, r4
 801014c:	4602      	mov	r2, r0
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f001 fe2c 	bl	8011dac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	7b19      	ldrb	r1, [r3, #12]
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	7bd8      	ldrb	r0, [r3, #15]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	8b52      	ldrh	r2, [r2, #26]
 801016c:	9202      	str	r2, [sp, #8]
 801016e:	2202      	movs	r2, #2
 8010170:	9201      	str	r2, [sp, #4]
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	4623      	mov	r3, r4
 8010176:	4602      	mov	r2, r0
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f001 fe17 	bl	8011dac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	2200      	movs	r2, #0
 8010182:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	7b5b      	ldrb	r3, [r3, #13]
 801018a:	2200      	movs	r2, #0
 801018c:	4619      	mov	r1, r3
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f002 feea 	bl	8012f68 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	7b1b      	ldrb	r3, [r3, #12]
 8010198:	2200      	movs	r2, #0
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f002 fee3 	bl	8012f68 <USBH_LL_SetToggle>

  return USBH_OK;
 80101a2:	2300      	movs	r3, #0
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3714      	adds	r7, #20
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd90      	pop	{r4, r7, pc}

080101ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80101ba:	69db      	ldr	r3, [r3, #28]
 80101bc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00e      	beq.n	80101e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	4619      	mov	r1, r3
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f001 fe0c 	bl	8011dea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	4619      	mov	r1, r3
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f001 fe37 	bl	8011e4c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2200      	movs	r2, #0
 80101e2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	7b1b      	ldrb	r3, [r3, #12]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00e      	beq.n	801020a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	7b1b      	ldrb	r3, [r3, #12]
 80101f0:	4619      	mov	r1, r3
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f001 fdf9 	bl	8011dea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	7b1b      	ldrb	r3, [r3, #12]
 80101fc:	4619      	mov	r1, r3
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f001 fe24 	bl	8011e4c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2200      	movs	r2, #0
 8010208:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	7b5b      	ldrb	r3, [r3, #13]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d00e      	beq.n	8010230 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	7b5b      	ldrb	r3, [r3, #13]
 8010216:	4619      	mov	r1, r3
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f001 fde6 	bl	8011dea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	7b5b      	ldrb	r3, [r3, #13]
 8010222:	4619      	mov	r1, r3
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f001 fe11 	bl	8011e4c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2200      	movs	r2, #0
 801022e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010236:	69db      	ldr	r3, [r3, #28]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00b      	beq.n	8010254 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010242:	69db      	ldr	r3, [r3, #28]
 8010244:	4618      	mov	r0, r3
 8010246:	f002 ff45 	bl	80130d4 <free>
    phost->pActiveClass->pData = 0U;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010250:	2200      	movs	r2, #0
 8010252:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b084      	sub	sp, #16
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801026c:	69db      	ldr	r3, [r3, #28]
 801026e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	3340      	adds	r3, #64	; 0x40
 8010274:	4619      	mov	r1, r3
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 f8b1 	bl	80103de <GetLineCoding>
 801027c:	4603      	mov	r3, r0
 801027e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8010280:	7afb      	ldrb	r3, [r7, #11]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d105      	bne.n	8010292 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801028c:	2102      	movs	r1, #2
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8010292:	7afb      	ldrb	r3, [r7, #11]
}
 8010294:	4618      	mov	r0, r3
 8010296:	3710      	adds	r7, #16
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80102a4:	2301      	movs	r3, #1
 80102a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80102a8:	2300      	movs	r3, #0
 80102aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80102b2:	69db      	ldr	r3, [r3, #28]
 80102b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80102bc:	2b04      	cmp	r3, #4
 80102be:	d877      	bhi.n	80103b0 <USBH_CDC_Process+0x114>
 80102c0:	a201      	add	r2, pc, #4	; (adr r2, 80102c8 <USBH_CDC_Process+0x2c>)
 80102c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c6:	bf00      	nop
 80102c8:	080102dd 	.word	0x080102dd
 80102cc:	080102e3 	.word	0x080102e3
 80102d0:	08010313 	.word	0x08010313
 80102d4:	08010387 	.word	0x08010387
 80102d8:	08010395 	.word	0x08010395
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80102dc:	2300      	movs	r3, #0
 80102de:	73fb      	strb	r3, [r7, #15]
      break;
 80102e0:	e06d      	b.n	80103be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102e6:	4619      	mov	r1, r3
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 f897 	bl	801041c <SetLineCoding>
 80102ee:	4603      	mov	r3, r0
 80102f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80102f2:	7bbb      	ldrb	r3, [r7, #14]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d104      	bne.n	8010302 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	2202      	movs	r2, #2
 80102fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010300:	e058      	b.n	80103b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8010302:	7bbb      	ldrb	r3, [r7, #14]
 8010304:	2b01      	cmp	r3, #1
 8010306:	d055      	beq.n	80103b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	2204      	movs	r2, #4
 801030c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010310:	e050      	b.n	80103b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	3340      	adds	r3, #64	; 0x40
 8010316:	4619      	mov	r1, r3
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f860 	bl	80103de <GetLineCoding>
 801031e:	4603      	mov	r3, r0
 8010320:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010322:	7bbb      	ldrb	r3, [r7, #14]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d126      	bne.n	8010376 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2200      	movs	r2, #0
 801032c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801033a:	791b      	ldrb	r3, [r3, #4]
 801033c:	429a      	cmp	r2, r3
 801033e:	d13b      	bne.n	80103b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801034a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 801034c:	429a      	cmp	r2, r3
 801034e:	d133      	bne.n	80103b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801035a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 801035c:	429a      	cmp	r2, r3
 801035e:	d12b      	bne.n	80103b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010368:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801036a:	429a      	cmp	r2, r3
 801036c:	d124      	bne.n	80103b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 f958 	bl	8010624 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010374:	e020      	b.n	80103b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8010376:	7bbb      	ldrb	r3, [r7, #14]
 8010378:	2b01      	cmp	r3, #1
 801037a:	d01d      	beq.n	80103b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	2204      	movs	r2, #4
 8010380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010384:	e018      	b.n	80103b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 f867 	bl	801045a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 f8da 	bl	8010546 <CDC_ProcessReception>
      break;
 8010392:	e014      	b.n	80103be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010394:	2100      	movs	r1, #0
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f001 f80f 	bl	80113ba <USBH_ClrFeature>
 801039c:	4603      	mov	r3, r0
 801039e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80103a0:	7bbb      	ldrb	r3, [r7, #14]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d10a      	bne.n	80103bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80103ae:	e005      	b.n	80103bc <USBH_CDC_Process+0x120>

    default:
      break;
 80103b0:	bf00      	nop
 80103b2:	e004      	b.n	80103be <USBH_CDC_Process+0x122>
      break;
 80103b4:	bf00      	nop
 80103b6:	e002      	b.n	80103be <USBH_CDC_Process+0x122>
      break;
 80103b8:	bf00      	nop
 80103ba:	e000      	b.n	80103be <USBH_CDC_Process+0x122>
      break;
 80103bc:	bf00      	nop

  }

  return status;
 80103be:	7bfb      	ldrb	r3, [r7, #15]
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3710      	adds	r7, #16
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80103d0:	2300      	movs	r3, #0
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b082      	sub	sp, #8
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	22a1      	movs	r2, #161	; 0xa1
 80103ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2221      	movs	r2, #33	; 0x21
 80103f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2207      	movs	r2, #7
 8010404:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2207      	movs	r2, #7
 801040a:	4619      	mov	r1, r3
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f001 fa7b 	bl	8011908 <USBH_CtlReq>
 8010412:	4603      	mov	r3, r0
}
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2221      	movs	r2, #33	; 0x21
 801042a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2220      	movs	r2, #32
 8010430:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2200      	movs	r2, #0
 8010436:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2207      	movs	r2, #7
 8010442:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	2207      	movs	r2, #7
 8010448:	4619      	mov	r1, r3
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f001 fa5c 	bl	8011908 <USBH_CtlReq>
 8010450:	4603      	mov	r3, r0
}
 8010452:	4618      	mov	r0, r3
 8010454:	3708      	adds	r7, #8
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801045a:	b580      	push	{r7, lr}
 801045c:	b086      	sub	sp, #24
 801045e:	af02      	add	r7, sp, #8
 8010460:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010468:	69db      	ldr	r3, [r3, #28]
 801046a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801046c:	2300      	movs	r3, #0
 801046e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010476:	2b01      	cmp	r3, #1
 8010478:	d002      	beq.n	8010480 <CDC_ProcessTransmission+0x26>
 801047a:	2b02      	cmp	r3, #2
 801047c:	d023      	beq.n	80104c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 801047e:	e05e      	b.n	801053e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	8b12      	ldrh	r2, [r2, #24]
 8010488:	4293      	cmp	r3, r2
 801048a:	d90b      	bls.n	80104a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	69d9      	ldr	r1, [r3, #28]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	8b1a      	ldrh	r2, [r3, #24]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	7b5b      	ldrb	r3, [r3, #13]
 8010498:	2001      	movs	r0, #1
 801049a:	9000      	str	r0, [sp, #0]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f001 fc42 	bl	8011d26 <USBH_BulkSendData>
 80104a2:	e00b      	b.n	80104bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	7b5b      	ldrb	r3, [r3, #13]
 80104b2:	2001      	movs	r0, #1
 80104b4:	9000      	str	r0, [sp, #0]
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f001 fc35 	bl	8011d26 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2202      	movs	r2, #2
 80104c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80104c4:	e03b      	b.n	801053e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	7b5b      	ldrb	r3, [r3, #13]
 80104ca:	4619      	mov	r1, r3
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f002 fd21 	bl	8012f14 <USBH_LL_GetURBState>
 80104d2:	4603      	mov	r3, r0
 80104d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80104d6:	7afb      	ldrb	r3, [r7, #11]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d128      	bne.n	801052e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	8b12      	ldrh	r2, [r2, #24]
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d90e      	bls.n	8010506 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ec:	68fa      	ldr	r2, [r7, #12]
 80104ee:	8b12      	ldrh	r2, [r2, #24]
 80104f0:	1a9a      	subs	r2, r3, r2
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	69db      	ldr	r3, [r3, #28]
 80104fa:	68fa      	ldr	r2, [r7, #12]
 80104fc:	8b12      	ldrh	r2, [r2, #24]
 80104fe:	441a      	add	r2, r3
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	61da      	str	r2, [r3, #28]
 8010504:	e002      	b.n	801050c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2200      	movs	r2, #0
 801050a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010510:	2b00      	cmp	r3, #0
 8010512:	d004      	beq.n	801051e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2201      	movs	r2, #1
 8010518:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801051c:	e00e      	b.n	801053c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2200      	movs	r2, #0
 8010522:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f868 	bl	80105fc <USBH_CDC_TransmitCallback>
      break;
 801052c:	e006      	b.n	801053c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 801052e:	7afb      	ldrb	r3, [r7, #11]
 8010530:	2b02      	cmp	r3, #2
 8010532:	d103      	bne.n	801053c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801053c:	bf00      	nop
  }
}
 801053e:	bf00      	nop
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b086      	sub	sp, #24
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010554:	69db      	ldr	r3, [r3, #28]
 8010556:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010558:	2300      	movs	r3, #0
 801055a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010562:	2b03      	cmp	r3, #3
 8010564:	d002      	beq.n	801056c <CDC_ProcessReception+0x26>
 8010566:	2b04      	cmp	r3, #4
 8010568:	d00e      	beq.n	8010588 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 801056a:	e043      	b.n	80105f4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	6a19      	ldr	r1, [r3, #32]
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	8b5a      	ldrh	r2, [r3, #26]
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	7b1b      	ldrb	r3, [r3, #12]
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f001 fbf9 	bl	8011d70 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	2204      	movs	r2, #4
 8010582:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010586:	e035      	b.n	80105f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	7b1b      	ldrb	r3, [r3, #12]
 801058c:	4619      	mov	r1, r3
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f002 fcc0 	bl	8012f14 <USBH_LL_GetURBState>
 8010594:	4603      	mov	r3, r0
 8010596:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010598:	7cfb      	ldrb	r3, [r7, #19]
 801059a:	2b01      	cmp	r3, #1
 801059c:	d129      	bne.n	80105f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	7b1b      	ldrb	r3, [r3, #12]
 80105a2:	4619      	mov	r1, r3
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f002 fc23 	bl	8012df0 <USBH_LL_GetLastXferSize>
 80105aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105b0:	68fa      	ldr	r2, [r7, #12]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d016      	beq.n	80105e4 <CDC_ProcessReception+0x9e>
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	8b5b      	ldrh	r3, [r3, #26]
 80105ba:	461a      	mov	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	4293      	cmp	r3, r2
 80105c0:	d910      	bls.n	80105e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	1ad2      	subs	r2, r2, r3
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	6a1a      	ldr	r2, [r3, #32]
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	441a      	add	r2, r3
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	2203      	movs	r2, #3
 80105de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80105e2:	e006      	b.n	80105f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f80f 	bl	8010610 <USBH_CDC_ReceiveCallback>
      break;
 80105f2:	bf00      	nop
  }
}
 80105f4:	bf00      	nop
 80105f6:	3718      	adds	r7, #24
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010604:	bf00      	nop
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010618:	bf00      	nop
 801061a:	370c      	adds	r7, #12
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr

08010624 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010624:	b480      	push	{r7}
 8010626:	b083      	sub	sp, #12
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801062c:	bf00      	nop
 801062e:	370c      	adds	r7, #12
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	4613      	mov	r3, r2
 8010644:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d101      	bne.n	8010650 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 801064c:	2302      	movs	r3, #2
 801064e:	e029      	b.n	80106a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	79fa      	ldrb	r2, [r7, #7]
 8010654:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2200      	movs	r2, #0
 801065c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2200      	movs	r2, #0
 8010664:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f000 f81f 	bl	80106ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2200      	movs	r2, #0
 8010672:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2200      	movs	r2, #0
 8010682:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2200      	movs	r2, #0
 801068a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d003      	beq.n	801069c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	68ba      	ldr	r2, [r7, #8]
 8010698:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f002 faf3 	bl	8012c88 <USBH_LL_Init>

  return USBH_OK;
 80106a2:	2300      	movs	r3, #0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3710      	adds	r7, #16
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}

080106ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80106b4:	2300      	movs	r3, #0
 80106b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80106b8:	2300      	movs	r3, #0
 80106ba:	60fb      	str	r3, [r7, #12]
 80106bc:	e009      	b.n	80106d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	33e0      	adds	r3, #224	; 0xe0
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	4413      	add	r3, r2
 80106c8:	2200      	movs	r2, #0
 80106ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	3301      	adds	r3, #1
 80106d0:	60fb      	str	r3, [r7, #12]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2b0f      	cmp	r3, #15
 80106d6:	d9f2      	bls.n	80106be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80106d8:	2300      	movs	r3, #0
 80106da:	60fb      	str	r3, [r7, #12]
 80106dc:	e009      	b.n	80106f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	4413      	add	r3, r2
 80106e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80106e8:	2200      	movs	r2, #0
 80106ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	3301      	adds	r3, #1
 80106f0:	60fb      	str	r3, [r7, #12]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106f8:	d3f1      	bcc.n	80106de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2200      	movs	r2, #0
 8010704:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2201      	movs	r2, #1
 801070a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2201      	movs	r2, #1
 8010718:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2240      	movs	r2, #64	; 0x40
 801071e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2200      	movs	r2, #0
 8010724:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2201      	movs	r2, #1
 8010732:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	331c      	adds	r3, #28
 801074a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801074e:	2100      	movs	r1, #0
 8010750:	4618      	mov	r0, r3
 8010752:	f002 fcc7 	bl	80130e4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010760:	2100      	movs	r1, #0
 8010762:	4618      	mov	r0, r3
 8010764:	f002 fcbe 	bl	80130e4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f203 3326 	addw	r3, r3, #806	; 0x326
 801076e:	2212      	movs	r2, #18
 8010770:	2100      	movs	r1, #0
 8010772:	4618      	mov	r0, r3
 8010774:	f002 fcb6 	bl	80130e4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801077e:	223e      	movs	r2, #62	; 0x3e
 8010780:	2100      	movs	r1, #0
 8010782:	4618      	mov	r0, r3
 8010784:	f002 fcae 	bl	80130e4 <memset>

  return USBH_OK;
 8010788:	2300      	movs	r3, #0
}
 801078a:	4618      	mov	r0, r3
 801078c:	3710      	adds	r7, #16
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010792:	b480      	push	{r7}
 8010794:	b085      	sub	sp, #20
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
 801079a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801079c:	2300      	movs	r3, #0
 801079e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d016      	beq.n	80107d4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d10e      	bne.n	80107ce <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80107b6:	1c59      	adds	r1, r3, #1
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	33de      	adds	r3, #222	; 0xde
 80107c2:	6839      	ldr	r1, [r7, #0]
 80107c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80107c8:	2300      	movs	r3, #0
 80107ca:	73fb      	strb	r3, [r7, #15]
 80107cc:	e004      	b.n	80107d8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80107ce:	2302      	movs	r3, #2
 80107d0:	73fb      	strb	r3, [r7, #15]
 80107d2:	e001      	b.n	80107d8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80107d4:	2302      	movs	r3, #2
 80107d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80107d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3714      	adds	r7, #20
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80107e6:	b480      	push	{r7}
 80107e8:	b085      	sub	sp, #20
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
 80107ee:	460b      	mov	r3, r1
 80107f0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80107fc:	78fa      	ldrb	r2, [r7, #3]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d204      	bcs.n	801080c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	78fa      	ldrb	r2, [r7, #3]
 8010806:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 801080a:	e001      	b.n	8010810 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801080c:	2302      	movs	r3, #2
 801080e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010810:	7bfb      	ldrb	r3, [r7, #15]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3714      	adds	r7, #20
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr

0801081e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801081e:	b480      	push	{r7}
 8010820:	b087      	sub	sp, #28
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	4608      	mov	r0, r1
 8010828:	4611      	mov	r1, r2
 801082a:	461a      	mov	r2, r3
 801082c:	4603      	mov	r3, r0
 801082e:	70fb      	strb	r3, [r7, #3]
 8010830:	460b      	mov	r3, r1
 8010832:	70bb      	strb	r3, [r7, #2]
 8010834:	4613      	mov	r3, r2
 8010836:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010838:	2300      	movs	r3, #0
 801083a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 801083c:	2300      	movs	r3, #0
 801083e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010846:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010848:	e025      	b.n	8010896 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801084a:	7dfb      	ldrb	r3, [r7, #23]
 801084c:	221a      	movs	r2, #26
 801084e:	fb02 f303 	mul.w	r3, r2, r3
 8010852:	3308      	adds	r3, #8
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	4413      	add	r3, r2
 8010858:	3302      	adds	r3, #2
 801085a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	795b      	ldrb	r3, [r3, #5]
 8010860:	78fa      	ldrb	r2, [r7, #3]
 8010862:	429a      	cmp	r2, r3
 8010864:	d002      	beq.n	801086c <USBH_FindInterface+0x4e>
 8010866:	78fb      	ldrb	r3, [r7, #3]
 8010868:	2bff      	cmp	r3, #255	; 0xff
 801086a:	d111      	bne.n	8010890 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010870:	78ba      	ldrb	r2, [r7, #2]
 8010872:	429a      	cmp	r2, r3
 8010874:	d002      	beq.n	801087c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010876:	78bb      	ldrb	r3, [r7, #2]
 8010878:	2bff      	cmp	r3, #255	; 0xff
 801087a:	d109      	bne.n	8010890 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010880:	787a      	ldrb	r2, [r7, #1]
 8010882:	429a      	cmp	r2, r3
 8010884:	d002      	beq.n	801088c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010886:	787b      	ldrb	r3, [r7, #1]
 8010888:	2bff      	cmp	r3, #255	; 0xff
 801088a:	d101      	bne.n	8010890 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801088c:	7dfb      	ldrb	r3, [r7, #23]
 801088e:	e006      	b.n	801089e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010890:	7dfb      	ldrb	r3, [r7, #23]
 8010892:	3301      	adds	r3, #1
 8010894:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010896:	7dfb      	ldrb	r3, [r7, #23]
 8010898:	2b01      	cmp	r3, #1
 801089a:	d9d6      	bls.n	801084a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801089c:	23ff      	movs	r3, #255	; 0xff
}
 801089e:	4618      	mov	r0, r3
 80108a0:	371c      	adds	r7, #28
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b082      	sub	sp, #8
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f002 fa24 	bl	8012d00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80108b8:	2101      	movs	r1, #1
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f002 fb3d 	bl	8012f3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80108c0:	2300      	movs	r3, #0
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3708      	adds	r7, #8
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
	...

080108cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b088      	sub	sp, #32
 80108d0:	af04      	add	r7, sp, #16
 80108d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80108d4:	2302      	movs	r3, #2
 80108d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80108d8:	2300      	movs	r3, #0
 80108da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d102      	bne.n	80108ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2203      	movs	r2, #3
 80108ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b0b      	cmp	r3, #11
 80108f6:	f200 81be 	bhi.w	8010c76 <USBH_Process+0x3aa>
 80108fa:	a201      	add	r2, pc, #4	; (adr r2, 8010900 <USBH_Process+0x34>)
 80108fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010900:	08010931 	.word	0x08010931
 8010904:	08010963 	.word	0x08010963
 8010908:	080109cb 	.word	0x080109cb
 801090c:	08010c11 	.word	0x08010c11
 8010910:	08010c77 	.word	0x08010c77
 8010914:	08010a6f 	.word	0x08010a6f
 8010918:	08010bb7 	.word	0x08010bb7
 801091c:	08010aa5 	.word	0x08010aa5
 8010920:	08010ac5 	.word	0x08010ac5
 8010924:	08010ae5 	.word	0x08010ae5
 8010928:	08010b29 	.word	0x08010b29
 801092c:	08010bf9 	.word	0x08010bf9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8010936:	b2db      	uxtb	r3, r3
 8010938:	2b00      	cmp	r3, #0
 801093a:	f000 819e 	beq.w	8010c7a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2201      	movs	r2, #1
 8010942:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010944:	20c8      	movs	r0, #200	; 0xc8
 8010946:	f002 fb3f 	bl	8012fc8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f002 fa35 	bl	8012dba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010960:	e18b      	b.n	8010c7a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8010968:	2b01      	cmp	r3, #1
 801096a:	d107      	bne.n	801097c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2202      	movs	r2, #2
 8010978:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801097a:	e18d      	b.n	8010c98 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010986:	d914      	bls.n	80109b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801098e:	3301      	adds	r3, #1
 8010990:	b2da      	uxtb	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801099e:	2b03      	cmp	r3, #3
 80109a0:	d903      	bls.n	80109aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	220d      	movs	r2, #13
 80109a6:	701a      	strb	r2, [r3, #0]
      break;
 80109a8:	e176      	b.n	8010c98 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	701a      	strb	r2, [r3, #0]
      break;
 80109b0:	e172      	b.n	8010c98 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80109b8:	f103 020a 	add.w	r2, r3, #10
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80109c2:	200a      	movs	r0, #10
 80109c4:	f002 fb00 	bl	8012fc8 <USBH_Delay>
      break;
 80109c8:	e166      	b.n	8010c98 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d005      	beq.n	80109e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80109da:	2104      	movs	r1, #4
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80109e0:	2064      	movs	r0, #100	; 0x64
 80109e2:	f002 faf1 	bl	8012fc8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f002 f9c0 	bl	8012d6c <USBH_LL_GetSpeed>
 80109ec:	4603      	mov	r3, r0
 80109ee:	461a      	mov	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2205      	movs	r2, #5
 80109fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80109fc:	2100      	movs	r1, #0
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f001 fa03 	bl	8011e0a <USBH_AllocPipe>
 8010a04:	4603      	mov	r3, r0
 8010a06:	461a      	mov	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010a0c:	2180      	movs	r1, #128	; 0x80
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f001 f9fb 	bl	8011e0a <USBH_AllocPipe>
 8010a14:	4603      	mov	r3, r0
 8010a16:	461a      	mov	r2, r3
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7919      	ldrb	r1, [r3, #4]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010a30:	b292      	uxth	r2, r2
 8010a32:	9202      	str	r2, [sp, #8]
 8010a34:	2200      	movs	r2, #0
 8010a36:	9201      	str	r2, [sp, #4]
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2280      	movs	r2, #128	; 0x80
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f001 f9b4 	bl	8011dac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	7959      	ldrb	r1, [r3, #5]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010a58:	b292      	uxth	r2, r2
 8010a5a:	9202      	str	r2, [sp, #8]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	9201      	str	r2, [sp, #4]
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	4603      	mov	r3, r0
 8010a64:	2200      	movs	r2, #0
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f001 f9a0 	bl	8011dac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010a6c:	e114      	b.n	8010c98 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f918 	bl	8010ca4 <USBH_HandleEnum>
 8010a74:	4603      	mov	r3, r0
 8010a76:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8010a78:	7bbb      	ldrb	r3, [r7, #14]
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f040 80fe 	bne.w	8010c7e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d103      	bne.n	8010a9c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2208      	movs	r2, #8
 8010a98:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010a9a:	e0f0      	b.n	8010c7e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2207      	movs	r2, #7
 8010aa0:	701a      	strb	r2, [r3, #0]
      break;
 8010aa2:	e0ec      	b.n	8010c7e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f000 80e9 	beq.w	8010c82 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010ab6:	2101      	movs	r1, #1
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2208      	movs	r2, #8
 8010ac0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8010ac2:	e0de      	b.n	8010c82 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	4619      	mov	r1, r3
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 fc2c 	bl	801132c <USBH_SetCfg>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f040 80d5 	bne.w	8010c86 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2209      	movs	r2, #9
 8010ae0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010ae2:	e0d0      	b.n	8010c86 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8010aea:	f003 0320 	and.w	r3, r3, #32
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d016      	beq.n	8010b20 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8010af2:	2101      	movs	r1, #1
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f000 fc3c 	bl	8011372 <USBH_SetFeature>
 8010afa:	4603      	mov	r3, r0
 8010afc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010afe:	7bbb      	ldrb	r3, [r7, #14]
 8010b00:	b2db      	uxtb	r3, r3
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d103      	bne.n	8010b0e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	220a      	movs	r2, #10
 8010b0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010b0c:	e0bd      	b.n	8010c8a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8010b0e:	7bbb      	ldrb	r3, [r7, #14]
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	2b03      	cmp	r3, #3
 8010b14:	f040 80b9 	bne.w	8010c8a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	220a      	movs	r2, #10
 8010b1c:	701a      	strb	r2, [r3, #0]
      break;
 8010b1e:	e0b4      	b.n	8010c8a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	220a      	movs	r2, #10
 8010b24:	701a      	strb	r2, [r3, #0]
      break;
 8010b26:	e0b0      	b.n	8010c8a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f000 80ad 	beq.w	8010c8e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	73fb      	strb	r3, [r7, #15]
 8010b40:	e016      	b.n	8010b70 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010b42:	7bfa      	ldrb	r2, [r7, #15]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	32de      	adds	r2, #222	; 0xde
 8010b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b4c:	791a      	ldrb	r2, [r3, #4]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d108      	bne.n	8010b6a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8010b58:	7bfa      	ldrb	r2, [r7, #15]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	32de      	adds	r2, #222	; 0xde
 8010b5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8010b68:	e005      	b.n	8010b76 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010b6a:	7bfb      	ldrb	r3, [r7, #15]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	73fb      	strb	r3, [r7, #15]
 8010b70:	7bfb      	ldrb	r3, [r7, #15]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d0e5      	beq.n	8010b42 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d016      	beq.n	8010bae <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	4798      	blx	r3
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d109      	bne.n	8010ba6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2206      	movs	r2, #6
 8010b96:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010b9e:	2103      	movs	r1, #3
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010ba4:	e073      	b.n	8010c8e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	220d      	movs	r2, #13
 8010baa:	701a      	strb	r2, [r3, #0]
      break;
 8010bac:	e06f      	b.n	8010c8e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	220d      	movs	r2, #13
 8010bb2:	701a      	strb	r2, [r3, #0]
      break;
 8010bb4:	e06b      	b.n	8010c8e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d017      	beq.n	8010bf0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bc6:	691b      	ldr	r3, [r3, #16]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	4798      	blx	r3
 8010bcc:	4603      	mov	r3, r0
 8010bce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010bd0:	7bbb      	ldrb	r3, [r7, #14]
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d103      	bne.n	8010be0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	220b      	movs	r2, #11
 8010bdc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010bde:	e058      	b.n	8010c92 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8010be0:	7bbb      	ldrb	r3, [r7, #14]
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	d154      	bne.n	8010c92 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	220d      	movs	r2, #13
 8010bec:	701a      	strb	r2, [r3, #0]
      break;
 8010bee:	e050      	b.n	8010c92 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	220d      	movs	r2, #13
 8010bf4:	701a      	strb	r2, [r3, #0]
      break;
 8010bf6:	e04c      	b.n	8010c92 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d049      	beq.n	8010c96 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010c08:	695b      	ldr	r3, [r3, #20]
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	4798      	blx	r3
      }
      break;
 8010c0e:	e042      	b.n	8010c96 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff fd47 	bl	80106ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d009      	beq.n	8010c3c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d005      	beq.n	8010c52 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010c4c:	2105      	movs	r1, #5
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d107      	bne.n	8010c6e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7ff fe1f 	bl	80108aa <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010c6c:	e014      	b.n	8010c98 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f002 f846 	bl	8012d00 <USBH_LL_Start>
      break;
 8010c74:	e010      	b.n	8010c98 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8010c76:	bf00      	nop
 8010c78:	e00e      	b.n	8010c98 <USBH_Process+0x3cc>
      break;
 8010c7a:	bf00      	nop
 8010c7c:	e00c      	b.n	8010c98 <USBH_Process+0x3cc>
      break;
 8010c7e:	bf00      	nop
 8010c80:	e00a      	b.n	8010c98 <USBH_Process+0x3cc>
    break;
 8010c82:	bf00      	nop
 8010c84:	e008      	b.n	8010c98 <USBH_Process+0x3cc>
      break;
 8010c86:	bf00      	nop
 8010c88:	e006      	b.n	8010c98 <USBH_Process+0x3cc>
      break;
 8010c8a:	bf00      	nop
 8010c8c:	e004      	b.n	8010c98 <USBH_Process+0x3cc>
      break;
 8010c8e:	bf00      	nop
 8010c90:	e002      	b.n	8010c98 <USBH_Process+0x3cc>
      break;
 8010c92:	bf00      	nop
 8010c94:	e000      	b.n	8010c98 <USBH_Process+0x3cc>
      break;
 8010c96:	bf00      	nop
  }
  return USBH_OK;
 8010c98:	2300      	movs	r3, #0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop

08010ca4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b088      	sub	sp, #32
 8010ca8:	af04      	add	r7, sp, #16
 8010caa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010cac:	2301      	movs	r3, #1
 8010cae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	785b      	ldrb	r3, [r3, #1]
 8010cb8:	2b07      	cmp	r3, #7
 8010cba:	f200 81c1 	bhi.w	8011040 <USBH_HandleEnum+0x39c>
 8010cbe:	a201      	add	r2, pc, #4	; (adr r2, 8010cc4 <USBH_HandleEnum+0x20>)
 8010cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc4:	08010ce5 	.word	0x08010ce5
 8010cc8:	08010da3 	.word	0x08010da3
 8010ccc:	08010e0d 	.word	0x08010e0d
 8010cd0:	08010e9b 	.word	0x08010e9b
 8010cd4:	08010f05 	.word	0x08010f05
 8010cd8:	08010f75 	.word	0x08010f75
 8010cdc:	08010fbb 	.word	0x08010fbb
 8010ce0:	08011001 	.word	0x08011001
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8010ce4:	2108      	movs	r1, #8
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 fa50 	bl	801118c <USBH_Get_DevDesc>
 8010cec:	4603      	mov	r3, r0
 8010cee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010cf0:	7bbb      	ldrb	r3, [r7, #14]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d130      	bne.n	8010d58 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2201      	movs	r2, #1
 8010d04:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	7919      	ldrb	r1, [r3, #4]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010d1a:	b292      	uxth	r2, r2
 8010d1c:	9202      	str	r2, [sp, #8]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	9201      	str	r2, [sp, #4]
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	4603      	mov	r3, r0
 8010d26:	2280      	movs	r2, #128	; 0x80
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f001 f83f 	bl	8011dac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	7959      	ldrb	r1, [r3, #5]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010d42:	b292      	uxth	r2, r2
 8010d44:	9202      	str	r2, [sp, #8]
 8010d46:	2200      	movs	r2, #0
 8010d48:	9201      	str	r2, [sp, #4]
 8010d4a:	9300      	str	r3, [sp, #0]
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2200      	movs	r2, #0
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f001 f82b 	bl	8011dac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010d56:	e175      	b.n	8011044 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010d58:	7bbb      	ldrb	r3, [r7, #14]
 8010d5a:	2b03      	cmp	r3, #3
 8010d5c:	f040 8172 	bne.w	8011044 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d66:	3301      	adds	r3, #1
 8010d68:	b2da      	uxtb	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d76:	2b03      	cmp	r3, #3
 8010d78:	d903      	bls.n	8010d82 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	220d      	movs	r2, #13
 8010d7e:	701a      	strb	r2, [r3, #0]
      break;
 8010d80:	e160      	b.n	8011044 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	795b      	ldrb	r3, [r3, #5]
 8010d86:	4619      	mov	r1, r3
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f001 f85f 	bl	8011e4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	791b      	ldrb	r3, [r3, #4]
 8010d92:	4619      	mov	r1, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f001 f859 	bl	8011e4c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	701a      	strb	r2, [r3, #0]
      break;
 8010da0:	e150      	b.n	8011044 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8010da2:	2112      	movs	r1, #18
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 f9f1 	bl	801118c <USBH_Get_DevDesc>
 8010daa:	4603      	mov	r3, r0
 8010dac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010dae:	7bbb      	ldrb	r3, [r7, #14]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d103      	bne.n	8010dbc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2202      	movs	r2, #2
 8010db8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010dba:	e145      	b.n	8011048 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010dbc:	7bbb      	ldrb	r3, [r7, #14]
 8010dbe:	2b03      	cmp	r3, #3
 8010dc0:	f040 8142 	bne.w	8011048 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010dca:	3301      	adds	r3, #1
 8010dcc:	b2da      	uxtb	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010dda:	2b03      	cmp	r3, #3
 8010ddc:	d903      	bls.n	8010de6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	220d      	movs	r2, #13
 8010de2:	701a      	strb	r2, [r3, #0]
      break;
 8010de4:	e130      	b.n	8011048 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	795b      	ldrb	r3, [r3, #5]
 8010dea:	4619      	mov	r1, r3
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f001 f82d 	bl	8011e4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	791b      	ldrb	r3, [r3, #4]
 8010df6:	4619      	mov	r1, r3
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f001 f827 	bl	8011e4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2200      	movs	r2, #0
 8010e02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	701a      	strb	r2, [r3, #0]
      break;
 8010e0a:	e11d      	b.n	8011048 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010e0c:	2101      	movs	r1, #1
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fa68 	bl	80112e4 <USBH_SetAddress>
 8010e14:	4603      	mov	r3, r0
 8010e16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010e18:	7bbb      	ldrb	r3, [r7, #14]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d132      	bne.n	8010e84 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8010e1e:	2002      	movs	r0, #2
 8010e20:	f002 f8d2 	bl	8012fc8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2201      	movs	r2, #1
 8010e28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2203      	movs	r2, #3
 8010e30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	7919      	ldrb	r1, [r3, #4]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010e46:	b292      	uxth	r2, r2
 8010e48:	9202      	str	r2, [sp, #8]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	9201      	str	r2, [sp, #4]
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	4603      	mov	r3, r0
 8010e52:	2280      	movs	r2, #128	; 0x80
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 ffa9 	bl	8011dac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	7959      	ldrb	r1, [r3, #5]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010e6e:	b292      	uxth	r2, r2
 8010e70:	9202      	str	r2, [sp, #8]
 8010e72:	2200      	movs	r2, #0
 8010e74:	9201      	str	r2, [sp, #4]
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 ff95 	bl	8011dac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010e82:	e0e3      	b.n	801104c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010e84:	7bbb      	ldrb	r3, [r7, #14]
 8010e86:	2b03      	cmp	r3, #3
 8010e88:	f040 80e0 	bne.w	801104c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	220d      	movs	r2, #13
 8010e90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	705a      	strb	r2, [r3, #1]
      break;
 8010e98:	e0d8      	b.n	801104c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010e9a:	2109      	movs	r1, #9
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f000 f99d 	bl	80111dc <USBH_Get_CfgDesc>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010ea6:	7bbb      	ldrb	r3, [r7, #14]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d103      	bne.n	8010eb4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2204      	movs	r2, #4
 8010eb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010eb2:	e0cd      	b.n	8011050 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010eb4:	7bbb      	ldrb	r3, [r7, #14]
 8010eb6:	2b03      	cmp	r3, #3
 8010eb8:	f040 80ca 	bne.w	8011050 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	b2da      	uxtb	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010ed2:	2b03      	cmp	r3, #3
 8010ed4:	d903      	bls.n	8010ede <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	220d      	movs	r2, #13
 8010eda:	701a      	strb	r2, [r3, #0]
      break;
 8010edc:	e0b8      	b.n	8011050 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	795b      	ldrb	r3, [r3, #5]
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f000 ffb1 	bl	8011e4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	791b      	ldrb	r3, [r3, #4]
 8010eee:	4619      	mov	r1, r3
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f000 ffab 	bl	8011e4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	701a      	strb	r2, [r3, #0]
      break;
 8010f02:	e0a5      	b.n	8011050 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 f965 	bl	80111dc <USBH_Get_CfgDesc>
 8010f12:	4603      	mov	r3, r0
 8010f14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010f16:	7bbb      	ldrb	r3, [r7, #14]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d103      	bne.n	8010f24 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2205      	movs	r2, #5
 8010f20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010f22:	e097      	b.n	8011054 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010f24:	7bbb      	ldrb	r3, [r7, #14]
 8010f26:	2b03      	cmp	r3, #3
 8010f28:	f040 8094 	bne.w	8011054 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010f32:	3301      	adds	r3, #1
 8010f34:	b2da      	uxtb	r2, r3
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010f42:	2b03      	cmp	r3, #3
 8010f44:	d903      	bls.n	8010f4e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	220d      	movs	r2, #13
 8010f4a:	701a      	strb	r2, [r3, #0]
      break;
 8010f4c:	e082      	b.n	8011054 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	795b      	ldrb	r3, [r3, #5]
 8010f52:	4619      	mov	r1, r3
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 ff79 	bl	8011e4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	791b      	ldrb	r3, [r3, #4]
 8010f5e:	4619      	mov	r1, r3
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 ff73 	bl	8011e4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	701a      	strb	r2, [r3, #0]
      break;
 8010f72:	e06f      	b.n	8011054 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d019      	beq.n	8010fb2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010f8a:	23ff      	movs	r3, #255	; 0xff
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f949 	bl	8011224 <USBH_Get_StringDesc>
 8010f92:	4603      	mov	r3, r0
 8010f94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010f96:	7bbb      	ldrb	r3, [r7, #14]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d103      	bne.n	8010fa4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2206      	movs	r2, #6
 8010fa0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010fa2:	e059      	b.n	8011058 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010fa4:	7bbb      	ldrb	r3, [r7, #14]
 8010fa6:	2b03      	cmp	r3, #3
 8010fa8:	d156      	bne.n	8011058 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2206      	movs	r2, #6
 8010fae:	705a      	strb	r2, [r3, #1]
      break;
 8010fb0:	e052      	b.n	8011058 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2206      	movs	r2, #6
 8010fb6:	705a      	strb	r2, [r3, #1]
      break;
 8010fb8:	e04e      	b.n	8011058 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d019      	beq.n	8010ff8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010fd0:	23ff      	movs	r3, #255	; 0xff
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 f926 	bl	8011224 <USBH_Get_StringDesc>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010fdc:	7bbb      	ldrb	r3, [r7, #14]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d103      	bne.n	8010fea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2207      	movs	r2, #7
 8010fe6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010fe8:	e038      	b.n	801105c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010fea:	7bbb      	ldrb	r3, [r7, #14]
 8010fec:	2b03      	cmp	r3, #3
 8010fee:	d135      	bne.n	801105c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2207      	movs	r2, #7
 8010ff4:	705a      	strb	r2, [r3, #1]
      break;
 8010ff6:	e031      	b.n	801105c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2207      	movs	r2, #7
 8010ffc:	705a      	strb	r2, [r3, #1]
      break;
 8010ffe:	e02d      	b.n	801105c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8011006:	2b00      	cmp	r3, #0
 8011008:	d017      	beq.n	801103a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8011016:	23ff      	movs	r3, #255	; 0xff
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f000 f903 	bl	8011224 <USBH_Get_StringDesc>
 801101e:	4603      	mov	r3, r0
 8011020:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011022:	7bbb      	ldrb	r3, [r7, #14]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d102      	bne.n	801102e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8011028:	2300      	movs	r3, #0
 801102a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801102c:	e018      	b.n	8011060 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801102e:	7bbb      	ldrb	r3, [r7, #14]
 8011030:	2b03      	cmp	r3, #3
 8011032:	d115      	bne.n	8011060 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8011034:	2300      	movs	r3, #0
 8011036:	73fb      	strb	r3, [r7, #15]
      break;
 8011038:	e012      	b.n	8011060 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 801103a:	2300      	movs	r3, #0
 801103c:	73fb      	strb	r3, [r7, #15]
      break;
 801103e:	e00f      	b.n	8011060 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8011040:	bf00      	nop
 8011042:	e00e      	b.n	8011062 <USBH_HandleEnum+0x3be>
      break;
 8011044:	bf00      	nop
 8011046:	e00c      	b.n	8011062 <USBH_HandleEnum+0x3be>
      break;
 8011048:	bf00      	nop
 801104a:	e00a      	b.n	8011062 <USBH_HandleEnum+0x3be>
      break;
 801104c:	bf00      	nop
 801104e:	e008      	b.n	8011062 <USBH_HandleEnum+0x3be>
      break;
 8011050:	bf00      	nop
 8011052:	e006      	b.n	8011062 <USBH_HandleEnum+0x3be>
      break;
 8011054:	bf00      	nop
 8011056:	e004      	b.n	8011062 <USBH_HandleEnum+0x3be>
      break;
 8011058:	bf00      	nop
 801105a:	e002      	b.n	8011062 <USBH_HandleEnum+0x3be>
      break;
 801105c:	bf00      	nop
 801105e:	e000      	b.n	8011062 <USBH_HandleEnum+0x3be>
      break;
 8011060:	bf00      	nop
  }
  return Status;
 8011062:	7bfb      	ldrb	r3, [r7, #15]
}
 8011064:	4618      	mov	r0, r3
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801106c:	b480      	push	{r7}
 801106e:	b083      	sub	sp, #12
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	683a      	ldr	r2, [r7, #0]
 801107a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801107e:	bf00      	nop
 8011080:	370c      	adds	r7, #12
 8011082:	46bd      	mov	sp, r7
 8011084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011088:	4770      	bx	lr

0801108a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b082      	sub	sp, #8
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011098:	1c5a      	adds	r2, r3, #1
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 f804 	bl	80110ae <USBH_HandleSof>
}
 80110a6:	bf00      	nop
 80110a8:	3708      	adds	r7, #8
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}

080110ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80110ae:	b580      	push	{r7, lr}
 80110b0:	b082      	sub	sp, #8
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	2b0b      	cmp	r3, #11
 80110be:	d10a      	bne.n	80110d6 <USBH_HandleSof+0x28>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d005      	beq.n	80110d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80110d0:	699b      	ldr	r3, [r3, #24]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	4798      	blx	r3
  }
}
 80110d6:	bf00      	nop
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80110de:	b480      	push	{r7}
 80110e0:	b083      	sub	sp, #12
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2201      	movs	r2, #1
 80110ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80110ee:	bf00      	nop
}
 80110f0:	370c      	adds	r7, #12
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr

080110fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80110fa:	b480      	push	{r7}
 80110fc:	b083      	sub	sp, #12
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2200      	movs	r2, #0
 8011106:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801110a:	bf00      	nop
}
 801110c:	370c      	adds	r7, #12
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr

08011116 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8011116:	b480      	push	{r7}
 8011118:	b083      	sub	sp, #12
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2201      	movs	r2, #1
 8011122:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2200      	movs	r2, #0
 801112a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011136:	2300      	movs	r3, #0
}
 8011138:	4618      	mov	r0, r3
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2201      	movs	r2, #1
 8011150:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f001 fde6 	bl	8012d36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	791b      	ldrb	r3, [r3, #4]
 801116e:	4619      	mov	r1, r3
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f000 fe6b 	bl	8011e4c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	795b      	ldrb	r3, [r3, #5]
 801117a:	4619      	mov	r1, r3
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 fe65 	bl	8011e4c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011182:	2300      	movs	r3, #0
}
 8011184:	4618      	mov	r0, r3
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af02      	add	r7, sp, #8
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	460b      	mov	r3, r1
 8011196:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801119e:	78fb      	ldrb	r3, [r7, #3]
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	4613      	mov	r3, r2
 80111a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111aa:	2100      	movs	r1, #0
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 f864 	bl	801127a <USBH_GetDescriptor>
 80111b2:	4603      	mov	r3, r0
 80111b4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80111b6:	7bfb      	ldrb	r3, [r7, #15]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d10a      	bne.n	80111d2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f203 3026 	addw	r0, r3, #806	; 0x326
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80111c8:	78fa      	ldrb	r2, [r7, #3]
 80111ca:	b292      	uxth	r2, r2
 80111cc:	4619      	mov	r1, r3
 80111ce:	f000 f919 	bl	8011404 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80111d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b086      	sub	sp, #24
 80111e0:	af02      	add	r7, sp, #8
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	460b      	mov	r3, r1
 80111e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	331c      	adds	r3, #28
 80111ec:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80111ee:	887b      	ldrh	r3, [r7, #2]
 80111f0:	9300      	str	r3, [sp, #0]
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80111f8:	2100      	movs	r1, #0
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 f83d 	bl	801127a <USBH_GetDescriptor>
 8011200:	4603      	mov	r3, r0
 8011202:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8011204:	7bfb      	ldrb	r3, [r7, #15]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d107      	bne.n	801121a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 801120a:	887b      	ldrh	r3, [r7, #2]
 801120c:	461a      	mov	r2, r3
 801120e:	68b9      	ldr	r1, [r7, #8]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f000 f987 	bl	8011524 <USBH_ParseCfgDesc>
 8011216:	4603      	mov	r3, r0
 8011218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801121a:	7bfb      	ldrb	r3, [r7, #15]
}
 801121c:	4618      	mov	r0, r3
 801121e:	3710      	adds	r7, #16
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b088      	sub	sp, #32
 8011228:	af02      	add	r7, sp, #8
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	607a      	str	r2, [r7, #4]
 801122e:	461a      	mov	r2, r3
 8011230:	460b      	mov	r3, r1
 8011232:	72fb      	strb	r3, [r7, #11]
 8011234:	4613      	mov	r3, r2
 8011236:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8011238:	7afb      	ldrb	r3, [r7, #11]
 801123a:	b29b      	uxth	r3, r3
 801123c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011240:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8011248:	893b      	ldrh	r3, [r7, #8]
 801124a:	9300      	str	r3, [sp, #0]
 801124c:	460b      	mov	r3, r1
 801124e:	2100      	movs	r1, #0
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f000 f812 	bl	801127a <USBH_GetDescriptor>
 8011256:	4603      	mov	r3, r0
 8011258:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801125a:	7dfb      	ldrb	r3, [r7, #23]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d107      	bne.n	8011270 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011266:	893a      	ldrh	r2, [r7, #8]
 8011268:	6879      	ldr	r1, [r7, #4]
 801126a:	4618      	mov	r0, r3
 801126c:	f000 fafe 	bl	801186c <USBH_ParseStringDesc>
  }

  return status;
 8011270:	7dfb      	ldrb	r3, [r7, #23]
}
 8011272:	4618      	mov	r0, r3
 8011274:	3718      	adds	r7, #24
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b084      	sub	sp, #16
 801127e:	af00      	add	r7, sp, #0
 8011280:	60f8      	str	r0, [r7, #12]
 8011282:	607b      	str	r3, [r7, #4]
 8011284:	460b      	mov	r3, r1
 8011286:	72fb      	strb	r3, [r7, #11]
 8011288:	4613      	mov	r3, r2
 801128a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	789b      	ldrb	r3, [r3, #2]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d11c      	bne.n	80112ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011294:	7afb      	ldrb	r3, [r7, #11]
 8011296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801129a:	b2da      	uxtb	r2, r3
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2206      	movs	r2, #6
 80112a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	893a      	ldrh	r2, [r7, #8]
 80112aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80112ac:	893b      	ldrh	r3, [r7, #8]
 80112ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80112b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80112b6:	d104      	bne.n	80112c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f240 4209 	movw	r2, #1033	; 0x409
 80112be:	829a      	strh	r2, [r3, #20]
 80112c0:	e002      	b.n	80112c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	8b3a      	ldrh	r2, [r7, #24]
 80112cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80112ce:	8b3b      	ldrh	r3, [r7, #24]
 80112d0:	461a      	mov	r2, r3
 80112d2:	6879      	ldr	r1, [r7, #4]
 80112d4:	68f8      	ldr	r0, [r7, #12]
 80112d6:	f000 fb17 	bl	8011908 <USBH_CtlReq>
 80112da:	4603      	mov	r3, r0
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3710      	adds	r7, #16
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	460b      	mov	r3, r1
 80112ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	789b      	ldrb	r3, [r3, #2]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d10f      	bne.n	8011318 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2200      	movs	r2, #0
 80112fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2205      	movs	r2, #5
 8011302:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011304:	78fb      	ldrb	r3, [r7, #3]
 8011306:	b29a      	uxth	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011318:	2200      	movs	r2, #0
 801131a:	2100      	movs	r1, #0
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f000 faf3 	bl	8011908 <USBH_CtlReq>
 8011322:	4603      	mov	r3, r0
}
 8011324:	4618      	mov	r0, r3
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	460b      	mov	r3, r1
 8011336:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	789b      	ldrb	r3, [r3, #2]
 801133c:	2b01      	cmp	r3, #1
 801133e:	d10e      	bne.n	801135e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2200      	movs	r2, #0
 8011344:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2209      	movs	r2, #9
 801134a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	887a      	ldrh	r2, [r7, #2]
 8011350:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801135e:	2200      	movs	r2, #0
 8011360:	2100      	movs	r1, #0
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fad0 	bl	8011908 <USBH_CtlReq>
 8011368:	4603      	mov	r3, r0
}
 801136a:	4618      	mov	r0, r3
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011372:	b580      	push	{r7, lr}
 8011374:	b082      	sub	sp, #8
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
 801137a:	460b      	mov	r3, r1
 801137c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	789b      	ldrb	r3, [r3, #2]
 8011382:	2b01      	cmp	r3, #1
 8011384:	d10f      	bne.n	80113a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2203      	movs	r2, #3
 8011390:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011392:	78fb      	ldrb	r3, [r7, #3]
 8011394:	b29a      	uxth	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2200      	movs	r2, #0
 801139e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80113a6:	2200      	movs	r2, #0
 80113a8:	2100      	movs	r1, #0
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 faac 	bl	8011908 <USBH_CtlReq>
 80113b0:	4603      	mov	r3, r0
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b082      	sub	sp, #8
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	460b      	mov	r3, r1
 80113c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	789b      	ldrb	r3, [r3, #2]
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d10f      	bne.n	80113ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2202      	movs	r2, #2
 80113d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2201      	movs	r2, #1
 80113d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2200      	movs	r2, #0
 80113de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80113e0:	78fb      	ldrb	r3, [r7, #3]
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2200      	movs	r2, #0
 80113ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80113ee:	2200      	movs	r2, #0
 80113f0:	2100      	movs	r1, #0
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f000 fa88 	bl	8011908 <USBH_CtlReq>
 80113f8:	4603      	mov	r3, r0
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
	...

08011404 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8011404:	b480      	push	{r7}
 8011406:	b085      	sub	sp, #20
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	4613      	mov	r3, r2
 8011410:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	781a      	ldrb	r2, [r3, #0]
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	785a      	ldrb	r2, [r3, #1]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	3302      	adds	r3, #2
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	b29a      	uxth	r2, r3
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	3303      	adds	r3, #3
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	b29b      	uxth	r3, r3
 8011432:	021b      	lsls	r3, r3, #8
 8011434:	b29b      	uxth	r3, r3
 8011436:	4313      	orrs	r3, r2
 8011438:	b29a      	uxth	r2, r3
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	791a      	ldrb	r2, [r3, #4]
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	795a      	ldrb	r2, [r3, #5]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	799a      	ldrb	r2, [r3, #6]
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	79da      	ldrb	r2, [r3, #7]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	79db      	ldrb	r3, [r3, #7]
 8011462:	2b20      	cmp	r3, #32
 8011464:	dc0e      	bgt.n	8011484 <USBH_ParseDevDesc+0x80>
 8011466:	2b08      	cmp	r3, #8
 8011468:	db13      	blt.n	8011492 <USBH_ParseDevDesc+0x8e>
 801146a:	3b08      	subs	r3, #8
 801146c:	2201      	movs	r2, #1
 801146e:	409a      	lsls	r2, r3
 8011470:	4b2b      	ldr	r3, [pc, #172]	; (8011520 <USBH_ParseDevDesc+0x11c>)
 8011472:	4013      	ands	r3, r2
 8011474:	2b00      	cmp	r3, #0
 8011476:	bf14      	ite	ne
 8011478:	2301      	movne	r3, #1
 801147a:	2300      	moveq	r3, #0
 801147c:	b2db      	uxtb	r3, r3
 801147e:	2b00      	cmp	r3, #0
 8011480:	d102      	bne.n	8011488 <USBH_ParseDevDesc+0x84>
 8011482:	e006      	b.n	8011492 <USBH_ParseDevDesc+0x8e>
 8011484:	2b40      	cmp	r3, #64	; 0x40
 8011486:	d104      	bne.n	8011492 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	79da      	ldrb	r2, [r3, #7]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	71da      	strb	r2, [r3, #7]
      break;
 8011490:	e003      	b.n	801149a <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	2240      	movs	r2, #64	; 0x40
 8011496:	71da      	strb	r2, [r3, #7]
      break;
 8011498:	bf00      	nop
  }

  if (length > 8U)
 801149a:	88fb      	ldrh	r3, [r7, #6]
 801149c:	2b08      	cmp	r3, #8
 801149e:	d939      	bls.n	8011514 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	3308      	adds	r3, #8
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	3309      	adds	r3, #9
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	021b      	lsls	r3, r3, #8
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	4313      	orrs	r3, r2
 80114b6:	b29a      	uxth	r2, r3
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	330a      	adds	r3, #10
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	330b      	adds	r3, #11
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	021b      	lsls	r3, r3, #8
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	4313      	orrs	r3, r2
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	330c      	adds	r3, #12
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	b29a      	uxth	r2, r3
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	330d      	adds	r3, #13
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	021b      	lsls	r3, r3, #8
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	4313      	orrs	r3, r2
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	7b9a      	ldrb	r2, [r3, #14]
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	7bda      	ldrb	r2, [r3, #15]
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	7c1a      	ldrb	r2, [r3, #16]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	7c5a      	ldrb	r2, [r3, #17]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	745a      	strb	r2, [r3, #17]
  }
}
 8011514:	bf00      	nop
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	01000101 	.word	0x01000101

08011524 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b08c      	sub	sp, #48	; 0x30
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	4613      	mov	r3, r2
 8011530:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011538:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801153a:	2300      	movs	r3, #0
 801153c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011544:	2300      	movs	r3, #0
 8011546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 801154a:	2300      	movs	r3, #0
 801154c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	781a      	ldrb	r2, [r3, #0]
 8011558:	6a3b      	ldr	r3, [r7, #32]
 801155a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	785a      	ldrb	r2, [r3, #1]
 8011560:	6a3b      	ldr	r3, [r7, #32]
 8011562:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	3302      	adds	r3, #2
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	b29a      	uxth	r2, r3
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	3303      	adds	r3, #3
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	b29b      	uxth	r3, r3
 8011574:	021b      	lsls	r3, r3, #8
 8011576:	b29b      	uxth	r3, r3
 8011578:	4313      	orrs	r3, r2
 801157a:	b29b      	uxth	r3, r3
 801157c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011580:	bf28      	it	cs
 8011582:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8011586:	b29a      	uxth	r2, r3
 8011588:	6a3b      	ldr	r3, [r7, #32]
 801158a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	791a      	ldrb	r2, [r3, #4]
 8011590:	6a3b      	ldr	r3, [r7, #32]
 8011592:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	795a      	ldrb	r2, [r3, #5]
 8011598:	6a3b      	ldr	r3, [r7, #32]
 801159a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	799a      	ldrb	r2, [r3, #6]
 80115a0:	6a3b      	ldr	r3, [r7, #32]
 80115a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	79da      	ldrb	r2, [r3, #7]
 80115a8:	6a3b      	ldr	r3, [r7, #32]
 80115aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	7a1a      	ldrb	r2, [r3, #8]
 80115b0:	6a3b      	ldr	r3, [r7, #32]
 80115b2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80115b4:	6a3b      	ldr	r3, [r7, #32]
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	2b09      	cmp	r3, #9
 80115ba:	d002      	beq.n	80115c2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80115bc:	6a3b      	ldr	r3, [r7, #32]
 80115be:	2209      	movs	r2, #9
 80115c0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80115c2:	88fb      	ldrh	r3, [r7, #6]
 80115c4:	2b09      	cmp	r3, #9
 80115c6:	f240 8099 	bls.w	80116fc <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 80115ca:	2309      	movs	r3, #9
 80115cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80115ce:	2300      	movs	r3, #0
 80115d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80115d2:	e07d      	b.n	80116d0 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80115d4:	f107 0316 	add.w	r3, r7, #22
 80115d8:	4619      	mov	r1, r3
 80115da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115dc:	f000 f979 	bl	80118d2 <USBH_GetNextDesc>
 80115e0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80115e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e4:	785b      	ldrb	r3, [r3, #1]
 80115e6:	2b04      	cmp	r3, #4
 80115e8:	d172      	bne.n	80116d0 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80115ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	2b09      	cmp	r3, #9
 80115f0:	d002      	beq.n	80115f8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80115f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f4:	2209      	movs	r2, #9
 80115f6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80115f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115fc:	221a      	movs	r2, #26
 80115fe:	fb02 f303 	mul.w	r3, r2, r3
 8011602:	3308      	adds	r3, #8
 8011604:	6a3a      	ldr	r2, [r7, #32]
 8011606:	4413      	add	r3, r2
 8011608:	3302      	adds	r3, #2
 801160a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801160c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801160e:	69f8      	ldr	r0, [r7, #28]
 8011610:	f000 f87a 	bl	8011708 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011614:	2300      	movs	r3, #0
 8011616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801161a:	2300      	movs	r3, #0
 801161c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801161e:	e03f      	b.n	80116a0 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011620:	f107 0316 	add.w	r3, r7, #22
 8011624:	4619      	mov	r1, r3
 8011626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011628:	f000 f953 	bl	80118d2 <USBH_GetNextDesc>
 801162c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011630:	785b      	ldrb	r3, [r3, #1]
 8011632:	2b05      	cmp	r3, #5
 8011634:	d134      	bne.n	80116a0 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	795b      	ldrb	r3, [r3, #5]
 801163a:	2b01      	cmp	r3, #1
 801163c:	d10f      	bne.n	801165e <USBH_ParseCfgDesc+0x13a>
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	799b      	ldrb	r3, [r3, #6]
 8011642:	2b02      	cmp	r3, #2
 8011644:	d10b      	bne.n	801165e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011646:	69fb      	ldr	r3, [r7, #28]
 8011648:	79db      	ldrb	r3, [r3, #7]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d10b      	bne.n	8011666 <USBH_ParseCfgDesc+0x142>
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	2b09      	cmp	r3, #9
 8011654:	d007      	beq.n	8011666 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8011656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011658:	2209      	movs	r2, #9
 801165a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801165c:	e003      	b.n	8011666 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011660:	2207      	movs	r2, #7
 8011662:	701a      	strb	r2, [r3, #0]
 8011664:	e000      	b.n	8011668 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011666:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801166c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011670:	3201      	adds	r2, #1
 8011672:	00d2      	lsls	r2, r2, #3
 8011674:	211a      	movs	r1, #26
 8011676:	fb01 f303 	mul.w	r3, r1, r3
 801167a:	4413      	add	r3, r2
 801167c:	3308      	adds	r3, #8
 801167e:	6a3a      	ldr	r2, [r7, #32]
 8011680:	4413      	add	r3, r2
 8011682:	3304      	adds	r3, #4
 8011684:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8011686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011688:	69b9      	ldr	r1, [r7, #24]
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f000 f86c 	bl	8011768 <USBH_ParseEPDesc>
 8011690:	4603      	mov	r3, r0
 8011692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8011696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801169a:	3301      	adds	r3, #1
 801169c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	791b      	ldrb	r3, [r3, #4]
 80116a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d204      	bcs.n	80116b6 <USBH_ParseCfgDesc+0x192>
 80116ac:	6a3b      	ldr	r3, [r7, #32]
 80116ae:	885a      	ldrh	r2, [r3, #2]
 80116b0:	8afb      	ldrh	r3, [r7, #22]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d8b4      	bhi.n	8011620 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80116b6:	69fb      	ldr	r3, [r7, #28]
 80116b8:	791b      	ldrb	r3, [r3, #4]
 80116ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80116be:	429a      	cmp	r2, r3
 80116c0:	d201      	bcs.n	80116c6 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 80116c2:	2303      	movs	r3, #3
 80116c4:	e01c      	b.n	8011700 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 80116c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116ca:	3301      	adds	r3, #1
 80116cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80116d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d805      	bhi.n	80116e4 <USBH_ParseCfgDesc+0x1c0>
 80116d8:	6a3b      	ldr	r3, [r7, #32]
 80116da:	885a      	ldrh	r2, [r3, #2]
 80116dc:	8afb      	ldrh	r3, [r7, #22]
 80116de:	429a      	cmp	r2, r3
 80116e0:	f63f af78 	bhi.w	80115d4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80116e4:	6a3b      	ldr	r3, [r7, #32]
 80116e6:	791b      	ldrb	r3, [r3, #4]
 80116e8:	2b02      	cmp	r3, #2
 80116ea:	bf28      	it	cs
 80116ec:	2302      	movcs	r3, #2
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d201      	bcs.n	80116fc <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 80116f8:	2303      	movs	r3, #3
 80116fa:	e001      	b.n	8011700 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 80116fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011700:	4618      	mov	r0, r3
 8011702:	3730      	adds	r7, #48	; 0x30
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}

08011708 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8011708:	b480      	push	{r7}
 801170a:	b083      	sub	sp, #12
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	781a      	ldrb	r2, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	785a      	ldrb	r2, [r3, #1]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	789a      	ldrb	r2, [r3, #2]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	78da      	ldrb	r2, [r3, #3]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	791a      	ldrb	r2, [r3, #4]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	795a      	ldrb	r2, [r3, #5]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	799a      	ldrb	r2, [r3, #6]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	79da      	ldrb	r2, [r3, #7]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	7a1a      	ldrb	r2, [r3, #8]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	721a      	strb	r2, [r3, #8]
}
 801175a:	bf00      	nop
 801175c:	370c      	adds	r7, #12
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr
	...

08011768 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8011768:	b480      	push	{r7}
 801176a:	b087      	sub	sp, #28
 801176c:	af00      	add	r7, sp, #0
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8011774:	2300      	movs	r3, #0
 8011776:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	781a      	ldrb	r2, [r3, #0]
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	785a      	ldrb	r2, [r3, #1]
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	789a      	ldrb	r2, [r3, #2]
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	78da      	ldrb	r2, [r3, #3]
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	3304      	adds	r3, #4
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	b29a      	uxth	r2, r3
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3305      	adds	r3, #5
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	021b      	lsls	r3, r3, #8
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	4313      	orrs	r3, r2
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	799a      	ldrb	r2, [r3, #6]
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	889b      	ldrh	r3, [r3, #4]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d102      	bne.n	80117ca <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80117c4:	2303      	movs	r3, #3
 80117c6:	75fb      	strb	r3, [r7, #23]
 80117c8:	e00d      	b.n	80117e6 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	889a      	ldrh	r2, [r3, #4]
 80117ce:	4b26      	ldr	r3, [pc, #152]	; (8011868 <USBH_ParseEPDesc+0x100>)
 80117d0:	4013      	ands	r3, r2
 80117d2:	b29a      	uxth	r2, r3
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	889b      	ldrh	r3, [r3, #4]
 80117dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d116      	bne.n	801181e <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	78db      	ldrb	r3, [r3, #3]
 80117f4:	f003 0303 	and.w	r3, r3, #3
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	d005      	beq.n	8011808 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	78db      	ldrb	r3, [r3, #3]
 8011800:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011804:	2b03      	cmp	r3, #3
 8011806:	d127      	bne.n	8011858 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	799b      	ldrb	r3, [r3, #6]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d003      	beq.n	8011818 <USBH_ParseEPDesc+0xb0>
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	799b      	ldrb	r3, [r3, #6]
 8011814:	2b10      	cmp	r3, #16
 8011816:	d91f      	bls.n	8011858 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011818:	2303      	movs	r3, #3
 801181a:	75fb      	strb	r3, [r7, #23]
 801181c:	e01c      	b.n	8011858 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	78db      	ldrb	r3, [r3, #3]
 8011822:	f003 0303 	and.w	r3, r3, #3
 8011826:	2b01      	cmp	r3, #1
 8011828:	d10a      	bne.n	8011840 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	799b      	ldrb	r3, [r3, #6]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d003      	beq.n	801183a <USBH_ParseEPDesc+0xd2>
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	799b      	ldrb	r3, [r3, #6]
 8011836:	2b10      	cmp	r3, #16
 8011838:	d90e      	bls.n	8011858 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801183a:	2303      	movs	r3, #3
 801183c:	75fb      	strb	r3, [r7, #23]
 801183e:	e00b      	b.n	8011858 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	78db      	ldrb	r3, [r3, #3]
 8011844:	f003 0303 	and.w	r3, r3, #3
 8011848:	2b03      	cmp	r3, #3
 801184a:	d105      	bne.n	8011858 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	799b      	ldrb	r3, [r3, #6]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d101      	bne.n	8011858 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011854:	2303      	movs	r3, #3
 8011856:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8011858:	7dfb      	ldrb	r3, [r7, #23]
}
 801185a:	4618      	mov	r0, r3
 801185c:	371c      	adds	r7, #28
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop
 8011868:	fffff800 	.word	0xfffff800

0801186c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801186c:	b480      	push	{r7}
 801186e:	b087      	sub	sp, #28
 8011870:	af00      	add	r7, sp, #0
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	4613      	mov	r3, r2
 8011878:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	3301      	adds	r3, #1
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	2b03      	cmp	r3, #3
 8011882:	d120      	bne.n	80118c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	1e9a      	subs	r2, r3, #2
 801188a:	88fb      	ldrh	r3, [r7, #6]
 801188c:	4293      	cmp	r3, r2
 801188e:	bf28      	it	cs
 8011890:	4613      	movcs	r3, r2
 8011892:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	3302      	adds	r3, #2
 8011898:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801189a:	2300      	movs	r3, #0
 801189c:	82fb      	strh	r3, [r7, #22]
 801189e:	e00b      	b.n	80118b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80118a0:	8afb      	ldrh	r3, [r7, #22]
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	4413      	add	r3, r2
 80118a6:	781a      	ldrb	r2, [r3, #0]
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	3301      	adds	r3, #1
 80118b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80118b2:	8afb      	ldrh	r3, [r7, #22]
 80118b4:	3302      	adds	r3, #2
 80118b6:	82fb      	strh	r3, [r7, #22]
 80118b8:	8afa      	ldrh	r2, [r7, #22]
 80118ba:	8abb      	ldrh	r3, [r7, #20]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d3ef      	bcc.n	80118a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	2200      	movs	r2, #0
 80118c4:	701a      	strb	r2, [r3, #0]
  }
}
 80118c6:	bf00      	nop
 80118c8:	371c      	adds	r7, #28
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr

080118d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80118d2:	b480      	push	{r7}
 80118d4:	b085      	sub	sp, #20
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
 80118da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	881a      	ldrh	r2, [r3, #0]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	4413      	add	r3, r2
 80118e8:	b29a      	uxth	r2, r3
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	4413      	add	r3, r2
 80118f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80118fa:	68fb      	ldr	r3, [r7, #12]
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3714      	adds	r7, #20
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	4613      	mov	r3, r2
 8011914:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011916:	2301      	movs	r3, #1
 8011918:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	789b      	ldrb	r3, [r3, #2]
 801191e:	2b01      	cmp	r3, #1
 8011920:	d002      	beq.n	8011928 <USBH_CtlReq+0x20>
 8011922:	2b02      	cmp	r3, #2
 8011924:	d00f      	beq.n	8011946 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8011926:	e027      	b.n	8011978 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	68ba      	ldr	r2, [r7, #8]
 801192c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	88fa      	ldrh	r2, [r7, #6]
 8011932:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2201      	movs	r2, #1
 8011938:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2202      	movs	r2, #2
 801193e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011940:	2301      	movs	r3, #1
 8011942:	75fb      	strb	r3, [r7, #23]
      break;
 8011944:	e018      	b.n	8011978 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8011946:	68f8      	ldr	r0, [r7, #12]
 8011948:	f000 f81c 	bl	8011984 <USBH_HandleControl>
 801194c:	4603      	mov	r3, r0
 801194e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8011950:	7dfb      	ldrb	r3, [r7, #23]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <USBH_CtlReq+0x54>
 8011956:	7dfb      	ldrb	r3, [r7, #23]
 8011958:	2b03      	cmp	r3, #3
 801195a:	d106      	bne.n	801196a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2201      	movs	r2, #1
 8011960:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2200      	movs	r2, #0
 8011966:	761a      	strb	r2, [r3, #24]
      break;
 8011968:	e005      	b.n	8011976 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801196a:	7dfb      	ldrb	r3, [r7, #23]
 801196c:	2b02      	cmp	r3, #2
 801196e:	d102      	bne.n	8011976 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2201      	movs	r2, #1
 8011974:	709a      	strb	r2, [r3, #2]
      break;
 8011976:	bf00      	nop
  }
  return status;
 8011978:	7dfb      	ldrb	r3, [r7, #23]
}
 801197a:	4618      	mov	r0, r3
 801197c:	3718      	adds	r7, #24
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
	...

08011984 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b086      	sub	sp, #24
 8011988:	af02      	add	r7, sp, #8
 801198a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801198c:	2301      	movs	r3, #1
 801198e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011990:	2300      	movs	r3, #0
 8011992:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	7e1b      	ldrb	r3, [r3, #24]
 8011998:	3b01      	subs	r3, #1
 801199a:	2b0a      	cmp	r3, #10
 801199c:	f200 8156 	bhi.w	8011c4c <USBH_HandleControl+0x2c8>
 80119a0:	a201      	add	r2, pc, #4	; (adr r2, 80119a8 <USBH_HandleControl+0x24>)
 80119a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119a6:	bf00      	nop
 80119a8:	080119d5 	.word	0x080119d5
 80119ac:	080119ef 	.word	0x080119ef
 80119b0:	08011a59 	.word	0x08011a59
 80119b4:	08011a7f 	.word	0x08011a7f
 80119b8:	08011ab7 	.word	0x08011ab7
 80119bc:	08011ae1 	.word	0x08011ae1
 80119c0:	08011b33 	.word	0x08011b33
 80119c4:	08011b55 	.word	0x08011b55
 80119c8:	08011b91 	.word	0x08011b91
 80119cc:	08011bb7 	.word	0x08011bb7
 80119d0:	08011bf5 	.word	0x08011bf5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f103 0110 	add.w	r1, r3, #16
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	795b      	ldrb	r3, [r3, #5]
 80119de:	461a      	mov	r2, r3
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 f943 	bl	8011c6c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2202      	movs	r2, #2
 80119ea:	761a      	strb	r2, [r3, #24]
      break;
 80119ec:	e139      	b.n	8011c62 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	795b      	ldrb	r3, [r3, #5]
 80119f2:	4619      	mov	r1, r3
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f001 fa8d 	bl	8012f14 <USBH_LL_GetURBState>
 80119fa:	4603      	mov	r3, r0
 80119fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80119fe:	7bbb      	ldrb	r3, [r7, #14]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d11e      	bne.n	8011a42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	7c1b      	ldrb	r3, [r3, #16]
 8011a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011a0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	8adb      	ldrh	r3, [r3, #22]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00a      	beq.n	8011a2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8011a16:	7b7b      	ldrb	r3, [r7, #13]
 8011a18:	2b80      	cmp	r3, #128	; 0x80
 8011a1a:	d103      	bne.n	8011a24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2203      	movs	r2, #3
 8011a20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011a22:	e115      	b.n	8011c50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2205      	movs	r2, #5
 8011a28:	761a      	strb	r2, [r3, #24]
      break;
 8011a2a:	e111      	b.n	8011c50 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8011a2c:	7b7b      	ldrb	r3, [r7, #13]
 8011a2e:	2b80      	cmp	r3, #128	; 0x80
 8011a30:	d103      	bne.n	8011a3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2209      	movs	r2, #9
 8011a36:	761a      	strb	r2, [r3, #24]
      break;
 8011a38:	e10a      	b.n	8011c50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2207      	movs	r2, #7
 8011a3e:	761a      	strb	r2, [r3, #24]
      break;
 8011a40:	e106      	b.n	8011c50 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8011a42:	7bbb      	ldrb	r3, [r7, #14]
 8011a44:	2b04      	cmp	r3, #4
 8011a46:	d003      	beq.n	8011a50 <USBH_HandleControl+0xcc>
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
 8011a4a:	2b02      	cmp	r3, #2
 8011a4c:	f040 8100 	bne.w	8011c50 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	220b      	movs	r2, #11
 8011a54:	761a      	strb	r2, [r3, #24]
      break;
 8011a56:	e0fb      	b.n	8011c50 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6899      	ldr	r1, [r3, #8]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	899a      	ldrh	r2, [r3, #12]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	791b      	ldrb	r3, [r3, #4]
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 f93a 	bl	8011cea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2204      	movs	r2, #4
 8011a7a:	761a      	strb	r2, [r3, #24]
      break;
 8011a7c:	e0f1      	b.n	8011c62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	791b      	ldrb	r3, [r3, #4]
 8011a82:	4619      	mov	r1, r3
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f001 fa45 	bl	8012f14 <USBH_LL_GetURBState>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8011a8e:	7bbb      	ldrb	r3, [r7, #14]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d102      	bne.n	8011a9a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2209      	movs	r2, #9
 8011a98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8011a9a:	7bbb      	ldrb	r3, [r7, #14]
 8011a9c:	2b05      	cmp	r3, #5
 8011a9e:	d102      	bne.n	8011aa6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8011aa0:	2303      	movs	r3, #3
 8011aa2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011aa4:	e0d6      	b.n	8011c54 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8011aa6:	7bbb      	ldrb	r3, [r7, #14]
 8011aa8:	2b04      	cmp	r3, #4
 8011aaa:	f040 80d3 	bne.w	8011c54 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	220b      	movs	r2, #11
 8011ab2:	761a      	strb	r2, [r3, #24]
      break;
 8011ab4:	e0ce      	b.n	8011c54 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6899      	ldr	r1, [r3, #8]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	899a      	ldrh	r2, [r3, #12]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	795b      	ldrb	r3, [r3, #5]
 8011ac2:	2001      	movs	r0, #1
 8011ac4:	9000      	str	r0, [sp, #0]
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f8ea 	bl	8011ca0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2206      	movs	r2, #6
 8011adc:	761a      	strb	r2, [r3, #24]
      break;
 8011ade:	e0c0      	b.n	8011c62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	795b      	ldrb	r3, [r3, #5]
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f001 fa14 	bl	8012f14 <USBH_LL_GetURBState>
 8011aec:	4603      	mov	r3, r0
 8011aee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011af0:	7bbb      	ldrb	r3, [r7, #14]
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d103      	bne.n	8011afe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2207      	movs	r2, #7
 8011afa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011afc:	e0ac      	b.n	8011c58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8011afe:	7bbb      	ldrb	r3, [r7, #14]
 8011b00:	2b05      	cmp	r3, #5
 8011b02:	d105      	bne.n	8011b10 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	220c      	movs	r2, #12
 8011b08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011b0a:	2303      	movs	r3, #3
 8011b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8011b0e:	e0a3      	b.n	8011c58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011b10:	7bbb      	ldrb	r3, [r7, #14]
 8011b12:	2b02      	cmp	r3, #2
 8011b14:	d103      	bne.n	8011b1e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2205      	movs	r2, #5
 8011b1a:	761a      	strb	r2, [r3, #24]
      break;
 8011b1c:	e09c      	b.n	8011c58 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8011b1e:	7bbb      	ldrb	r3, [r7, #14]
 8011b20:	2b04      	cmp	r3, #4
 8011b22:	f040 8099 	bne.w	8011c58 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	220b      	movs	r2, #11
 8011b2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011b2c:	2302      	movs	r3, #2
 8011b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8011b30:	e092      	b.n	8011c58 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	791b      	ldrb	r3, [r3, #4]
 8011b36:	2200      	movs	r2, #0
 8011b38:	2100      	movs	r1, #0
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f000 f8d5 	bl	8011cea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011b46:	b29a      	uxth	r2, r3
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2208      	movs	r2, #8
 8011b50:	761a      	strb	r2, [r3, #24]

      break;
 8011b52:	e086      	b.n	8011c62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	791b      	ldrb	r3, [r3, #4]
 8011b58:	4619      	mov	r1, r3
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f001 f9da 	bl	8012f14 <USBH_LL_GetURBState>
 8011b60:	4603      	mov	r3, r0
 8011b62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011b64:	7bbb      	ldrb	r3, [r7, #14]
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	d105      	bne.n	8011b76 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	220d      	movs	r2, #13
 8011b6e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8011b70:	2300      	movs	r3, #0
 8011b72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011b74:	e072      	b.n	8011c5c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8011b76:	7bbb      	ldrb	r3, [r7, #14]
 8011b78:	2b04      	cmp	r3, #4
 8011b7a:	d103      	bne.n	8011b84 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	220b      	movs	r2, #11
 8011b80:	761a      	strb	r2, [r3, #24]
      break;
 8011b82:	e06b      	b.n	8011c5c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8011b84:	7bbb      	ldrb	r3, [r7, #14]
 8011b86:	2b05      	cmp	r3, #5
 8011b88:	d168      	bne.n	8011c5c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8011b8e:	e065      	b.n	8011c5c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	795b      	ldrb	r3, [r3, #5]
 8011b94:	2201      	movs	r2, #1
 8011b96:	9200      	str	r2, [sp, #0]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	2100      	movs	r1, #0
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 f87f 	bl	8011ca0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	220a      	movs	r2, #10
 8011bb2:	761a      	strb	r2, [r3, #24]
      break;
 8011bb4:	e055      	b.n	8011c62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	795b      	ldrb	r3, [r3, #5]
 8011bba:	4619      	mov	r1, r3
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f001 f9a9 	bl	8012f14 <USBH_LL_GetURBState>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011bc6:	7bbb      	ldrb	r3, [r7, #14]
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d105      	bne.n	8011bd8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	220d      	movs	r2, #13
 8011bd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011bd6:	e043      	b.n	8011c60 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011bd8:	7bbb      	ldrb	r3, [r7, #14]
 8011bda:	2b02      	cmp	r3, #2
 8011bdc:	d103      	bne.n	8011be6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2209      	movs	r2, #9
 8011be2:	761a      	strb	r2, [r3, #24]
      break;
 8011be4:	e03c      	b.n	8011c60 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8011be6:	7bbb      	ldrb	r3, [r7, #14]
 8011be8:	2b04      	cmp	r3, #4
 8011bea:	d139      	bne.n	8011c60 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	220b      	movs	r2, #11
 8011bf0:	761a      	strb	r2, [r3, #24]
      break;
 8011bf2:	e035      	b.n	8011c60 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	7e5b      	ldrb	r3, [r3, #25]
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	b2da      	uxtb	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	765a      	strb	r2, [r3, #25]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	7e5b      	ldrb	r3, [r3, #25]
 8011c04:	2b02      	cmp	r3, #2
 8011c06:	d806      	bhi.n	8011c16 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2201      	movs	r2, #1
 8011c12:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011c14:	e025      	b.n	8011c62 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011c1c:	2106      	movs	r1, #6
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	795b      	ldrb	r3, [r3, #5]
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f000 f90c 	bl	8011e4c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	791b      	ldrb	r3, [r3, #4]
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 f906 	bl	8011e4c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011c46:	2302      	movs	r3, #2
 8011c48:	73fb      	strb	r3, [r7, #15]
      break;
 8011c4a:	e00a      	b.n	8011c62 <USBH_HandleControl+0x2de>

    default:
      break;
 8011c4c:	bf00      	nop
 8011c4e:	e008      	b.n	8011c62 <USBH_HandleControl+0x2de>
      break;
 8011c50:	bf00      	nop
 8011c52:	e006      	b.n	8011c62 <USBH_HandleControl+0x2de>
      break;
 8011c54:	bf00      	nop
 8011c56:	e004      	b.n	8011c62 <USBH_HandleControl+0x2de>
      break;
 8011c58:	bf00      	nop
 8011c5a:	e002      	b.n	8011c62 <USBH_HandleControl+0x2de>
      break;
 8011c5c:	bf00      	nop
 8011c5e:	e000      	b.n	8011c62 <USBH_HandleControl+0x2de>
      break;
 8011c60:	bf00      	nop
  }

  return status;
 8011c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3710      	adds	r7, #16
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b088      	sub	sp, #32
 8011c70:	af04      	add	r7, sp, #16
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	4613      	mov	r3, r2
 8011c78:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011c7a:	79f9      	ldrb	r1, [r7, #7]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	9303      	str	r3, [sp, #12]
 8011c80:	2308      	movs	r3, #8
 8011c82:	9302      	str	r3, [sp, #8]
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	9301      	str	r3, [sp, #4]
 8011c88:	2300      	movs	r3, #0
 8011c8a:	9300      	str	r3, [sp, #0]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	2200      	movs	r2, #0
 8011c90:	68f8      	ldr	r0, [r7, #12]
 8011c92:	f001 f90e 	bl	8012eb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8011c96:	2300      	movs	r3, #0
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3710      	adds	r7, #16
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b088      	sub	sp, #32
 8011ca4:	af04      	add	r7, sp, #16
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	4611      	mov	r1, r2
 8011cac:	461a      	mov	r2, r3
 8011cae:	460b      	mov	r3, r1
 8011cb0:	80fb      	strh	r3, [r7, #6]
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d001      	beq.n	8011cc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011cc4:	7979      	ldrb	r1, [r7, #5]
 8011cc6:	7e3b      	ldrb	r3, [r7, #24]
 8011cc8:	9303      	str	r3, [sp, #12]
 8011cca:	88fb      	ldrh	r3, [r7, #6]
 8011ccc:	9302      	str	r3, [sp, #8]
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	9301      	str	r3, [sp, #4]
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	2200      	movs	r2, #0
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	f001 f8e9 	bl	8012eb2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011ce0:	2300      	movs	r3, #0
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b088      	sub	sp, #32
 8011cee:	af04      	add	r7, sp, #16
 8011cf0:	60f8      	str	r0, [r7, #12]
 8011cf2:	60b9      	str	r1, [r7, #8]
 8011cf4:	4611      	mov	r1, r2
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	80fb      	strh	r3, [r7, #6]
 8011cfc:	4613      	mov	r3, r2
 8011cfe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011d00:	7979      	ldrb	r1, [r7, #5]
 8011d02:	2300      	movs	r3, #0
 8011d04:	9303      	str	r3, [sp, #12]
 8011d06:	88fb      	ldrh	r3, [r7, #6]
 8011d08:	9302      	str	r3, [sp, #8]
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	9301      	str	r3, [sp, #4]
 8011d0e:	2301      	movs	r3, #1
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	2300      	movs	r3, #0
 8011d14:	2201      	movs	r2, #1
 8011d16:	68f8      	ldr	r0, [r7, #12]
 8011d18:	f001 f8cb 	bl	8012eb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011d1c:	2300      	movs	r3, #0

}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3710      	adds	r7, #16
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}

08011d26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011d26:	b580      	push	{r7, lr}
 8011d28:	b088      	sub	sp, #32
 8011d2a:	af04      	add	r7, sp, #16
 8011d2c:	60f8      	str	r0, [r7, #12]
 8011d2e:	60b9      	str	r1, [r7, #8]
 8011d30:	4611      	mov	r1, r2
 8011d32:	461a      	mov	r2, r3
 8011d34:	460b      	mov	r3, r1
 8011d36:	80fb      	strh	r3, [r7, #6]
 8011d38:	4613      	mov	r3, r2
 8011d3a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d001      	beq.n	8011d4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011d46:	2300      	movs	r3, #0
 8011d48:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011d4a:	7979      	ldrb	r1, [r7, #5]
 8011d4c:	7e3b      	ldrb	r3, [r7, #24]
 8011d4e:	9303      	str	r3, [sp, #12]
 8011d50:	88fb      	ldrh	r3, [r7, #6]
 8011d52:	9302      	str	r3, [sp, #8]
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	9301      	str	r3, [sp, #4]
 8011d58:	2301      	movs	r3, #1
 8011d5a:	9300      	str	r3, [sp, #0]
 8011d5c:	2302      	movs	r3, #2
 8011d5e:	2200      	movs	r2, #0
 8011d60:	68f8      	ldr	r0, [r7, #12]
 8011d62:	f001 f8a6 	bl	8012eb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011d66:	2300      	movs	r3, #0
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b088      	sub	sp, #32
 8011d74:	af04      	add	r7, sp, #16
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	4611      	mov	r1, r2
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	460b      	mov	r3, r1
 8011d80:	80fb      	strh	r3, [r7, #6]
 8011d82:	4613      	mov	r3, r2
 8011d84:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011d86:	7979      	ldrb	r1, [r7, #5]
 8011d88:	2300      	movs	r3, #0
 8011d8a:	9303      	str	r3, [sp, #12]
 8011d8c:	88fb      	ldrh	r3, [r7, #6]
 8011d8e:	9302      	str	r3, [sp, #8]
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	9301      	str	r3, [sp, #4]
 8011d94:	2301      	movs	r3, #1
 8011d96:	9300      	str	r3, [sp, #0]
 8011d98:	2302      	movs	r3, #2
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f001 f888 	bl	8012eb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b086      	sub	sp, #24
 8011db0:	af04      	add	r7, sp, #16
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	4608      	mov	r0, r1
 8011db6:	4611      	mov	r1, r2
 8011db8:	461a      	mov	r2, r3
 8011dba:	4603      	mov	r3, r0
 8011dbc:	70fb      	strb	r3, [r7, #3]
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	70bb      	strb	r3, [r7, #2]
 8011dc2:	4613      	mov	r3, r2
 8011dc4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011dc6:	7878      	ldrb	r0, [r7, #1]
 8011dc8:	78ba      	ldrb	r2, [r7, #2]
 8011dca:	78f9      	ldrb	r1, [r7, #3]
 8011dcc:	8b3b      	ldrh	r3, [r7, #24]
 8011dce:	9302      	str	r3, [sp, #8]
 8011dd0:	7d3b      	ldrb	r3, [r7, #20]
 8011dd2:	9301      	str	r3, [sp, #4]
 8011dd4:	7c3b      	ldrb	r3, [r7, #16]
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	4603      	mov	r3, r0
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f001 f81b 	bl	8012e16 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011de0:	2300      	movs	r3, #0
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b082      	sub	sp, #8
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
 8011df2:	460b      	mov	r3, r1
 8011df4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011df6:	78fb      	ldrb	r3, [r7, #3]
 8011df8:	4619      	mov	r1, r3
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f001 f83a 	bl	8012e74 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b084      	sub	sp, #16
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	460b      	mov	r3, r1
 8011e14:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 f836 	bl	8011e88 <USBH_GetFreePipe>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011e20:	89fb      	ldrh	r3, [r7, #14]
 8011e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d00a      	beq.n	8011e40 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011e2a:	78fa      	ldrb	r2, [r7, #3]
 8011e2c:	89fb      	ldrh	r3, [r7, #14]
 8011e2e:	f003 030f 	and.w	r3, r3, #15
 8011e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011e36:	6879      	ldr	r1, [r7, #4]
 8011e38:	33e0      	adds	r3, #224	; 0xe0
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	440b      	add	r3, r1
 8011e3e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011e40:	89fb      	ldrh	r3, [r7, #14]
 8011e42:	b2db      	uxtb	r3, r3
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b083      	sub	sp, #12
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	460b      	mov	r3, r1
 8011e56:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011e58:	78fb      	ldrb	r3, [r7, #3]
 8011e5a:	2b0f      	cmp	r3, #15
 8011e5c:	d80d      	bhi.n	8011e7a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011e5e:	78fb      	ldrb	r3, [r7, #3]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	33e0      	adds	r3, #224	; 0xe0
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	4413      	add	r3, r2
 8011e68:	685a      	ldr	r2, [r3, #4]
 8011e6a:	78fb      	ldrb	r3, [r7, #3]
 8011e6c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011e70:	6879      	ldr	r1, [r7, #4]
 8011e72:	33e0      	adds	r3, #224	; 0xe0
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	440b      	add	r3, r1
 8011e78:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	370c      	adds	r7, #12
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011e90:	2300      	movs	r3, #0
 8011e92:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011e94:	2300      	movs	r3, #0
 8011e96:	73fb      	strb	r3, [r7, #15]
 8011e98:	e00f      	b.n	8011eba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011e9a:	7bfb      	ldrb	r3, [r7, #15]
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	33e0      	adds	r3, #224	; 0xe0
 8011ea0:	009b      	lsls	r3, r3, #2
 8011ea2:	4413      	add	r3, r2
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d102      	bne.n	8011eb4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011eae:	7bfb      	ldrb	r3, [r7, #15]
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	e007      	b.n	8011ec4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011eb4:	7bfb      	ldrb	r3, [r7, #15]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	73fb      	strb	r3, [r7, #15]
 8011eba:	7bfb      	ldrb	r3, [r7, #15]
 8011ebc:	2b0f      	cmp	r3, #15
 8011ebe:	d9ec      	bls.n	8011e9a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3714      	adds	r7, #20
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ece:	4770      	bx	lr

08011ed0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b087      	sub	sp, #28
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	60f8      	str	r0, [r7, #12]
 8011ed8:	60b9      	str	r1, [r7, #8]
 8011eda:	4613      	mov	r3, r2
 8011edc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011ee6:	4b1f      	ldr	r3, [pc, #124]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011ee8:	7a5b      	ldrb	r3, [r3, #9]
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d131      	bne.n	8011f54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011ef0:	4b1c      	ldr	r3, [pc, #112]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011ef2:	7a5b      	ldrb	r3, [r3, #9]
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	4b1a      	ldr	r3, [pc, #104]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011efa:	2100      	movs	r1, #0
 8011efc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011efe:	4b19      	ldr	r3, [pc, #100]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011f00:	7a5b      	ldrb	r3, [r3, #9]
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	4a17      	ldr	r2, [pc, #92]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	4413      	add	r3, r2
 8011f0a:	68fa      	ldr	r2, [r7, #12]
 8011f0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011f0e:	4b15      	ldr	r3, [pc, #84]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011f10:	7a5b      	ldrb	r3, [r3, #9]
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	461a      	mov	r2, r3
 8011f16:	4b13      	ldr	r3, [pc, #76]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011f18:	4413      	add	r3, r2
 8011f1a:	79fa      	ldrb	r2, [r7, #7]
 8011f1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011f1e:	4b11      	ldr	r3, [pc, #68]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011f20:	7a5b      	ldrb	r3, [r3, #9]
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	1c5a      	adds	r2, r3, #1
 8011f26:	b2d1      	uxtb	r1, r2
 8011f28:	4a0e      	ldr	r2, [pc, #56]	; (8011f64 <FATFS_LinkDriverEx+0x94>)
 8011f2a:	7251      	strb	r1, [r2, #9]
 8011f2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011f2e:	7dbb      	ldrb	r3, [r7, #22]
 8011f30:	3330      	adds	r3, #48	; 0x30
 8011f32:	b2da      	uxtb	r2, r3
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	223a      	movs	r2, #58	; 0x3a
 8011f3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	3302      	adds	r3, #2
 8011f44:	222f      	movs	r2, #47	; 0x2f
 8011f46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	3303      	adds	r3, #3
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011f50:	2300      	movs	r3, #0
 8011f52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	371c      	adds	r7, #28
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	200027dc 	.word	0x200027dc

08011f68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011f72:	2200      	movs	r2, #0
 8011f74:	6839      	ldr	r1, [r7, #0]
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff ffaa 	bl	8011ed0 <FATFS_LinkDriverEx>
 8011f7c:	4603      	mov	r3, r0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
	...

08011f88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	4912      	ldr	r1, [pc, #72]	; (8011fd8 <MX_USB_DEVICE_Init+0x50>)
 8011f90:	4812      	ldr	r0, [pc, #72]	; (8011fdc <MX_USB_DEVICE_Init+0x54>)
 8011f92:	f7fc fc99 	bl	800e8c8 <USBD_Init>
 8011f96:	4603      	mov	r3, r0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d001      	beq.n	8011fa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011f9c:	f7ef fd10 	bl	80019c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8011fa0:	490f      	ldr	r1, [pc, #60]	; (8011fe0 <MX_USB_DEVICE_Init+0x58>)
 8011fa2:	480e      	ldr	r0, [pc, #56]	; (8011fdc <MX_USB_DEVICE_Init+0x54>)
 8011fa4:	f7fc fcc0 	bl	800e928 <USBD_RegisterClass>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d001      	beq.n	8011fb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011fae:	f7ef fd07 	bl	80019c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8011fb2:	490c      	ldr	r1, [pc, #48]	; (8011fe4 <MX_USB_DEVICE_Init+0x5c>)
 8011fb4:	4809      	ldr	r0, [pc, #36]	; (8011fdc <MX_USB_DEVICE_Init+0x54>)
 8011fb6:	f7fc fbf7 	bl	800e7a8 <USBD_CDC_RegisterInterface>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d001      	beq.n	8011fc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011fc0:	f7ef fcfe 	bl	80019c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8011fc4:	4805      	ldr	r0, [pc, #20]	; (8011fdc <MX_USB_DEVICE_Init+0x54>)
 8011fc6:	f7fc fce5 	bl	800e994 <USBD_Start>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d001      	beq.n	8011fd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011fd0:	f7ef fcf6 	bl	80019c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011fd4:	bf00      	nop
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	200000cc 	.word	0x200000cc
 8011fdc:	200027e8 	.word	0x200027e8
 8011fe0:	20000018 	.word	0x20000018
 8011fe4:	200000b8 	.word	0x200000b8

08011fe8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8011fec:	2200      	movs	r2, #0
 8011fee:	4905      	ldr	r1, [pc, #20]	; (8012004 <CDC_Init_HS+0x1c>)
 8011ff0:	4805      	ldr	r0, [pc, #20]	; (8012008 <CDC_Init_HS+0x20>)
 8011ff2:	f7fc fbf3 	bl	800e7dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8011ff6:	4905      	ldr	r1, [pc, #20]	; (801200c <CDC_Init_HS+0x24>)
 8011ff8:	4803      	ldr	r0, [pc, #12]	; (8012008 <CDC_Init_HS+0x20>)
 8011ffa:	f7fc fc11 	bl	800e820 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011ffe:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012000:	4618      	mov	r0, r3
 8012002:	bd80      	pop	{r7, pc}
 8012004:	200032c4 	.word	0x200032c4
 8012008:	200027e8 	.word	0x200027e8
 801200c:	20002ac4 	.word	0x20002ac4

08012010 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012010:	b480      	push	{r7}
 8012012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012014:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8012016:	4618      	mov	r0, r3
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr

08012020 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012020:	b480      	push	{r7}
 8012022:	b083      	sub	sp, #12
 8012024:	af00      	add	r7, sp, #0
 8012026:	4603      	mov	r3, r0
 8012028:	6039      	str	r1, [r7, #0]
 801202a:	71fb      	strb	r3, [r7, #7]
 801202c:	4613      	mov	r3, r2
 801202e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012030:	79fb      	ldrb	r3, [r7, #7]
 8012032:	2b23      	cmp	r3, #35	; 0x23
 8012034:	d84a      	bhi.n	80120cc <CDC_Control_HS+0xac>
 8012036:	a201      	add	r2, pc, #4	; (adr r2, 801203c <CDC_Control_HS+0x1c>)
 8012038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801203c:	080120cd 	.word	0x080120cd
 8012040:	080120cd 	.word	0x080120cd
 8012044:	080120cd 	.word	0x080120cd
 8012048:	080120cd 	.word	0x080120cd
 801204c:	080120cd 	.word	0x080120cd
 8012050:	080120cd 	.word	0x080120cd
 8012054:	080120cd 	.word	0x080120cd
 8012058:	080120cd 	.word	0x080120cd
 801205c:	080120cd 	.word	0x080120cd
 8012060:	080120cd 	.word	0x080120cd
 8012064:	080120cd 	.word	0x080120cd
 8012068:	080120cd 	.word	0x080120cd
 801206c:	080120cd 	.word	0x080120cd
 8012070:	080120cd 	.word	0x080120cd
 8012074:	080120cd 	.word	0x080120cd
 8012078:	080120cd 	.word	0x080120cd
 801207c:	080120cd 	.word	0x080120cd
 8012080:	080120cd 	.word	0x080120cd
 8012084:	080120cd 	.word	0x080120cd
 8012088:	080120cd 	.word	0x080120cd
 801208c:	080120cd 	.word	0x080120cd
 8012090:	080120cd 	.word	0x080120cd
 8012094:	080120cd 	.word	0x080120cd
 8012098:	080120cd 	.word	0x080120cd
 801209c:	080120cd 	.word	0x080120cd
 80120a0:	080120cd 	.word	0x080120cd
 80120a4:	080120cd 	.word	0x080120cd
 80120a8:	080120cd 	.word	0x080120cd
 80120ac:	080120cd 	.word	0x080120cd
 80120b0:	080120cd 	.word	0x080120cd
 80120b4:	080120cd 	.word	0x080120cd
 80120b8:	080120cd 	.word	0x080120cd
 80120bc:	080120cd 	.word	0x080120cd
 80120c0:	080120cd 	.word	0x080120cd
 80120c4:	080120cd 	.word	0x080120cd
 80120c8:	080120cd 	.word	0x080120cd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80120cc:	bf00      	nop
  }

  return (USBD_OK);
 80120ce:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	370c      	adds	r7, #12
 80120d4:	46bd      	mov	sp, r7
 80120d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120da:	4770      	bx	lr

080120dc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80120e6:	6879      	ldr	r1, [r7, #4]
 80120e8:	4805      	ldr	r0, [pc, #20]	; (8012100 <CDC_Receive_HS+0x24>)
 80120ea:	f7fc fb99 	bl	800e820 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80120ee:	4804      	ldr	r0, [pc, #16]	; (8012100 <CDC_Receive_HS+0x24>)
 80120f0:	f7fc fbb4 	bl	800e85c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80120f4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	200027e8 	.word	0x200027e8

08012104 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012104:	b480      	push	{r7}
 8012106:	b087      	sub	sp, #28
 8012108:	af00      	add	r7, sp, #0
 801210a:	60f8      	str	r0, [r7, #12]
 801210c:	60b9      	str	r1, [r7, #8]
 801210e:	4613      	mov	r3, r2
 8012110:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012112:	2300      	movs	r3, #0
 8012114:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801211a:	4618      	mov	r0, r3
 801211c:	371c      	adds	r7, #28
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr
	...

08012128 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	4603      	mov	r3, r0
 8012130:	6039      	str	r1, [r7, #0]
 8012132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	2212      	movs	r2, #18
 8012138:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801213a:	4b03      	ldr	r3, [pc, #12]	; (8012148 <USBD_HS_DeviceDescriptor+0x20>)
}
 801213c:	4618      	mov	r0, r3
 801213e:	370c      	adds	r7, #12
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr
 8012148:	200000ec 	.word	0x200000ec

0801214c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	4603      	mov	r3, r0
 8012154:	6039      	str	r1, [r7, #0]
 8012156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2204      	movs	r2, #4
 801215c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801215e:	4b03      	ldr	r3, [pc, #12]	; (801216c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012160:	4618      	mov	r0, r3
 8012162:	370c      	adds	r7, #12
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr
 801216c:	2000010c 	.word	0x2000010c

08012170 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	6039      	str	r1, [r7, #0]
 801217a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801217c:	79fb      	ldrb	r3, [r7, #7]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d105      	bne.n	801218e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012182:	683a      	ldr	r2, [r7, #0]
 8012184:	4907      	ldr	r1, [pc, #28]	; (80121a4 <USBD_HS_ProductStrDescriptor+0x34>)
 8012186:	4808      	ldr	r0, [pc, #32]	; (80121a8 <USBD_HS_ProductStrDescriptor+0x38>)
 8012188:	f7fd fdda 	bl	800fd40 <USBD_GetString>
 801218c:	e004      	b.n	8012198 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	4904      	ldr	r1, [pc, #16]	; (80121a4 <USBD_HS_ProductStrDescriptor+0x34>)
 8012192:	4805      	ldr	r0, [pc, #20]	; (80121a8 <USBD_HS_ProductStrDescriptor+0x38>)
 8012194:	f7fd fdd4 	bl	800fd40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012198:	4b02      	ldr	r3, [pc, #8]	; (80121a4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801219a:	4618      	mov	r0, r3
 801219c:	3708      	adds	r7, #8
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	20003ac4 	.word	0x20003ac4
 80121a8:	08015b2c 	.word	0x08015b2c

080121ac <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	4603      	mov	r3, r0
 80121b4:	6039      	str	r1, [r7, #0]
 80121b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80121b8:	683a      	ldr	r2, [r7, #0]
 80121ba:	4904      	ldr	r1, [pc, #16]	; (80121cc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80121bc:	4804      	ldr	r0, [pc, #16]	; (80121d0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80121be:	f7fd fdbf 	bl	800fd40 <USBD_GetString>
  return USBD_StrDesc;
 80121c2:	4b02      	ldr	r3, [pc, #8]	; (80121cc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3708      	adds	r7, #8
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	20003ac4 	.word	0x20003ac4
 80121d0:	08015b44 	.word	0x08015b44

080121d4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	4603      	mov	r3, r0
 80121dc:	6039      	str	r1, [r7, #0]
 80121de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	221a      	movs	r2, #26
 80121e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80121e6:	f000 f855 	bl	8012294 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80121ea:	4b02      	ldr	r3, [pc, #8]	; (80121f4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	20000110 	.word	0x20000110

080121f8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	4603      	mov	r3, r0
 8012200:	6039      	str	r1, [r7, #0]
 8012202:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012204:	79fb      	ldrb	r3, [r7, #7]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d105      	bne.n	8012216 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801220a:	683a      	ldr	r2, [r7, #0]
 801220c:	4907      	ldr	r1, [pc, #28]	; (801222c <USBD_HS_ConfigStrDescriptor+0x34>)
 801220e:	4808      	ldr	r0, [pc, #32]	; (8012230 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012210:	f7fd fd96 	bl	800fd40 <USBD_GetString>
 8012214:	e004      	b.n	8012220 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012216:	683a      	ldr	r2, [r7, #0]
 8012218:	4904      	ldr	r1, [pc, #16]	; (801222c <USBD_HS_ConfigStrDescriptor+0x34>)
 801221a:	4805      	ldr	r0, [pc, #20]	; (8012230 <USBD_HS_ConfigStrDescriptor+0x38>)
 801221c:	f7fd fd90 	bl	800fd40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012220:	4b02      	ldr	r3, [pc, #8]	; (801222c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012222:	4618      	mov	r0, r3
 8012224:	3708      	adds	r7, #8
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
 801222a:	bf00      	nop
 801222c:	20003ac4 	.word	0x20003ac4
 8012230:	08015b58 	.word	0x08015b58

08012234 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	4603      	mov	r3, r0
 801223c:	6039      	str	r1, [r7, #0]
 801223e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012240:	79fb      	ldrb	r3, [r7, #7]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d105      	bne.n	8012252 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012246:	683a      	ldr	r2, [r7, #0]
 8012248:	4907      	ldr	r1, [pc, #28]	; (8012268 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801224a:	4808      	ldr	r0, [pc, #32]	; (801226c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801224c:	f7fd fd78 	bl	800fd40 <USBD_GetString>
 8012250:	e004      	b.n	801225c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012252:	683a      	ldr	r2, [r7, #0]
 8012254:	4904      	ldr	r1, [pc, #16]	; (8012268 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012256:	4805      	ldr	r0, [pc, #20]	; (801226c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012258:	f7fd fd72 	bl	800fd40 <USBD_GetString>
  }
  return USBD_StrDesc;
 801225c:	4b02      	ldr	r3, [pc, #8]	; (8012268 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	20003ac4 	.word	0x20003ac4
 801226c:	08015b64 	.word	0x08015b64

08012270 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	4603      	mov	r3, r0
 8012278:	6039      	str	r1, [r7, #0]
 801227a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	220c      	movs	r2, #12
 8012280:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8012282:	4b03      	ldr	r3, [pc, #12]	; (8012290 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8012284:	4618      	mov	r0, r3
 8012286:	370c      	adds	r7, #12
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr
 8012290:	20000100 	.word	0x20000100

08012294 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801229a:	4b0f      	ldr	r3, [pc, #60]	; (80122d8 <Get_SerialNum+0x44>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80122a0:	4b0e      	ldr	r3, [pc, #56]	; (80122dc <Get_SerialNum+0x48>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80122a6:	4b0e      	ldr	r3, [pc, #56]	; (80122e0 <Get_SerialNum+0x4c>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80122ac:	68fa      	ldr	r2, [r7, #12]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	4413      	add	r3, r2
 80122b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d009      	beq.n	80122ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80122ba:	2208      	movs	r2, #8
 80122bc:	4909      	ldr	r1, [pc, #36]	; (80122e4 <Get_SerialNum+0x50>)
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f000 f814 	bl	80122ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80122c4:	2204      	movs	r2, #4
 80122c6:	4908      	ldr	r1, [pc, #32]	; (80122e8 <Get_SerialNum+0x54>)
 80122c8:	68b8      	ldr	r0, [r7, #8]
 80122ca:	f000 f80f 	bl	80122ec <IntToUnicode>
  }
}
 80122ce:	bf00      	nop
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	1ff0f420 	.word	0x1ff0f420
 80122dc:	1ff0f424 	.word	0x1ff0f424
 80122e0:	1ff0f428 	.word	0x1ff0f428
 80122e4:	20000112 	.word	0x20000112
 80122e8:	20000122 	.word	0x20000122

080122ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b087      	sub	sp, #28
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	4613      	mov	r3, r2
 80122f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80122fa:	2300      	movs	r3, #0
 80122fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80122fe:	2300      	movs	r3, #0
 8012300:	75fb      	strb	r3, [r7, #23]
 8012302:	e027      	b.n	8012354 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	0f1b      	lsrs	r3, r3, #28
 8012308:	2b09      	cmp	r3, #9
 801230a:	d80b      	bhi.n	8012324 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	0f1b      	lsrs	r3, r3, #28
 8012310:	b2da      	uxtb	r2, r3
 8012312:	7dfb      	ldrb	r3, [r7, #23]
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	4619      	mov	r1, r3
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	440b      	add	r3, r1
 801231c:	3230      	adds	r2, #48	; 0x30
 801231e:	b2d2      	uxtb	r2, r2
 8012320:	701a      	strb	r2, [r3, #0]
 8012322:	e00a      	b.n	801233a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	0f1b      	lsrs	r3, r3, #28
 8012328:	b2da      	uxtb	r2, r3
 801232a:	7dfb      	ldrb	r3, [r7, #23]
 801232c:	005b      	lsls	r3, r3, #1
 801232e:	4619      	mov	r1, r3
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	440b      	add	r3, r1
 8012334:	3237      	adds	r2, #55	; 0x37
 8012336:	b2d2      	uxtb	r2, r2
 8012338:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	011b      	lsls	r3, r3, #4
 801233e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012340:	7dfb      	ldrb	r3, [r7, #23]
 8012342:	005b      	lsls	r3, r3, #1
 8012344:	3301      	adds	r3, #1
 8012346:	68ba      	ldr	r2, [r7, #8]
 8012348:	4413      	add	r3, r2
 801234a:	2200      	movs	r2, #0
 801234c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801234e:	7dfb      	ldrb	r3, [r7, #23]
 8012350:	3301      	adds	r3, #1
 8012352:	75fb      	strb	r3, [r7, #23]
 8012354:	7dfa      	ldrb	r2, [r7, #23]
 8012356:	79fb      	ldrb	r3, [r7, #7]
 8012358:	429a      	cmp	r2, r3
 801235a:	d3d3      	bcc.n	8012304 <IntToUnicode+0x18>
  }
}
 801235c:	bf00      	nop
 801235e:	bf00      	nop
 8012360:	371c      	adds	r7, #28
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
	...

0801236c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b0aa      	sub	sp, #168	; 0xa8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012374:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012378:	2200      	movs	r2, #0
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	605a      	str	r2, [r3, #4]
 801237e:	609a      	str	r2, [r3, #8]
 8012380:	60da      	str	r2, [r3, #12]
 8012382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012384:	f107 0310 	add.w	r3, r7, #16
 8012388:	2284      	movs	r2, #132	; 0x84
 801238a:	2100      	movs	r1, #0
 801238c:	4618      	mov	r0, r3
 801238e:	f000 fea9 	bl	80130e4 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	4a26      	ldr	r2, [pc, #152]	; (8012430 <HAL_PCD_MspInit+0xc4>)
 8012398:	4293      	cmp	r3, r2
 801239a:	d145      	bne.n	8012428 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801239c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80123a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80123a2:	2300      	movs	r3, #0
 80123a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80123a8:	f107 0310 	add.w	r3, r7, #16
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7f4 ff11 	bl	80071d4 <HAL_RCCEx_PeriphCLKConfig>
 80123b2:	4603      	mov	r3, r0
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d001      	beq.n	80123bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80123b8:	f7ef fb02 	bl	80019c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80123bc:	4b1d      	ldr	r3, [pc, #116]	; (8012434 <HAL_PCD_MspInit+0xc8>)
 80123be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123c0:	4a1c      	ldr	r2, [pc, #112]	; (8012434 <HAL_PCD_MspInit+0xc8>)
 80123c2:	f043 0302 	orr.w	r3, r3, #2
 80123c6:	6313      	str	r3, [r2, #48]	; 0x30
 80123c8:	4b1a      	ldr	r3, [pc, #104]	; (8012434 <HAL_PCD_MspInit+0xc8>)
 80123ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123cc:	f003 0302 	and.w	r3, r3, #2
 80123d0:	60fb      	str	r3, [r7, #12]
 80123d2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80123d4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80123d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80123dc:	2302      	movs	r3, #2
 80123de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123e2:	2300      	movs	r3, #0
 80123e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80123e8:	2303      	movs	r3, #3
 80123ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80123ee:	230c      	movs	r3, #12
 80123f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80123f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80123f8:	4619      	mov	r1, r3
 80123fa:	480f      	ldr	r0, [pc, #60]	; (8012438 <HAL_PCD_MspInit+0xcc>)
 80123fc:	f7f0 ffd8 	bl	80033b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012400:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <HAL_PCD_MspInit+0xc8>)
 8012402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012404:	4a0b      	ldr	r2, [pc, #44]	; (8012434 <HAL_PCD_MspInit+0xc8>)
 8012406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801240a:	6313      	str	r3, [r2, #48]	; 0x30
 801240c:	4b09      	ldr	r3, [pc, #36]	; (8012434 <HAL_PCD_MspInit+0xc8>)
 801240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012414:	60bb      	str	r3, [r7, #8]
 8012416:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012418:	2200      	movs	r2, #0
 801241a:	2100      	movs	r1, #0
 801241c:	204d      	movs	r0, #77	; 0x4d
 801241e:	f7f0 fbf6 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012422:	204d      	movs	r0, #77	; 0x4d
 8012424:	f7f0 fc0f 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012428:	bf00      	nop
 801242a:	37a8      	adds	r7, #168	; 0xa8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	40040000 	.word	0x40040000
 8012434:	40023800 	.word	0x40023800
 8012438:	40020400 	.word	0x40020400

0801243c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012450:	4619      	mov	r1, r3
 8012452:	4610      	mov	r0, r2
 8012454:	f7fc faeb 	bl	800ea2e <USBD_LL_SetupStage>
}
 8012458:	bf00      	nop
 801245a:	3708      	adds	r7, #8
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	460b      	mov	r3, r1
 801246a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8012472:	78fa      	ldrb	r2, [r7, #3]
 8012474:	6879      	ldr	r1, [r7, #4]
 8012476:	4613      	mov	r3, r2
 8012478:	00db      	lsls	r3, r3, #3
 801247a:	4413      	add	r3, r2
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	440b      	add	r3, r1
 8012480:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	78fb      	ldrb	r3, [r7, #3]
 8012488:	4619      	mov	r1, r3
 801248a:	f7fc fb25 	bl	800ead8 <USBD_LL_DataOutStage>
}
 801248e:	bf00      	nop
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012496:	b580      	push	{r7, lr}
 8012498:	b082      	sub	sp, #8
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
 801249e:	460b      	mov	r3, r1
 80124a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80124a8:	78fa      	ldrb	r2, [r7, #3]
 80124aa:	6879      	ldr	r1, [r7, #4]
 80124ac:	4613      	mov	r3, r2
 80124ae:	00db      	lsls	r3, r3, #3
 80124b0:	4413      	add	r3, r2
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	440b      	add	r3, r1
 80124b6:	334c      	adds	r3, #76	; 0x4c
 80124b8:	681a      	ldr	r2, [r3, #0]
 80124ba:	78fb      	ldrb	r3, [r7, #3]
 80124bc:	4619      	mov	r1, r3
 80124be:	f7fc fbbe 	bl	800ec3e <USBD_LL_DataInStage>
}
 80124c2:	bf00      	nop
 80124c4:	3708      	adds	r7, #8
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}

080124ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b082      	sub	sp, #8
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fc fcf2 	bl	800eec2 <USBD_LL_SOF>
}
 80124de:	bf00      	nop
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124e6:	b580      	push	{r7, lr}
 80124e8:	b084      	sub	sp, #16
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80124ee:	2301      	movs	r3, #1
 80124f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d102      	bne.n	8012500 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80124fa:	2300      	movs	r3, #0
 80124fc:	73fb      	strb	r3, [r7, #15]
 80124fe:	e008      	b.n	8012512 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	2b02      	cmp	r3, #2
 8012506:	d102      	bne.n	801250e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012508:	2301      	movs	r3, #1
 801250a:	73fb      	strb	r3, [r7, #15]
 801250c:	e001      	b.n	8012512 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801250e:	f7ef fa57 	bl	80019c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012518:	7bfa      	ldrb	r2, [r7, #15]
 801251a:	4611      	mov	r1, r2
 801251c:	4618      	mov	r0, r3
 801251e:	f7fc fc92 	bl	800ee46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012528:	4618      	mov	r0, r3
 801252a:	f7fc fc3a 	bl	800eda2 <USBD_LL_Reset>
}
 801252e:	bf00      	nop
 8012530:	3710      	adds	r7, #16
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
	...

08012538 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012546:	4618      	mov	r0, r3
 8012548:	f7fc fc8d 	bl	800ee66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	6812      	ldr	r2, [r2, #0]
 801255a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801255e:	f043 0301 	orr.w	r3, r3, #1
 8012562:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6a1b      	ldr	r3, [r3, #32]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d005      	beq.n	8012578 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801256c:	4b04      	ldr	r3, [pc, #16]	; (8012580 <HAL_PCD_SuspendCallback+0x48>)
 801256e:	691b      	ldr	r3, [r3, #16]
 8012570:	4a03      	ldr	r2, [pc, #12]	; (8012580 <HAL_PCD_SuspendCallback+0x48>)
 8012572:	f043 0306 	orr.w	r3, r3, #6
 8012576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012578:	bf00      	nop
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	e000ed00 	.word	0xe000ed00

08012584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012592:	4618      	mov	r0, r3
 8012594:	f7fc fc7d 	bl	800ee92 <USBD_LL_Resume>
}
 8012598:	bf00      	nop
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	460b      	mov	r3, r1
 80125aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80125b2:	78fa      	ldrb	r2, [r7, #3]
 80125b4:	4611      	mov	r1, r2
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7fc fcd5 	bl	800ef66 <USBD_LL_IsoOUTIncomplete>
}
 80125bc:	bf00      	nop
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	460b      	mov	r3, r1
 80125ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80125d6:	78fa      	ldrb	r2, [r7, #3]
 80125d8:	4611      	mov	r1, r2
 80125da:	4618      	mov	r0, r3
 80125dc:	f7fc fc91 	bl	800ef02 <USBD_LL_IsoINIncomplete>
}
 80125e0:	bf00      	nop
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fc fce7 	bl	800efca <USBD_LL_DevConnected>
}
 80125fc:	bf00      	nop
 80125fe:	3708      	adds	r7, #8
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}

08012604 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b082      	sub	sp, #8
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012612:	4618      	mov	r0, r3
 8012614:	f7fc fce4 	bl	800efe0 <USBD_LL_DevDisconnected>
}
 8012618:	bf00      	nop
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	2b01      	cmp	r3, #1
 801262e:	d140      	bne.n	80126b2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012630:	4a22      	ldr	r2, [pc, #136]	; (80126bc <USBD_LL_Init+0x9c>)
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4a20      	ldr	r2, [pc, #128]	; (80126bc <USBD_LL_Init+0x9c>)
 801263c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012640:	4b1e      	ldr	r3, [pc, #120]	; (80126bc <USBD_LL_Init+0x9c>)
 8012642:	4a1f      	ldr	r2, [pc, #124]	; (80126c0 <USBD_LL_Init+0xa0>)
 8012644:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8012646:	4b1d      	ldr	r3, [pc, #116]	; (80126bc <USBD_LL_Init+0x9c>)
 8012648:	2208      	movs	r2, #8
 801264a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801264c:	4b1b      	ldr	r3, [pc, #108]	; (80126bc <USBD_LL_Init+0x9c>)
 801264e:	2202      	movs	r2, #2
 8012650:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012652:	4b1a      	ldr	r3, [pc, #104]	; (80126bc <USBD_LL_Init+0x9c>)
 8012654:	2200      	movs	r2, #0
 8012656:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012658:	4b18      	ldr	r3, [pc, #96]	; (80126bc <USBD_LL_Init+0x9c>)
 801265a:	2202      	movs	r2, #2
 801265c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801265e:	4b17      	ldr	r3, [pc, #92]	; (80126bc <USBD_LL_Init+0x9c>)
 8012660:	2200      	movs	r2, #0
 8012662:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012664:	4b15      	ldr	r3, [pc, #84]	; (80126bc <USBD_LL_Init+0x9c>)
 8012666:	2200      	movs	r2, #0
 8012668:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801266a:	4b14      	ldr	r3, [pc, #80]	; (80126bc <USBD_LL_Init+0x9c>)
 801266c:	2200      	movs	r2, #0
 801266e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8012670:	4b12      	ldr	r3, [pc, #72]	; (80126bc <USBD_LL_Init+0x9c>)
 8012672:	2200      	movs	r2, #0
 8012674:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012676:	4b11      	ldr	r3, [pc, #68]	; (80126bc <USBD_LL_Init+0x9c>)
 8012678:	2200      	movs	r2, #0
 801267a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801267c:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <USBD_LL_Init+0x9c>)
 801267e:	2200      	movs	r2, #0
 8012680:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012682:	480e      	ldr	r0, [pc, #56]	; (80126bc <USBD_LL_Init+0x9c>)
 8012684:	f7f2 fdc6 	bl	8005214 <HAL_PCD_Init>
 8012688:	4603      	mov	r3, r0
 801268a:	2b00      	cmp	r3, #0
 801268c:	d001      	beq.n	8012692 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801268e:	f7ef f997 	bl	80019c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012696:	4809      	ldr	r0, [pc, #36]	; (80126bc <USBD_LL_Init+0x9c>)
 8012698:	f7f4 f83f 	bl	800671a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801269c:	2280      	movs	r2, #128	; 0x80
 801269e:	2100      	movs	r1, #0
 80126a0:	4806      	ldr	r0, [pc, #24]	; (80126bc <USBD_LL_Init+0x9c>)
 80126a2:	f7f3 fff3 	bl	800668c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80126a6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80126aa:	2101      	movs	r1, #1
 80126ac:	4803      	ldr	r0, [pc, #12]	; (80126bc <USBD_LL_Init+0x9c>)
 80126ae:	f7f3 ffed 	bl	800668c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80126b2:	2300      	movs	r3, #0
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3708      	adds	r7, #8
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	20003cc4 	.word	0x20003cc4
 80126c0:	40040000 	.word	0x40040000

080126c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126cc:	2300      	movs	r3, #0
 80126ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126d0:	2300      	movs	r3, #0
 80126d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80126da:	4618      	mov	r0, r3
 80126dc:	f7f2 febe 	bl	800545c <HAL_PCD_Start>
 80126e0:	4603      	mov	r3, r0
 80126e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126e4:	7bfb      	ldrb	r3, [r7, #15]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f000 f97e 	bl	80129e8 <USBD_Get_USB_Status>
 80126ec:	4603      	mov	r3, r0
 80126ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3710      	adds	r7, #16
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}

080126fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80126fa:	b580      	push	{r7, lr}
 80126fc:	b084      	sub	sp, #16
 80126fe:	af00      	add	r7, sp, #0
 8012700:	6078      	str	r0, [r7, #4]
 8012702:	4608      	mov	r0, r1
 8012704:	4611      	mov	r1, r2
 8012706:	461a      	mov	r2, r3
 8012708:	4603      	mov	r3, r0
 801270a:	70fb      	strb	r3, [r7, #3]
 801270c:	460b      	mov	r3, r1
 801270e:	70bb      	strb	r3, [r7, #2]
 8012710:	4613      	mov	r3, r2
 8012712:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012714:	2300      	movs	r3, #0
 8012716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012718:	2300      	movs	r3, #0
 801271a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012722:	78bb      	ldrb	r3, [r7, #2]
 8012724:	883a      	ldrh	r2, [r7, #0]
 8012726:	78f9      	ldrb	r1, [r7, #3]
 8012728:	f7f3 fbab 	bl	8005e82 <HAL_PCD_EP_Open>
 801272c:	4603      	mov	r3, r0
 801272e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012730:	7bfb      	ldrb	r3, [r7, #15]
 8012732:	4618      	mov	r0, r3
 8012734:	f000 f958 	bl	80129e8 <USBD_Get_USB_Status>
 8012738:	4603      	mov	r3, r0
 801273a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801273c:	7bbb      	ldrb	r3, [r7, #14]
}
 801273e:	4618      	mov	r0, r3
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012746:	b580      	push	{r7, lr}
 8012748:	b084      	sub	sp, #16
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
 801274e:	460b      	mov	r3, r1
 8012750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012752:	2300      	movs	r3, #0
 8012754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012756:	2300      	movs	r3, #0
 8012758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012760:	78fa      	ldrb	r2, [r7, #3]
 8012762:	4611      	mov	r1, r2
 8012764:	4618      	mov	r0, r3
 8012766:	f7f3 fbf4 	bl	8005f52 <HAL_PCD_EP_Close>
 801276a:	4603      	mov	r3, r0
 801276c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801276e:	7bfb      	ldrb	r3, [r7, #15]
 8012770:	4618      	mov	r0, r3
 8012772:	f000 f939 	bl	80129e8 <USBD_Get_USB_Status>
 8012776:	4603      	mov	r3, r0
 8012778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801277a:	7bbb      	ldrb	r3, [r7, #14]
}
 801277c:	4618      	mov	r0, r3
 801277e:	3710      	adds	r7, #16
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b084      	sub	sp, #16
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	460b      	mov	r3, r1
 801278e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012790:	2300      	movs	r3, #0
 8012792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012794:	2300      	movs	r3, #0
 8012796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801279e:	78fa      	ldrb	r2, [r7, #3]
 80127a0:	4611      	mov	r1, r2
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7f3 fccc 	bl	8006140 <HAL_PCD_EP_SetStall>
 80127a8:	4603      	mov	r3, r0
 80127aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127ac:	7bfb      	ldrb	r3, [r7, #15]
 80127ae:	4618      	mov	r0, r3
 80127b0:	f000 f91a 	bl	80129e8 <USBD_Get_USB_Status>
 80127b4:	4603      	mov	r3, r0
 80127b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	3710      	adds	r7, #16
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}

080127c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b084      	sub	sp, #16
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
 80127ca:	460b      	mov	r3, r1
 80127cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127ce:	2300      	movs	r3, #0
 80127d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127d2:	2300      	movs	r3, #0
 80127d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80127dc:	78fa      	ldrb	r2, [r7, #3]
 80127de:	4611      	mov	r1, r2
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7f3 fd11 	bl	8006208 <HAL_PCD_EP_ClrStall>
 80127e6:	4603      	mov	r3, r0
 80127e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127ea:	7bfb      	ldrb	r3, [r7, #15]
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 f8fb 	bl	80129e8 <USBD_Get_USB_Status>
 80127f2:	4603      	mov	r3, r0
 80127f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3710      	adds	r7, #16
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	460b      	mov	r3, r1
 801280a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012812:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012818:	2b00      	cmp	r3, #0
 801281a:	da0b      	bge.n	8012834 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801281c:	78fb      	ldrb	r3, [r7, #3]
 801281e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012822:	68f9      	ldr	r1, [r7, #12]
 8012824:	4613      	mov	r3, r2
 8012826:	00db      	lsls	r3, r3, #3
 8012828:	4413      	add	r3, r2
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	440b      	add	r3, r1
 801282e:	333e      	adds	r3, #62	; 0x3e
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	e00b      	b.n	801284c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012834:	78fb      	ldrb	r3, [r7, #3]
 8012836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801283a:	68f9      	ldr	r1, [r7, #12]
 801283c:	4613      	mov	r3, r2
 801283e:	00db      	lsls	r3, r3, #3
 8012840:	4413      	add	r3, r2
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	440b      	add	r3, r1
 8012846:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801284a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801284c:	4618      	mov	r0, r3
 801284e:	3714      	adds	r7, #20
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr

08012858 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	460b      	mov	r3, r1
 8012862:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012864:	2300      	movs	r3, #0
 8012866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012868:	2300      	movs	r3, #0
 801286a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012872:	78fa      	ldrb	r2, [r7, #3]
 8012874:	4611      	mov	r1, r2
 8012876:	4618      	mov	r0, r3
 8012878:	f7f3 fade 	bl	8005e38 <HAL_PCD_SetAddress>
 801287c:	4603      	mov	r3, r0
 801287e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012880:	7bfb      	ldrb	r3, [r7, #15]
 8012882:	4618      	mov	r0, r3
 8012884:	f000 f8b0 	bl	80129e8 <USBD_Get_USB_Status>
 8012888:	4603      	mov	r3, r0
 801288a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801288c:	7bbb      	ldrb	r3, [r7, #14]
}
 801288e:	4618      	mov	r0, r3
 8012890:	3710      	adds	r7, #16
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012896:	b580      	push	{r7, lr}
 8012898:	b086      	sub	sp, #24
 801289a:	af00      	add	r7, sp, #0
 801289c:	60f8      	str	r0, [r7, #12]
 801289e:	607a      	str	r2, [r7, #4]
 80128a0:	603b      	str	r3, [r7, #0]
 80128a2:	460b      	mov	r3, r1
 80128a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128a6:	2300      	movs	r3, #0
 80128a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128aa:	2300      	movs	r3, #0
 80128ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80128b4:	7af9      	ldrb	r1, [r7, #11]
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	f7f3 fbf7 	bl	80060ac <HAL_PCD_EP_Transmit>
 80128be:	4603      	mov	r3, r0
 80128c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128c2:	7dfb      	ldrb	r3, [r7, #23]
 80128c4:	4618      	mov	r0, r3
 80128c6:	f000 f88f 	bl	80129e8 <USBD_Get_USB_Status>
 80128ca:	4603      	mov	r3, r0
 80128cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80128ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3718      	adds	r7, #24
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b086      	sub	sp, #24
 80128dc:	af00      	add	r7, sp, #0
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	607a      	str	r2, [r7, #4]
 80128e2:	603b      	str	r3, [r7, #0]
 80128e4:	460b      	mov	r3, r1
 80128e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128e8:	2300      	movs	r3, #0
 80128ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128ec:	2300      	movs	r3, #0
 80128ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80128f6:	7af9      	ldrb	r1, [r7, #11]
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	f7f3 fb73 	bl	8005fe6 <HAL_PCD_EP_Receive>
 8012900:	4603      	mov	r3, r0
 8012902:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012904:	7dfb      	ldrb	r3, [r7, #23]
 8012906:	4618      	mov	r0, r3
 8012908:	f000 f86e 	bl	80129e8 <USBD_Get_USB_Status>
 801290c:	4603      	mov	r3, r0
 801290e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012910:	7dbb      	ldrb	r3, [r7, #22]
}
 8012912:	4618      	mov	r0, r3
 8012914:	3718      	adds	r7, #24
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}

0801291a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801291a:	b580      	push	{r7, lr}
 801291c:	b082      	sub	sp, #8
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
 8012922:	460b      	mov	r3, r1
 8012924:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801292c:	78fa      	ldrb	r2, [r7, #3]
 801292e:	4611      	mov	r1, r2
 8012930:	4618      	mov	r0, r3
 8012932:	f7f3 fba3 	bl	800607c <HAL_PCD_EP_GetRxCount>
 8012936:	4603      	mov	r3, r0
}
 8012938:	4618      	mov	r0, r3
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	460b      	mov	r3, r1
 801294a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801294c:	78fb      	ldrb	r3, [r7, #3]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d002      	beq.n	8012958 <HAL_PCDEx_LPM_Callback+0x18>
 8012952:	2b01      	cmp	r3, #1
 8012954:	d01f      	beq.n	8012996 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012956:	e03b      	b.n	80129d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6a1b      	ldr	r3, [r3, #32]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d007      	beq.n	8012970 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012960:	f000 f83c 	bl	80129dc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012964:	4b1c      	ldr	r3, [pc, #112]	; (80129d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8012966:	691b      	ldr	r3, [r3, #16]
 8012968:	4a1b      	ldr	r2, [pc, #108]	; (80129d8 <HAL_PCDEx_LPM_Callback+0x98>)
 801296a:	f023 0306 	bic.w	r3, r3, #6
 801296e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	6812      	ldr	r2, [r2, #0]
 801297e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012982:	f023 0301 	bic.w	r3, r3, #1
 8012986:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801298e:	4618      	mov	r0, r3
 8012990:	f7fc fa7f 	bl	800ee92 <USBD_LL_Resume>
    break;
 8012994:	e01c      	b.n	80129d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	6812      	ldr	r2, [r2, #0]
 80129a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80129a8:	f043 0301 	orr.w	r3, r3, #1
 80129ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7fc fa56 	bl	800ee66 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6a1b      	ldr	r3, [r3, #32]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d005      	beq.n	80129ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80129c2:	4b05      	ldr	r3, [pc, #20]	; (80129d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80129c4:	691b      	ldr	r3, [r3, #16]
 80129c6:	4a04      	ldr	r2, [pc, #16]	; (80129d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80129c8:	f043 0306 	orr.w	r3, r3, #6
 80129cc:	6113      	str	r3, [r2, #16]
    break;
 80129ce:	bf00      	nop
}
 80129d0:	bf00      	nop
 80129d2:	3708      	adds	r7, #8
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	e000ed00 	.word	0xe000ed00

080129dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80129e0:	f7ee fc16 	bl	8001210 <SystemClock_Config>
}
 80129e4:	bf00      	nop
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80129e8:	b480      	push	{r7}
 80129ea:	b085      	sub	sp, #20
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	4603      	mov	r3, r0
 80129f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129f2:	2300      	movs	r3, #0
 80129f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80129f6:	79fb      	ldrb	r3, [r7, #7]
 80129f8:	2b03      	cmp	r3, #3
 80129fa:	d817      	bhi.n	8012a2c <USBD_Get_USB_Status+0x44>
 80129fc:	a201      	add	r2, pc, #4	; (adr r2, 8012a04 <USBD_Get_USB_Status+0x1c>)
 80129fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a02:	bf00      	nop
 8012a04:	08012a15 	.word	0x08012a15
 8012a08:	08012a1b 	.word	0x08012a1b
 8012a0c:	08012a21 	.word	0x08012a21
 8012a10:	08012a27 	.word	0x08012a27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012a14:	2300      	movs	r3, #0
 8012a16:	73fb      	strb	r3, [r7, #15]
    break;
 8012a18:	e00b      	b.n	8012a32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012a1a:	2303      	movs	r3, #3
 8012a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8012a1e:	e008      	b.n	8012a32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012a20:	2301      	movs	r3, #1
 8012a22:	73fb      	strb	r3, [r7, #15]
    break;
 8012a24:	e005      	b.n	8012a32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012a26:	2303      	movs	r3, #3
 8012a28:	73fb      	strb	r3, [r7, #15]
    break;
 8012a2a:	e002      	b.n	8012a32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012a2c:	2303      	movs	r3, #3
 8012a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a30:	bf00      	nop
  }
  return usb_status;
 8012a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3714      	adds	r7, #20
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012a44:	2201      	movs	r2, #1
 8012a46:	490e      	ldr	r1, [pc, #56]	; (8012a80 <MX_USB_HOST_Init+0x40>)
 8012a48:	480e      	ldr	r0, [pc, #56]	; (8012a84 <MX_USB_HOST_Init+0x44>)
 8012a4a:	f7fd fdf5 	bl	8010638 <USBH_Init>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d001      	beq.n	8012a58 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012a54:	f7ee ffb4 	bl	80019c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8012a58:	490b      	ldr	r1, [pc, #44]	; (8012a88 <MX_USB_HOST_Init+0x48>)
 8012a5a:	480a      	ldr	r0, [pc, #40]	; (8012a84 <MX_USB_HOST_Init+0x44>)
 8012a5c:	f7fd fe99 	bl	8010792 <USBH_RegisterClass>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d001      	beq.n	8012a6a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012a66:	f7ee ffab 	bl	80019c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012a6a:	4806      	ldr	r0, [pc, #24]	; (8012a84 <MX_USB_HOST_Init+0x44>)
 8012a6c:	f7fd ff1d 	bl	80108aa <USBH_Start>
 8012a70:	4603      	mov	r3, r0
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d001      	beq.n	8012a7a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012a76:	f7ee ffa3 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012a7a:	bf00      	nop
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	08012aa1 	.word	0x08012aa1
 8012a84:	200041cc 	.word	0x200041cc
 8012a88:	20000098 	.word	0x20000098

08012a8c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8012a90:	4802      	ldr	r0, [pc, #8]	; (8012a9c <MX_USB_HOST_Process+0x10>)
 8012a92:	f7fd ff1b 	bl	80108cc <USBH_Process>
}
 8012a96:	bf00      	nop
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	200041cc 	.word	0x200041cc

08012aa0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b083      	sub	sp, #12
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	460b      	mov	r3, r1
 8012aaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012aac:	78fb      	ldrb	r3, [r7, #3]
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	2b04      	cmp	r3, #4
 8012ab2:	d819      	bhi.n	8012ae8 <USBH_UserProcess+0x48>
 8012ab4:	a201      	add	r2, pc, #4	; (adr r2, 8012abc <USBH_UserProcess+0x1c>)
 8012ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aba:	bf00      	nop
 8012abc:	08012ae9 	.word	0x08012ae9
 8012ac0:	08012ad9 	.word	0x08012ad9
 8012ac4:	08012ae9 	.word	0x08012ae9
 8012ac8:	08012ae1 	.word	0x08012ae1
 8012acc:	08012ad1 	.word	0x08012ad1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012ad0:	4b09      	ldr	r3, [pc, #36]	; (8012af8 <USBH_UserProcess+0x58>)
 8012ad2:	2203      	movs	r2, #3
 8012ad4:	701a      	strb	r2, [r3, #0]
  break;
 8012ad6:	e008      	b.n	8012aea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012ad8:	4b07      	ldr	r3, [pc, #28]	; (8012af8 <USBH_UserProcess+0x58>)
 8012ada:	2202      	movs	r2, #2
 8012adc:	701a      	strb	r2, [r3, #0]
  break;
 8012ade:	e004      	b.n	8012aea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012ae0:	4b05      	ldr	r3, [pc, #20]	; (8012af8 <USBH_UserProcess+0x58>)
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	701a      	strb	r2, [r3, #0]
  break;
 8012ae6:	e000      	b.n	8012aea <USBH_UserProcess+0x4a>

  default:
  break;
 8012ae8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012aea:	bf00      	nop
 8012aec:	370c      	adds	r7, #12
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	200045a4 	.word	0x200045a4

08012afc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b0ac      	sub	sp, #176	; 0xb0
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012b08:	2200      	movs	r2, #0
 8012b0a:	601a      	str	r2, [r3, #0]
 8012b0c:	605a      	str	r2, [r3, #4]
 8012b0e:	609a      	str	r2, [r3, #8]
 8012b10:	60da      	str	r2, [r3, #12]
 8012b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012b14:	f107 0318 	add.w	r3, r7, #24
 8012b18:	2284      	movs	r2, #132	; 0x84
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f000 fae1 	bl	80130e4 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012b2a:	d151      	bne.n	8012bd0 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8012b2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012b30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8012b32:	2300      	movs	r3, #0
 8012b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012b38:	f107 0318 	add.w	r3, r7, #24
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7f4 fb49 	bl	80071d4 <HAL_RCCEx_PeriphCLKConfig>
 8012b42:	4603      	mov	r3, r0
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d001      	beq.n	8012b4c <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8012b48:	f7ee ff3a 	bl	80019c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012b4c:	4b22      	ldr	r3, [pc, #136]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b50:	4a21      	ldr	r2, [pc, #132]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012b52:	f043 0301 	orr.w	r3, r3, #1
 8012b56:	6313      	str	r3, [r2, #48]	; 0x30
 8012b58:	4b1f      	ldr	r3, [pc, #124]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b5c:	f003 0301 	and.w	r3, r3, #1
 8012b60:	617b      	str	r3, [r7, #20]
 8012b62:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8012b64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b6c:	2302      	movs	r3, #2
 8012b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b72:	2300      	movs	r3, #0
 8012b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012b78:	2303      	movs	r3, #3
 8012b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012b7e:	230a      	movs	r3, #10
 8012b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012b84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012b88:	4619      	mov	r1, r3
 8012b8a:	4814      	ldr	r0, [pc, #80]	; (8012bdc <HAL_HCD_MspInit+0xe0>)
 8012b8c:	f7f0 fc10 	bl	80033b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012b90:	4b11      	ldr	r3, [pc, #68]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b94:	4a10      	ldr	r2, [pc, #64]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b9a:	6353      	str	r3, [r2, #52]	; 0x34
 8012b9c:	4b0e      	ldr	r3, [pc, #56]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ba4:	613b      	str	r3, [r7, #16]
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	4b0b      	ldr	r3, [pc, #44]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bac:	4a0a      	ldr	r2, [pc, #40]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8012bb4:	4b08      	ldr	r3, [pc, #32]	; (8012bd8 <HAL_HCD_MspInit+0xdc>)
 8012bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012bbc:	60fb      	str	r3, [r7, #12]
 8012bbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	2043      	movs	r0, #67	; 0x43
 8012bc6:	f7f0 f822 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012bca:	2043      	movs	r0, #67	; 0x43
 8012bcc:	f7f0 f83b 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012bd0:	bf00      	nop
 8012bd2:	37b0      	adds	r7, #176	; 0xb0
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	40023800 	.word	0x40023800
 8012bdc:	40020000 	.word	0x40020000

08012be0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fe fa4b 	bl	801108a <USBH_LL_IncTimer>
}
 8012bf4:	bf00      	nop
 8012bf6:	3708      	adds	r7, #8
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fe fa83 	bl	8011116 <USBH_LL_Connect>
}
 8012c10:	bf00      	nop
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fe fa8c 	bl	8011144 <USBH_LL_Disconnect>
}
 8012c2c:	bf00      	nop
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	70fb      	strb	r3, [r7, #3]
 8012c40:	4613      	mov	r3, r2
 8012c42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8012c44:	bf00      	nop
 8012c46:	370c      	adds	r7, #12
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr

08012c50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7fe fa3d 	bl	80110de <USBH_LL_PortEnabled>
}
 8012c64:	bf00      	nop
 8012c66:	3708      	adds	r7, #8
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fe fa3d 	bl	80110fa <USBH_LL_PortDisabled>
}
 8012c80:	bf00      	nop
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	d12a      	bne.n	8012cf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012c9a:	4a18      	ldr	r2, [pc, #96]	; (8012cfc <USBH_LL_Init+0x74>)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	4a15      	ldr	r2, [pc, #84]	; (8012cfc <USBH_LL_Init+0x74>)
 8012ca6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012caa:	4b14      	ldr	r3, [pc, #80]	; (8012cfc <USBH_LL_Init+0x74>)
 8012cac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012cb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012cb2:	4b12      	ldr	r3, [pc, #72]	; (8012cfc <USBH_LL_Init+0x74>)
 8012cb4:	2208      	movs	r2, #8
 8012cb6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012cb8:	4b10      	ldr	r3, [pc, #64]	; (8012cfc <USBH_LL_Init+0x74>)
 8012cba:	2201      	movs	r2, #1
 8012cbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012cbe:	4b0f      	ldr	r3, [pc, #60]	; (8012cfc <USBH_LL_Init+0x74>)
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012cc4:	4b0d      	ldr	r3, [pc, #52]	; (8012cfc <USBH_LL_Init+0x74>)
 8012cc6:	2202      	movs	r2, #2
 8012cc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012cca:	4b0c      	ldr	r3, [pc, #48]	; (8012cfc <USBH_LL_Init+0x74>)
 8012ccc:	2200      	movs	r2, #0
 8012cce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012cd0:	480a      	ldr	r0, [pc, #40]	; (8012cfc <USBH_LL_Init+0x74>)
 8012cd2:	f7f0 fd64 	bl	800379e <HAL_HCD_Init>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d001      	beq.n	8012ce0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012cdc:	f7ee fe70 	bl	80019c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012ce0:	4806      	ldr	r0, [pc, #24]	; (8012cfc <USBH_LL_Init+0x74>)
 8012ce2:	f7f1 f948 	bl	8003f76 <HAL_HCD_GetCurrentFrame>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	4619      	mov	r1, r3
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f7fe f9be 	bl	801106c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012cf0:	2300      	movs	r3, #0
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3708      	adds	r7, #8
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	200045a8 	.word	0x200045a8

08012d00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7f1 f8b7 	bl	8003e8a <HAL_HCD_Start>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012d20:	7bfb      	ldrb	r3, [r7, #15]
 8012d22:	4618      	mov	r0, r3
 8012d24:	f000 f95c 	bl	8012fe0 <USBH_Get_USB_Status>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}

08012d36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012d36:	b580      	push	{r7, lr}
 8012d38:	b084      	sub	sp, #16
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012d42:	2300      	movs	r3, #0
 8012d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7f1 f8bf 	bl	8003ed0 <HAL_HCD_Stop>
 8012d52:	4603      	mov	r3, r0
 8012d54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012d56:	7bfb      	ldrb	r3, [r7, #15]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f000 f941 	bl	8012fe0 <USBH_Get_USB_Status>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3710      	adds	r7, #16
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012d74:	2301      	movs	r3, #1
 8012d76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7f1 f907 	bl	8003f92 <HAL_HCD_GetCurrentSpeed>
 8012d84:	4603      	mov	r3, r0
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	d00c      	beq.n	8012da4 <USBH_LL_GetSpeed+0x38>
 8012d8a:	2b02      	cmp	r3, #2
 8012d8c:	d80d      	bhi.n	8012daa <USBH_LL_GetSpeed+0x3e>
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d002      	beq.n	8012d98 <USBH_LL_GetSpeed+0x2c>
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	d003      	beq.n	8012d9e <USBH_LL_GetSpeed+0x32>
 8012d96:	e008      	b.n	8012daa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8012d9c:	e008      	b.n	8012db0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	73fb      	strb	r3, [r7, #15]
    break;
 8012da2:	e005      	b.n	8012db0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012da4:	2302      	movs	r3, #2
 8012da6:	73fb      	strb	r3, [r7, #15]
    break;
 8012da8:	e002      	b.n	8012db0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012daa:	2301      	movs	r3, #1
 8012dac:	73fb      	strb	r3, [r7, #15]
    break;
 8012dae:	bf00      	nop
  }
  return  speed;
 8012db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}

08012dba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012dba:	b580      	push	{r7, lr}
 8012dbc:	b084      	sub	sp, #16
 8012dbe:	af00      	add	r7, sp, #0
 8012dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7f1 f89a 	bl	8003f0a <HAL_HCD_ResetPort>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012dda:	7bfb      	ldrb	r3, [r7, #15]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f000 f8ff 	bl	8012fe0 <USBH_Get_USB_Status>
 8012de2:	4603      	mov	r3, r0
 8012de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3710      	adds	r7, #16
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	460b      	mov	r3, r1
 8012dfa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012e02:	78fa      	ldrb	r2, [r7, #3]
 8012e04:	4611      	mov	r1, r2
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7f1 f8a1 	bl	8003f4e <HAL_HCD_HC_GetXferCount>
 8012e0c:	4603      	mov	r3, r0
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3708      	adds	r7, #8
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012e16:	b590      	push	{r4, r7, lr}
 8012e18:	b089      	sub	sp, #36	; 0x24
 8012e1a:	af04      	add	r7, sp, #16
 8012e1c:	6078      	str	r0, [r7, #4]
 8012e1e:	4608      	mov	r0, r1
 8012e20:	4611      	mov	r1, r2
 8012e22:	461a      	mov	r2, r3
 8012e24:	4603      	mov	r3, r0
 8012e26:	70fb      	strb	r3, [r7, #3]
 8012e28:	460b      	mov	r3, r1
 8012e2a:	70bb      	strb	r3, [r7, #2]
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e30:	2300      	movs	r3, #0
 8012e32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012e34:	2300      	movs	r3, #0
 8012e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012e3e:	787c      	ldrb	r4, [r7, #1]
 8012e40:	78ba      	ldrb	r2, [r7, #2]
 8012e42:	78f9      	ldrb	r1, [r7, #3]
 8012e44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012e46:	9302      	str	r3, [sp, #8]
 8012e48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012e4c:	9301      	str	r3, [sp, #4]
 8012e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e52:	9300      	str	r3, [sp, #0]
 8012e54:	4623      	mov	r3, r4
 8012e56:	f7f0 fd04 	bl	8003862 <HAL_HCD_HC_Init>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012e5e:	7bfb      	ldrb	r3, [r7, #15]
 8012e60:	4618      	mov	r0, r3
 8012e62:	f000 f8bd 	bl	8012fe0 <USBH_Get_USB_Status>
 8012e66:	4603      	mov	r3, r0
 8012e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3714      	adds	r7, #20
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd90      	pop	{r4, r7, pc}

08012e74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e80:	2300      	movs	r3, #0
 8012e82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012e84:	2300      	movs	r3, #0
 8012e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012e8e:	78fa      	ldrb	r2, [r7, #3]
 8012e90:	4611      	mov	r1, r2
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7f0 fd74 	bl	8003980 <HAL_HCD_HC_Halt>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012e9c:	7bfb      	ldrb	r3, [r7, #15]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f000 f89e 	bl	8012fe0 <USBH_Get_USB_Status>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3710      	adds	r7, #16
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012eb2:	b590      	push	{r4, r7, lr}
 8012eb4:	b089      	sub	sp, #36	; 0x24
 8012eb6:	af04      	add	r7, sp, #16
 8012eb8:	6078      	str	r0, [r7, #4]
 8012eba:	4608      	mov	r0, r1
 8012ebc:	4611      	mov	r1, r2
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	70fb      	strb	r3, [r7, #3]
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	70bb      	strb	r3, [r7, #2]
 8012ec8:	4613      	mov	r3, r2
 8012eca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012eda:	787c      	ldrb	r4, [r7, #1]
 8012edc:	78ba      	ldrb	r2, [r7, #2]
 8012ede:	78f9      	ldrb	r1, [r7, #3]
 8012ee0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ee4:	9303      	str	r3, [sp, #12]
 8012ee6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012ee8:	9302      	str	r3, [sp, #8]
 8012eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eec:	9301      	str	r3, [sp, #4]
 8012eee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	4623      	mov	r3, r4
 8012ef6:	f7f0 fd67 	bl	80039c8 <HAL_HCD_HC_SubmitRequest>
 8012efa:	4603      	mov	r3, r0
 8012efc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012efe:	7bfb      	ldrb	r3, [r7, #15]
 8012f00:	4618      	mov	r0, r3
 8012f02:	f000 f86d 	bl	8012fe0 <USBH_Get_USB_Status>
 8012f06:	4603      	mov	r3, r0
 8012f08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3714      	adds	r7, #20
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd90      	pop	{r4, r7, pc}

08012f14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012f26:	78fa      	ldrb	r2, [r7, #3]
 8012f28:	4611      	mov	r1, r2
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7f0 fffb 	bl	8003f26 <HAL_HCD_HC_GetURBState>
 8012f30:	4603      	mov	r3, r0
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3708      	adds	r7, #8
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b082      	sub	sp, #8
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
 8012f42:	460b      	mov	r3, r1
 8012f44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012f4c:	2b01      	cmp	r3, #1
 8012f4e:	d103      	bne.n	8012f58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012f50:	78fb      	ldrb	r3, [r7, #3]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f000 f870 	bl	8013038 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012f58:	20c8      	movs	r0, #200	; 0xc8
 8012f5a:	f7ef fac5 	bl	80024e8 <HAL_Delay>
  return USBH_OK;
 8012f5e:	2300      	movs	r3, #0
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3708      	adds	r7, #8
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b085      	sub	sp, #20
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	460b      	mov	r3, r1
 8012f72:	70fb      	strb	r3, [r7, #3]
 8012f74:	4613      	mov	r3, r2
 8012f76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012f7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012f80:	78fb      	ldrb	r3, [r7, #3]
 8012f82:	68fa      	ldr	r2, [r7, #12]
 8012f84:	212c      	movs	r1, #44	; 0x2c
 8012f86:	fb01 f303 	mul.w	r3, r1, r3
 8012f8a:	4413      	add	r3, r2
 8012f8c:	333b      	adds	r3, #59	; 0x3b
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d009      	beq.n	8012fa8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012f94:	78fb      	ldrb	r3, [r7, #3]
 8012f96:	68fa      	ldr	r2, [r7, #12]
 8012f98:	212c      	movs	r1, #44	; 0x2c
 8012f9a:	fb01 f303 	mul.w	r3, r1, r3
 8012f9e:	4413      	add	r3, r2
 8012fa0:	3354      	adds	r3, #84	; 0x54
 8012fa2:	78ba      	ldrb	r2, [r7, #2]
 8012fa4:	701a      	strb	r2, [r3, #0]
 8012fa6:	e008      	b.n	8012fba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012fa8:	78fb      	ldrb	r3, [r7, #3]
 8012faa:	68fa      	ldr	r2, [r7, #12]
 8012fac:	212c      	movs	r1, #44	; 0x2c
 8012fae:	fb01 f303 	mul.w	r3, r1, r3
 8012fb2:	4413      	add	r3, r2
 8012fb4:	3355      	adds	r3, #85	; 0x55
 8012fb6:	78ba      	ldrb	r2, [r7, #2]
 8012fb8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012fba:	2300      	movs	r3, #0
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3714      	adds	r7, #20
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr

08012fc8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b082      	sub	sp, #8
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f7ef fa89 	bl	80024e8 <HAL_Delay>
}
 8012fd6:	bf00      	nop
 8012fd8:	3708      	adds	r7, #8
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
	...

08012fe0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b085      	sub	sp, #20
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012fea:	2300      	movs	r3, #0
 8012fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012fee:	79fb      	ldrb	r3, [r7, #7]
 8012ff0:	2b03      	cmp	r3, #3
 8012ff2:	d817      	bhi.n	8013024 <USBH_Get_USB_Status+0x44>
 8012ff4:	a201      	add	r2, pc, #4	; (adr r2, 8012ffc <USBH_Get_USB_Status+0x1c>)
 8012ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ffa:	bf00      	nop
 8012ffc:	0801300d 	.word	0x0801300d
 8013000:	08013013 	.word	0x08013013
 8013004:	08013019 	.word	0x08013019
 8013008:	0801301f 	.word	0x0801301f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801300c:	2300      	movs	r3, #0
 801300e:	73fb      	strb	r3, [r7, #15]
    break;
 8013010:	e00b      	b.n	801302a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013012:	2302      	movs	r3, #2
 8013014:	73fb      	strb	r3, [r7, #15]
    break;
 8013016:	e008      	b.n	801302a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013018:	2301      	movs	r3, #1
 801301a:	73fb      	strb	r3, [r7, #15]
    break;
 801301c:	e005      	b.n	801302a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801301e:	2302      	movs	r3, #2
 8013020:	73fb      	strb	r3, [r7, #15]
    break;
 8013022:	e002      	b.n	801302a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013024:	2302      	movs	r3, #2
 8013026:	73fb      	strb	r3, [r7, #15]
    break;
 8013028:	bf00      	nop
  }
  return usb_status;
 801302a:	7bfb      	ldrb	r3, [r7, #15]
}
 801302c:	4618      	mov	r0, r3
 801302e:	3714      	adds	r7, #20
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b084      	sub	sp, #16
 801303c:	af00      	add	r7, sp, #0
 801303e:	4603      	mov	r3, r0
 8013040:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013042:	79fb      	ldrb	r3, [r7, #7]
 8013044:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013046:	79fb      	ldrb	r3, [r7, #7]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d102      	bne.n	8013052 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801304c:	2300      	movs	r3, #0
 801304e:	73fb      	strb	r3, [r7, #15]
 8013050:	e001      	b.n	8013056 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8013052:	2301      	movs	r3, #1
 8013054:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 8013056:	7bfb      	ldrb	r3, [r7, #15]
 8013058:	461a      	mov	r2, r3
 801305a:	2104      	movs	r1, #4
 801305c:	4803      	ldr	r0, [pc, #12]	; (801306c <MX_DriverVbusFS+0x34>)
 801305e:	f7f0 fb6b 	bl	8003738 <HAL_GPIO_WritePin>
}
 8013062:	bf00      	nop
 8013064:	3710      	adds	r7, #16
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	40022000 	.word	0x40022000

08013070 <__errno>:
 8013070:	4b01      	ldr	r3, [pc, #4]	; (8013078 <__errno+0x8>)
 8013072:	6818      	ldr	r0, [r3, #0]
 8013074:	4770      	bx	lr
 8013076:	bf00      	nop
 8013078:	2000012c 	.word	0x2000012c

0801307c <__libc_init_array>:
 801307c:	b570      	push	{r4, r5, r6, lr}
 801307e:	4d0d      	ldr	r5, [pc, #52]	; (80130b4 <__libc_init_array+0x38>)
 8013080:	4c0d      	ldr	r4, [pc, #52]	; (80130b8 <__libc_init_array+0x3c>)
 8013082:	1b64      	subs	r4, r4, r5
 8013084:	10a4      	asrs	r4, r4, #2
 8013086:	2600      	movs	r6, #0
 8013088:	42a6      	cmp	r6, r4
 801308a:	d109      	bne.n	80130a0 <__libc_init_array+0x24>
 801308c:	4d0b      	ldr	r5, [pc, #44]	; (80130bc <__libc_init_array+0x40>)
 801308e:	4c0c      	ldr	r4, [pc, #48]	; (80130c0 <__libc_init_array+0x44>)
 8013090:	f002 fd3c 	bl	8015b0c <_init>
 8013094:	1b64      	subs	r4, r4, r5
 8013096:	10a4      	asrs	r4, r4, #2
 8013098:	2600      	movs	r6, #0
 801309a:	42a6      	cmp	r6, r4
 801309c:	d105      	bne.n	80130aa <__libc_init_array+0x2e>
 801309e:	bd70      	pop	{r4, r5, r6, pc}
 80130a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80130a4:	4798      	blx	r3
 80130a6:	3601      	adds	r6, #1
 80130a8:	e7ee      	b.n	8013088 <__libc_init_array+0xc>
 80130aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ae:	4798      	blx	r3
 80130b0:	3601      	adds	r6, #1
 80130b2:	e7f2      	b.n	801309a <__libc_init_array+0x1e>
 80130b4:	08015f8c 	.word	0x08015f8c
 80130b8:	08015f8c 	.word	0x08015f8c
 80130bc:	08015f8c 	.word	0x08015f8c
 80130c0:	08015f90 	.word	0x08015f90

080130c4 <malloc>:
 80130c4:	4b02      	ldr	r3, [pc, #8]	; (80130d0 <malloc+0xc>)
 80130c6:	4601      	mov	r1, r0
 80130c8:	6818      	ldr	r0, [r3, #0]
 80130ca:	f000 b87f 	b.w	80131cc <_malloc_r>
 80130ce:	bf00      	nop
 80130d0:	2000012c 	.word	0x2000012c

080130d4 <free>:
 80130d4:	4b02      	ldr	r3, [pc, #8]	; (80130e0 <free+0xc>)
 80130d6:	4601      	mov	r1, r0
 80130d8:	6818      	ldr	r0, [r3, #0]
 80130da:	f000 b80b 	b.w	80130f4 <_free_r>
 80130de:	bf00      	nop
 80130e0:	2000012c 	.word	0x2000012c

080130e4 <memset>:
 80130e4:	4402      	add	r2, r0
 80130e6:	4603      	mov	r3, r0
 80130e8:	4293      	cmp	r3, r2
 80130ea:	d100      	bne.n	80130ee <memset+0xa>
 80130ec:	4770      	bx	lr
 80130ee:	f803 1b01 	strb.w	r1, [r3], #1
 80130f2:	e7f9      	b.n	80130e8 <memset+0x4>

080130f4 <_free_r>:
 80130f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130f6:	2900      	cmp	r1, #0
 80130f8:	d044      	beq.n	8013184 <_free_r+0x90>
 80130fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130fe:	9001      	str	r0, [sp, #4]
 8013100:	2b00      	cmp	r3, #0
 8013102:	f1a1 0404 	sub.w	r4, r1, #4
 8013106:	bfb8      	it	lt
 8013108:	18e4      	addlt	r4, r4, r3
 801310a:	f001 fbd9 	bl	80148c0 <__malloc_lock>
 801310e:	4a1e      	ldr	r2, [pc, #120]	; (8013188 <_free_r+0x94>)
 8013110:	9801      	ldr	r0, [sp, #4]
 8013112:	6813      	ldr	r3, [r2, #0]
 8013114:	b933      	cbnz	r3, 8013124 <_free_r+0x30>
 8013116:	6063      	str	r3, [r4, #4]
 8013118:	6014      	str	r4, [r2, #0]
 801311a:	b003      	add	sp, #12
 801311c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013120:	f001 bbd4 	b.w	80148cc <__malloc_unlock>
 8013124:	42a3      	cmp	r3, r4
 8013126:	d908      	bls.n	801313a <_free_r+0x46>
 8013128:	6825      	ldr	r5, [r4, #0]
 801312a:	1961      	adds	r1, r4, r5
 801312c:	428b      	cmp	r3, r1
 801312e:	bf01      	itttt	eq
 8013130:	6819      	ldreq	r1, [r3, #0]
 8013132:	685b      	ldreq	r3, [r3, #4]
 8013134:	1949      	addeq	r1, r1, r5
 8013136:	6021      	streq	r1, [r4, #0]
 8013138:	e7ed      	b.n	8013116 <_free_r+0x22>
 801313a:	461a      	mov	r2, r3
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	b10b      	cbz	r3, 8013144 <_free_r+0x50>
 8013140:	42a3      	cmp	r3, r4
 8013142:	d9fa      	bls.n	801313a <_free_r+0x46>
 8013144:	6811      	ldr	r1, [r2, #0]
 8013146:	1855      	adds	r5, r2, r1
 8013148:	42a5      	cmp	r5, r4
 801314a:	d10b      	bne.n	8013164 <_free_r+0x70>
 801314c:	6824      	ldr	r4, [r4, #0]
 801314e:	4421      	add	r1, r4
 8013150:	1854      	adds	r4, r2, r1
 8013152:	42a3      	cmp	r3, r4
 8013154:	6011      	str	r1, [r2, #0]
 8013156:	d1e0      	bne.n	801311a <_free_r+0x26>
 8013158:	681c      	ldr	r4, [r3, #0]
 801315a:	685b      	ldr	r3, [r3, #4]
 801315c:	6053      	str	r3, [r2, #4]
 801315e:	4421      	add	r1, r4
 8013160:	6011      	str	r1, [r2, #0]
 8013162:	e7da      	b.n	801311a <_free_r+0x26>
 8013164:	d902      	bls.n	801316c <_free_r+0x78>
 8013166:	230c      	movs	r3, #12
 8013168:	6003      	str	r3, [r0, #0]
 801316a:	e7d6      	b.n	801311a <_free_r+0x26>
 801316c:	6825      	ldr	r5, [r4, #0]
 801316e:	1961      	adds	r1, r4, r5
 8013170:	428b      	cmp	r3, r1
 8013172:	bf04      	itt	eq
 8013174:	6819      	ldreq	r1, [r3, #0]
 8013176:	685b      	ldreq	r3, [r3, #4]
 8013178:	6063      	str	r3, [r4, #4]
 801317a:	bf04      	itt	eq
 801317c:	1949      	addeq	r1, r1, r5
 801317e:	6021      	streq	r1, [r4, #0]
 8013180:	6054      	str	r4, [r2, #4]
 8013182:	e7ca      	b.n	801311a <_free_r+0x26>
 8013184:	b003      	add	sp, #12
 8013186:	bd30      	pop	{r4, r5, pc}
 8013188:	200048ac 	.word	0x200048ac

0801318c <sbrk_aligned>:
 801318c:	b570      	push	{r4, r5, r6, lr}
 801318e:	4e0e      	ldr	r6, [pc, #56]	; (80131c8 <sbrk_aligned+0x3c>)
 8013190:	460c      	mov	r4, r1
 8013192:	6831      	ldr	r1, [r6, #0]
 8013194:	4605      	mov	r5, r0
 8013196:	b911      	cbnz	r1, 801319e <sbrk_aligned+0x12>
 8013198:	f000 fcf6 	bl	8013b88 <_sbrk_r>
 801319c:	6030      	str	r0, [r6, #0]
 801319e:	4621      	mov	r1, r4
 80131a0:	4628      	mov	r0, r5
 80131a2:	f000 fcf1 	bl	8013b88 <_sbrk_r>
 80131a6:	1c43      	adds	r3, r0, #1
 80131a8:	d00a      	beq.n	80131c0 <sbrk_aligned+0x34>
 80131aa:	1cc4      	adds	r4, r0, #3
 80131ac:	f024 0403 	bic.w	r4, r4, #3
 80131b0:	42a0      	cmp	r0, r4
 80131b2:	d007      	beq.n	80131c4 <sbrk_aligned+0x38>
 80131b4:	1a21      	subs	r1, r4, r0
 80131b6:	4628      	mov	r0, r5
 80131b8:	f000 fce6 	bl	8013b88 <_sbrk_r>
 80131bc:	3001      	adds	r0, #1
 80131be:	d101      	bne.n	80131c4 <sbrk_aligned+0x38>
 80131c0:	f04f 34ff 	mov.w	r4, #4294967295
 80131c4:	4620      	mov	r0, r4
 80131c6:	bd70      	pop	{r4, r5, r6, pc}
 80131c8:	200048b0 	.word	0x200048b0

080131cc <_malloc_r>:
 80131cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	1ccd      	adds	r5, r1, #3
 80131d2:	f025 0503 	bic.w	r5, r5, #3
 80131d6:	3508      	adds	r5, #8
 80131d8:	2d0c      	cmp	r5, #12
 80131da:	bf38      	it	cc
 80131dc:	250c      	movcc	r5, #12
 80131de:	2d00      	cmp	r5, #0
 80131e0:	4607      	mov	r7, r0
 80131e2:	db01      	blt.n	80131e8 <_malloc_r+0x1c>
 80131e4:	42a9      	cmp	r1, r5
 80131e6:	d905      	bls.n	80131f4 <_malloc_r+0x28>
 80131e8:	230c      	movs	r3, #12
 80131ea:	603b      	str	r3, [r7, #0]
 80131ec:	2600      	movs	r6, #0
 80131ee:	4630      	mov	r0, r6
 80131f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f4:	4e2e      	ldr	r6, [pc, #184]	; (80132b0 <_malloc_r+0xe4>)
 80131f6:	f001 fb63 	bl	80148c0 <__malloc_lock>
 80131fa:	6833      	ldr	r3, [r6, #0]
 80131fc:	461c      	mov	r4, r3
 80131fe:	bb34      	cbnz	r4, 801324e <_malloc_r+0x82>
 8013200:	4629      	mov	r1, r5
 8013202:	4638      	mov	r0, r7
 8013204:	f7ff ffc2 	bl	801318c <sbrk_aligned>
 8013208:	1c43      	adds	r3, r0, #1
 801320a:	4604      	mov	r4, r0
 801320c:	d14d      	bne.n	80132aa <_malloc_r+0xde>
 801320e:	6834      	ldr	r4, [r6, #0]
 8013210:	4626      	mov	r6, r4
 8013212:	2e00      	cmp	r6, #0
 8013214:	d140      	bne.n	8013298 <_malloc_r+0xcc>
 8013216:	6823      	ldr	r3, [r4, #0]
 8013218:	4631      	mov	r1, r6
 801321a:	4638      	mov	r0, r7
 801321c:	eb04 0803 	add.w	r8, r4, r3
 8013220:	f000 fcb2 	bl	8013b88 <_sbrk_r>
 8013224:	4580      	cmp	r8, r0
 8013226:	d13a      	bne.n	801329e <_malloc_r+0xd2>
 8013228:	6821      	ldr	r1, [r4, #0]
 801322a:	3503      	adds	r5, #3
 801322c:	1a6d      	subs	r5, r5, r1
 801322e:	f025 0503 	bic.w	r5, r5, #3
 8013232:	3508      	adds	r5, #8
 8013234:	2d0c      	cmp	r5, #12
 8013236:	bf38      	it	cc
 8013238:	250c      	movcc	r5, #12
 801323a:	4629      	mov	r1, r5
 801323c:	4638      	mov	r0, r7
 801323e:	f7ff ffa5 	bl	801318c <sbrk_aligned>
 8013242:	3001      	adds	r0, #1
 8013244:	d02b      	beq.n	801329e <_malloc_r+0xd2>
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	442b      	add	r3, r5
 801324a:	6023      	str	r3, [r4, #0]
 801324c:	e00e      	b.n	801326c <_malloc_r+0xa0>
 801324e:	6822      	ldr	r2, [r4, #0]
 8013250:	1b52      	subs	r2, r2, r5
 8013252:	d41e      	bmi.n	8013292 <_malloc_r+0xc6>
 8013254:	2a0b      	cmp	r2, #11
 8013256:	d916      	bls.n	8013286 <_malloc_r+0xba>
 8013258:	1961      	adds	r1, r4, r5
 801325a:	42a3      	cmp	r3, r4
 801325c:	6025      	str	r5, [r4, #0]
 801325e:	bf18      	it	ne
 8013260:	6059      	strne	r1, [r3, #4]
 8013262:	6863      	ldr	r3, [r4, #4]
 8013264:	bf08      	it	eq
 8013266:	6031      	streq	r1, [r6, #0]
 8013268:	5162      	str	r2, [r4, r5]
 801326a:	604b      	str	r3, [r1, #4]
 801326c:	4638      	mov	r0, r7
 801326e:	f104 060b 	add.w	r6, r4, #11
 8013272:	f001 fb2b 	bl	80148cc <__malloc_unlock>
 8013276:	f026 0607 	bic.w	r6, r6, #7
 801327a:	1d23      	adds	r3, r4, #4
 801327c:	1af2      	subs	r2, r6, r3
 801327e:	d0b6      	beq.n	80131ee <_malloc_r+0x22>
 8013280:	1b9b      	subs	r3, r3, r6
 8013282:	50a3      	str	r3, [r4, r2]
 8013284:	e7b3      	b.n	80131ee <_malloc_r+0x22>
 8013286:	6862      	ldr	r2, [r4, #4]
 8013288:	42a3      	cmp	r3, r4
 801328a:	bf0c      	ite	eq
 801328c:	6032      	streq	r2, [r6, #0]
 801328e:	605a      	strne	r2, [r3, #4]
 8013290:	e7ec      	b.n	801326c <_malloc_r+0xa0>
 8013292:	4623      	mov	r3, r4
 8013294:	6864      	ldr	r4, [r4, #4]
 8013296:	e7b2      	b.n	80131fe <_malloc_r+0x32>
 8013298:	4634      	mov	r4, r6
 801329a:	6876      	ldr	r6, [r6, #4]
 801329c:	e7b9      	b.n	8013212 <_malloc_r+0x46>
 801329e:	230c      	movs	r3, #12
 80132a0:	603b      	str	r3, [r7, #0]
 80132a2:	4638      	mov	r0, r7
 80132a4:	f001 fb12 	bl	80148cc <__malloc_unlock>
 80132a8:	e7a1      	b.n	80131ee <_malloc_r+0x22>
 80132aa:	6025      	str	r5, [r4, #0]
 80132ac:	e7de      	b.n	801326c <_malloc_r+0xa0>
 80132ae:	bf00      	nop
 80132b0:	200048ac 	.word	0x200048ac

080132b4 <__cvt>:
 80132b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80132b8:	ec55 4b10 	vmov	r4, r5, d0
 80132bc:	2d00      	cmp	r5, #0
 80132be:	460e      	mov	r6, r1
 80132c0:	4619      	mov	r1, r3
 80132c2:	462b      	mov	r3, r5
 80132c4:	bfbb      	ittet	lt
 80132c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80132ca:	461d      	movlt	r5, r3
 80132cc:	2300      	movge	r3, #0
 80132ce:	232d      	movlt	r3, #45	; 0x2d
 80132d0:	700b      	strb	r3, [r1, #0]
 80132d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80132d8:	4691      	mov	r9, r2
 80132da:	f023 0820 	bic.w	r8, r3, #32
 80132de:	bfbc      	itt	lt
 80132e0:	4622      	movlt	r2, r4
 80132e2:	4614      	movlt	r4, r2
 80132e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80132e8:	d005      	beq.n	80132f6 <__cvt+0x42>
 80132ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80132ee:	d100      	bne.n	80132f2 <__cvt+0x3e>
 80132f0:	3601      	adds	r6, #1
 80132f2:	2102      	movs	r1, #2
 80132f4:	e000      	b.n	80132f8 <__cvt+0x44>
 80132f6:	2103      	movs	r1, #3
 80132f8:	ab03      	add	r3, sp, #12
 80132fa:	9301      	str	r3, [sp, #4]
 80132fc:	ab02      	add	r3, sp, #8
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	ec45 4b10 	vmov	d0, r4, r5
 8013304:	4653      	mov	r3, sl
 8013306:	4632      	mov	r2, r6
 8013308:	f000 fcda 	bl	8013cc0 <_dtoa_r>
 801330c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013310:	4607      	mov	r7, r0
 8013312:	d102      	bne.n	801331a <__cvt+0x66>
 8013314:	f019 0f01 	tst.w	r9, #1
 8013318:	d022      	beq.n	8013360 <__cvt+0xac>
 801331a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801331e:	eb07 0906 	add.w	r9, r7, r6
 8013322:	d110      	bne.n	8013346 <__cvt+0x92>
 8013324:	783b      	ldrb	r3, [r7, #0]
 8013326:	2b30      	cmp	r3, #48	; 0x30
 8013328:	d10a      	bne.n	8013340 <__cvt+0x8c>
 801332a:	2200      	movs	r2, #0
 801332c:	2300      	movs	r3, #0
 801332e:	4620      	mov	r0, r4
 8013330:	4629      	mov	r1, r5
 8013332:	f7ed fbe9 	bl	8000b08 <__aeabi_dcmpeq>
 8013336:	b918      	cbnz	r0, 8013340 <__cvt+0x8c>
 8013338:	f1c6 0601 	rsb	r6, r6, #1
 801333c:	f8ca 6000 	str.w	r6, [sl]
 8013340:	f8da 3000 	ldr.w	r3, [sl]
 8013344:	4499      	add	r9, r3
 8013346:	2200      	movs	r2, #0
 8013348:	2300      	movs	r3, #0
 801334a:	4620      	mov	r0, r4
 801334c:	4629      	mov	r1, r5
 801334e:	f7ed fbdb 	bl	8000b08 <__aeabi_dcmpeq>
 8013352:	b108      	cbz	r0, 8013358 <__cvt+0xa4>
 8013354:	f8cd 900c 	str.w	r9, [sp, #12]
 8013358:	2230      	movs	r2, #48	; 0x30
 801335a:	9b03      	ldr	r3, [sp, #12]
 801335c:	454b      	cmp	r3, r9
 801335e:	d307      	bcc.n	8013370 <__cvt+0xbc>
 8013360:	9b03      	ldr	r3, [sp, #12]
 8013362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013364:	1bdb      	subs	r3, r3, r7
 8013366:	4638      	mov	r0, r7
 8013368:	6013      	str	r3, [r2, #0]
 801336a:	b004      	add	sp, #16
 801336c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013370:	1c59      	adds	r1, r3, #1
 8013372:	9103      	str	r1, [sp, #12]
 8013374:	701a      	strb	r2, [r3, #0]
 8013376:	e7f0      	b.n	801335a <__cvt+0xa6>

08013378 <__exponent>:
 8013378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801337a:	4603      	mov	r3, r0
 801337c:	2900      	cmp	r1, #0
 801337e:	bfb8      	it	lt
 8013380:	4249      	neglt	r1, r1
 8013382:	f803 2b02 	strb.w	r2, [r3], #2
 8013386:	bfb4      	ite	lt
 8013388:	222d      	movlt	r2, #45	; 0x2d
 801338a:	222b      	movge	r2, #43	; 0x2b
 801338c:	2909      	cmp	r1, #9
 801338e:	7042      	strb	r2, [r0, #1]
 8013390:	dd2a      	ble.n	80133e8 <__exponent+0x70>
 8013392:	f10d 0407 	add.w	r4, sp, #7
 8013396:	46a4      	mov	ip, r4
 8013398:	270a      	movs	r7, #10
 801339a:	46a6      	mov	lr, r4
 801339c:	460a      	mov	r2, r1
 801339e:	fb91 f6f7 	sdiv	r6, r1, r7
 80133a2:	fb07 1516 	mls	r5, r7, r6, r1
 80133a6:	3530      	adds	r5, #48	; 0x30
 80133a8:	2a63      	cmp	r2, #99	; 0x63
 80133aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80133ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80133b2:	4631      	mov	r1, r6
 80133b4:	dcf1      	bgt.n	801339a <__exponent+0x22>
 80133b6:	3130      	adds	r1, #48	; 0x30
 80133b8:	f1ae 0502 	sub.w	r5, lr, #2
 80133bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80133c0:	1c44      	adds	r4, r0, #1
 80133c2:	4629      	mov	r1, r5
 80133c4:	4561      	cmp	r1, ip
 80133c6:	d30a      	bcc.n	80133de <__exponent+0x66>
 80133c8:	f10d 0209 	add.w	r2, sp, #9
 80133cc:	eba2 020e 	sub.w	r2, r2, lr
 80133d0:	4565      	cmp	r5, ip
 80133d2:	bf88      	it	hi
 80133d4:	2200      	movhi	r2, #0
 80133d6:	4413      	add	r3, r2
 80133d8:	1a18      	subs	r0, r3, r0
 80133da:	b003      	add	sp, #12
 80133dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80133e6:	e7ed      	b.n	80133c4 <__exponent+0x4c>
 80133e8:	2330      	movs	r3, #48	; 0x30
 80133ea:	3130      	adds	r1, #48	; 0x30
 80133ec:	7083      	strb	r3, [r0, #2]
 80133ee:	70c1      	strb	r1, [r0, #3]
 80133f0:	1d03      	adds	r3, r0, #4
 80133f2:	e7f1      	b.n	80133d8 <__exponent+0x60>

080133f4 <_printf_float>:
 80133f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f8:	ed2d 8b02 	vpush	{d8}
 80133fc:	b08d      	sub	sp, #52	; 0x34
 80133fe:	460c      	mov	r4, r1
 8013400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013404:	4616      	mov	r6, r2
 8013406:	461f      	mov	r7, r3
 8013408:	4605      	mov	r5, r0
 801340a:	f001 fa47 	bl	801489c <_localeconv_r>
 801340e:	f8d0 a000 	ldr.w	sl, [r0]
 8013412:	4650      	mov	r0, sl
 8013414:	f7ec fefc 	bl	8000210 <strlen>
 8013418:	2300      	movs	r3, #0
 801341a:	930a      	str	r3, [sp, #40]	; 0x28
 801341c:	6823      	ldr	r3, [r4, #0]
 801341e:	9305      	str	r3, [sp, #20]
 8013420:	f8d8 3000 	ldr.w	r3, [r8]
 8013424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013428:	3307      	adds	r3, #7
 801342a:	f023 0307 	bic.w	r3, r3, #7
 801342e:	f103 0208 	add.w	r2, r3, #8
 8013432:	f8c8 2000 	str.w	r2, [r8]
 8013436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801343e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013446:	9307      	str	r3, [sp, #28]
 8013448:	f8cd 8018 	str.w	r8, [sp, #24]
 801344c:	ee08 0a10 	vmov	s16, r0
 8013450:	4b9f      	ldr	r3, [pc, #636]	; (80136d0 <_printf_float+0x2dc>)
 8013452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013456:	f04f 32ff 	mov.w	r2, #4294967295
 801345a:	f7ed fb87 	bl	8000b6c <__aeabi_dcmpun>
 801345e:	bb88      	cbnz	r0, 80134c4 <_printf_float+0xd0>
 8013460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013464:	4b9a      	ldr	r3, [pc, #616]	; (80136d0 <_printf_float+0x2dc>)
 8013466:	f04f 32ff 	mov.w	r2, #4294967295
 801346a:	f7ed fb61 	bl	8000b30 <__aeabi_dcmple>
 801346e:	bb48      	cbnz	r0, 80134c4 <_printf_float+0xd0>
 8013470:	2200      	movs	r2, #0
 8013472:	2300      	movs	r3, #0
 8013474:	4640      	mov	r0, r8
 8013476:	4649      	mov	r1, r9
 8013478:	f7ed fb50 	bl	8000b1c <__aeabi_dcmplt>
 801347c:	b110      	cbz	r0, 8013484 <_printf_float+0x90>
 801347e:	232d      	movs	r3, #45	; 0x2d
 8013480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013484:	4b93      	ldr	r3, [pc, #588]	; (80136d4 <_printf_float+0x2e0>)
 8013486:	4894      	ldr	r0, [pc, #592]	; (80136d8 <_printf_float+0x2e4>)
 8013488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801348c:	bf94      	ite	ls
 801348e:	4698      	movls	r8, r3
 8013490:	4680      	movhi	r8, r0
 8013492:	2303      	movs	r3, #3
 8013494:	6123      	str	r3, [r4, #16]
 8013496:	9b05      	ldr	r3, [sp, #20]
 8013498:	f023 0204 	bic.w	r2, r3, #4
 801349c:	6022      	str	r2, [r4, #0]
 801349e:	f04f 0900 	mov.w	r9, #0
 80134a2:	9700      	str	r7, [sp, #0]
 80134a4:	4633      	mov	r3, r6
 80134a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80134a8:	4621      	mov	r1, r4
 80134aa:	4628      	mov	r0, r5
 80134ac:	f000 f9d8 	bl	8013860 <_printf_common>
 80134b0:	3001      	adds	r0, #1
 80134b2:	f040 8090 	bne.w	80135d6 <_printf_float+0x1e2>
 80134b6:	f04f 30ff 	mov.w	r0, #4294967295
 80134ba:	b00d      	add	sp, #52	; 0x34
 80134bc:	ecbd 8b02 	vpop	{d8}
 80134c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134c4:	4642      	mov	r2, r8
 80134c6:	464b      	mov	r3, r9
 80134c8:	4640      	mov	r0, r8
 80134ca:	4649      	mov	r1, r9
 80134cc:	f7ed fb4e 	bl	8000b6c <__aeabi_dcmpun>
 80134d0:	b140      	cbz	r0, 80134e4 <_printf_float+0xf0>
 80134d2:	464b      	mov	r3, r9
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	bfbc      	itt	lt
 80134d8:	232d      	movlt	r3, #45	; 0x2d
 80134da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80134de:	487f      	ldr	r0, [pc, #508]	; (80136dc <_printf_float+0x2e8>)
 80134e0:	4b7f      	ldr	r3, [pc, #508]	; (80136e0 <_printf_float+0x2ec>)
 80134e2:	e7d1      	b.n	8013488 <_printf_float+0x94>
 80134e4:	6863      	ldr	r3, [r4, #4]
 80134e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80134ea:	9206      	str	r2, [sp, #24]
 80134ec:	1c5a      	adds	r2, r3, #1
 80134ee:	d13f      	bne.n	8013570 <_printf_float+0x17c>
 80134f0:	2306      	movs	r3, #6
 80134f2:	6063      	str	r3, [r4, #4]
 80134f4:	9b05      	ldr	r3, [sp, #20]
 80134f6:	6861      	ldr	r1, [r4, #4]
 80134f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80134fc:	2300      	movs	r3, #0
 80134fe:	9303      	str	r3, [sp, #12]
 8013500:	ab0a      	add	r3, sp, #40	; 0x28
 8013502:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013506:	ab09      	add	r3, sp, #36	; 0x24
 8013508:	ec49 8b10 	vmov	d0, r8, r9
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	6022      	str	r2, [r4, #0]
 8013510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013514:	4628      	mov	r0, r5
 8013516:	f7ff fecd 	bl	80132b4 <__cvt>
 801351a:	9b06      	ldr	r3, [sp, #24]
 801351c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801351e:	2b47      	cmp	r3, #71	; 0x47
 8013520:	4680      	mov	r8, r0
 8013522:	d108      	bne.n	8013536 <_printf_float+0x142>
 8013524:	1cc8      	adds	r0, r1, #3
 8013526:	db02      	blt.n	801352e <_printf_float+0x13a>
 8013528:	6863      	ldr	r3, [r4, #4]
 801352a:	4299      	cmp	r1, r3
 801352c:	dd41      	ble.n	80135b2 <_printf_float+0x1be>
 801352e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013532:	fa5f fb8b 	uxtb.w	fp, fp
 8013536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801353a:	d820      	bhi.n	801357e <_printf_float+0x18a>
 801353c:	3901      	subs	r1, #1
 801353e:	465a      	mov	r2, fp
 8013540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013544:	9109      	str	r1, [sp, #36]	; 0x24
 8013546:	f7ff ff17 	bl	8013378 <__exponent>
 801354a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801354c:	1813      	adds	r3, r2, r0
 801354e:	2a01      	cmp	r2, #1
 8013550:	4681      	mov	r9, r0
 8013552:	6123      	str	r3, [r4, #16]
 8013554:	dc02      	bgt.n	801355c <_printf_float+0x168>
 8013556:	6822      	ldr	r2, [r4, #0]
 8013558:	07d2      	lsls	r2, r2, #31
 801355a:	d501      	bpl.n	8013560 <_printf_float+0x16c>
 801355c:	3301      	adds	r3, #1
 801355e:	6123      	str	r3, [r4, #16]
 8013560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013564:	2b00      	cmp	r3, #0
 8013566:	d09c      	beq.n	80134a2 <_printf_float+0xae>
 8013568:	232d      	movs	r3, #45	; 0x2d
 801356a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801356e:	e798      	b.n	80134a2 <_printf_float+0xae>
 8013570:	9a06      	ldr	r2, [sp, #24]
 8013572:	2a47      	cmp	r2, #71	; 0x47
 8013574:	d1be      	bne.n	80134f4 <_printf_float+0x100>
 8013576:	2b00      	cmp	r3, #0
 8013578:	d1bc      	bne.n	80134f4 <_printf_float+0x100>
 801357a:	2301      	movs	r3, #1
 801357c:	e7b9      	b.n	80134f2 <_printf_float+0xfe>
 801357e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013582:	d118      	bne.n	80135b6 <_printf_float+0x1c2>
 8013584:	2900      	cmp	r1, #0
 8013586:	6863      	ldr	r3, [r4, #4]
 8013588:	dd0b      	ble.n	80135a2 <_printf_float+0x1ae>
 801358a:	6121      	str	r1, [r4, #16]
 801358c:	b913      	cbnz	r3, 8013594 <_printf_float+0x1a0>
 801358e:	6822      	ldr	r2, [r4, #0]
 8013590:	07d0      	lsls	r0, r2, #31
 8013592:	d502      	bpl.n	801359a <_printf_float+0x1a6>
 8013594:	3301      	adds	r3, #1
 8013596:	440b      	add	r3, r1
 8013598:	6123      	str	r3, [r4, #16]
 801359a:	65a1      	str	r1, [r4, #88]	; 0x58
 801359c:	f04f 0900 	mov.w	r9, #0
 80135a0:	e7de      	b.n	8013560 <_printf_float+0x16c>
 80135a2:	b913      	cbnz	r3, 80135aa <_printf_float+0x1b6>
 80135a4:	6822      	ldr	r2, [r4, #0]
 80135a6:	07d2      	lsls	r2, r2, #31
 80135a8:	d501      	bpl.n	80135ae <_printf_float+0x1ba>
 80135aa:	3302      	adds	r3, #2
 80135ac:	e7f4      	b.n	8013598 <_printf_float+0x1a4>
 80135ae:	2301      	movs	r3, #1
 80135b0:	e7f2      	b.n	8013598 <_printf_float+0x1a4>
 80135b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80135b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135b8:	4299      	cmp	r1, r3
 80135ba:	db05      	blt.n	80135c8 <_printf_float+0x1d4>
 80135bc:	6823      	ldr	r3, [r4, #0]
 80135be:	6121      	str	r1, [r4, #16]
 80135c0:	07d8      	lsls	r0, r3, #31
 80135c2:	d5ea      	bpl.n	801359a <_printf_float+0x1a6>
 80135c4:	1c4b      	adds	r3, r1, #1
 80135c6:	e7e7      	b.n	8013598 <_printf_float+0x1a4>
 80135c8:	2900      	cmp	r1, #0
 80135ca:	bfd4      	ite	le
 80135cc:	f1c1 0202 	rsble	r2, r1, #2
 80135d0:	2201      	movgt	r2, #1
 80135d2:	4413      	add	r3, r2
 80135d4:	e7e0      	b.n	8013598 <_printf_float+0x1a4>
 80135d6:	6823      	ldr	r3, [r4, #0]
 80135d8:	055a      	lsls	r2, r3, #21
 80135da:	d407      	bmi.n	80135ec <_printf_float+0x1f8>
 80135dc:	6923      	ldr	r3, [r4, #16]
 80135de:	4642      	mov	r2, r8
 80135e0:	4631      	mov	r1, r6
 80135e2:	4628      	mov	r0, r5
 80135e4:	47b8      	blx	r7
 80135e6:	3001      	adds	r0, #1
 80135e8:	d12c      	bne.n	8013644 <_printf_float+0x250>
 80135ea:	e764      	b.n	80134b6 <_printf_float+0xc2>
 80135ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135f0:	f240 80e0 	bls.w	80137b4 <_printf_float+0x3c0>
 80135f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80135f8:	2200      	movs	r2, #0
 80135fa:	2300      	movs	r3, #0
 80135fc:	f7ed fa84 	bl	8000b08 <__aeabi_dcmpeq>
 8013600:	2800      	cmp	r0, #0
 8013602:	d034      	beq.n	801366e <_printf_float+0x27a>
 8013604:	4a37      	ldr	r2, [pc, #220]	; (80136e4 <_printf_float+0x2f0>)
 8013606:	2301      	movs	r3, #1
 8013608:	4631      	mov	r1, r6
 801360a:	4628      	mov	r0, r5
 801360c:	47b8      	blx	r7
 801360e:	3001      	adds	r0, #1
 8013610:	f43f af51 	beq.w	80134b6 <_printf_float+0xc2>
 8013614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013618:	429a      	cmp	r2, r3
 801361a:	db02      	blt.n	8013622 <_printf_float+0x22e>
 801361c:	6823      	ldr	r3, [r4, #0]
 801361e:	07d8      	lsls	r0, r3, #31
 8013620:	d510      	bpl.n	8013644 <_printf_float+0x250>
 8013622:	ee18 3a10 	vmov	r3, s16
 8013626:	4652      	mov	r2, sl
 8013628:	4631      	mov	r1, r6
 801362a:	4628      	mov	r0, r5
 801362c:	47b8      	blx	r7
 801362e:	3001      	adds	r0, #1
 8013630:	f43f af41 	beq.w	80134b6 <_printf_float+0xc2>
 8013634:	f04f 0800 	mov.w	r8, #0
 8013638:	f104 091a 	add.w	r9, r4, #26
 801363c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801363e:	3b01      	subs	r3, #1
 8013640:	4543      	cmp	r3, r8
 8013642:	dc09      	bgt.n	8013658 <_printf_float+0x264>
 8013644:	6823      	ldr	r3, [r4, #0]
 8013646:	079b      	lsls	r3, r3, #30
 8013648:	f100 8105 	bmi.w	8013856 <_printf_float+0x462>
 801364c:	68e0      	ldr	r0, [r4, #12]
 801364e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013650:	4298      	cmp	r0, r3
 8013652:	bfb8      	it	lt
 8013654:	4618      	movlt	r0, r3
 8013656:	e730      	b.n	80134ba <_printf_float+0xc6>
 8013658:	2301      	movs	r3, #1
 801365a:	464a      	mov	r2, r9
 801365c:	4631      	mov	r1, r6
 801365e:	4628      	mov	r0, r5
 8013660:	47b8      	blx	r7
 8013662:	3001      	adds	r0, #1
 8013664:	f43f af27 	beq.w	80134b6 <_printf_float+0xc2>
 8013668:	f108 0801 	add.w	r8, r8, #1
 801366c:	e7e6      	b.n	801363c <_printf_float+0x248>
 801366e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013670:	2b00      	cmp	r3, #0
 8013672:	dc39      	bgt.n	80136e8 <_printf_float+0x2f4>
 8013674:	4a1b      	ldr	r2, [pc, #108]	; (80136e4 <_printf_float+0x2f0>)
 8013676:	2301      	movs	r3, #1
 8013678:	4631      	mov	r1, r6
 801367a:	4628      	mov	r0, r5
 801367c:	47b8      	blx	r7
 801367e:	3001      	adds	r0, #1
 8013680:	f43f af19 	beq.w	80134b6 <_printf_float+0xc2>
 8013684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013688:	4313      	orrs	r3, r2
 801368a:	d102      	bne.n	8013692 <_printf_float+0x29e>
 801368c:	6823      	ldr	r3, [r4, #0]
 801368e:	07d9      	lsls	r1, r3, #31
 8013690:	d5d8      	bpl.n	8013644 <_printf_float+0x250>
 8013692:	ee18 3a10 	vmov	r3, s16
 8013696:	4652      	mov	r2, sl
 8013698:	4631      	mov	r1, r6
 801369a:	4628      	mov	r0, r5
 801369c:	47b8      	blx	r7
 801369e:	3001      	adds	r0, #1
 80136a0:	f43f af09 	beq.w	80134b6 <_printf_float+0xc2>
 80136a4:	f04f 0900 	mov.w	r9, #0
 80136a8:	f104 0a1a 	add.w	sl, r4, #26
 80136ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ae:	425b      	negs	r3, r3
 80136b0:	454b      	cmp	r3, r9
 80136b2:	dc01      	bgt.n	80136b8 <_printf_float+0x2c4>
 80136b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136b6:	e792      	b.n	80135de <_printf_float+0x1ea>
 80136b8:	2301      	movs	r3, #1
 80136ba:	4652      	mov	r2, sl
 80136bc:	4631      	mov	r1, r6
 80136be:	4628      	mov	r0, r5
 80136c0:	47b8      	blx	r7
 80136c2:	3001      	adds	r0, #1
 80136c4:	f43f aef7 	beq.w	80134b6 <_printf_float+0xc2>
 80136c8:	f109 0901 	add.w	r9, r9, #1
 80136cc:	e7ee      	b.n	80136ac <_printf_float+0x2b8>
 80136ce:	bf00      	nop
 80136d0:	7fefffff 	.word	0x7fefffff
 80136d4:	08015bac 	.word	0x08015bac
 80136d8:	08015bb0 	.word	0x08015bb0
 80136dc:	08015bb8 	.word	0x08015bb8
 80136e0:	08015bb4 	.word	0x08015bb4
 80136e4:	08015bbc 	.word	0x08015bbc
 80136e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136ec:	429a      	cmp	r2, r3
 80136ee:	bfa8      	it	ge
 80136f0:	461a      	movge	r2, r3
 80136f2:	2a00      	cmp	r2, #0
 80136f4:	4691      	mov	r9, r2
 80136f6:	dc37      	bgt.n	8013768 <_printf_float+0x374>
 80136f8:	f04f 0b00 	mov.w	fp, #0
 80136fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013700:	f104 021a 	add.w	r2, r4, #26
 8013704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013706:	9305      	str	r3, [sp, #20]
 8013708:	eba3 0309 	sub.w	r3, r3, r9
 801370c:	455b      	cmp	r3, fp
 801370e:	dc33      	bgt.n	8013778 <_printf_float+0x384>
 8013710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013714:	429a      	cmp	r2, r3
 8013716:	db3b      	blt.n	8013790 <_printf_float+0x39c>
 8013718:	6823      	ldr	r3, [r4, #0]
 801371a:	07da      	lsls	r2, r3, #31
 801371c:	d438      	bmi.n	8013790 <_printf_float+0x39c>
 801371e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013720:	9a05      	ldr	r2, [sp, #20]
 8013722:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013724:	1a9a      	subs	r2, r3, r2
 8013726:	eba3 0901 	sub.w	r9, r3, r1
 801372a:	4591      	cmp	r9, r2
 801372c:	bfa8      	it	ge
 801372e:	4691      	movge	r9, r2
 8013730:	f1b9 0f00 	cmp.w	r9, #0
 8013734:	dc35      	bgt.n	80137a2 <_printf_float+0x3ae>
 8013736:	f04f 0800 	mov.w	r8, #0
 801373a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801373e:	f104 0a1a 	add.w	sl, r4, #26
 8013742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013746:	1a9b      	subs	r3, r3, r2
 8013748:	eba3 0309 	sub.w	r3, r3, r9
 801374c:	4543      	cmp	r3, r8
 801374e:	f77f af79 	ble.w	8013644 <_printf_float+0x250>
 8013752:	2301      	movs	r3, #1
 8013754:	4652      	mov	r2, sl
 8013756:	4631      	mov	r1, r6
 8013758:	4628      	mov	r0, r5
 801375a:	47b8      	blx	r7
 801375c:	3001      	adds	r0, #1
 801375e:	f43f aeaa 	beq.w	80134b6 <_printf_float+0xc2>
 8013762:	f108 0801 	add.w	r8, r8, #1
 8013766:	e7ec      	b.n	8013742 <_printf_float+0x34e>
 8013768:	4613      	mov	r3, r2
 801376a:	4631      	mov	r1, r6
 801376c:	4642      	mov	r2, r8
 801376e:	4628      	mov	r0, r5
 8013770:	47b8      	blx	r7
 8013772:	3001      	adds	r0, #1
 8013774:	d1c0      	bne.n	80136f8 <_printf_float+0x304>
 8013776:	e69e      	b.n	80134b6 <_printf_float+0xc2>
 8013778:	2301      	movs	r3, #1
 801377a:	4631      	mov	r1, r6
 801377c:	4628      	mov	r0, r5
 801377e:	9205      	str	r2, [sp, #20]
 8013780:	47b8      	blx	r7
 8013782:	3001      	adds	r0, #1
 8013784:	f43f ae97 	beq.w	80134b6 <_printf_float+0xc2>
 8013788:	9a05      	ldr	r2, [sp, #20]
 801378a:	f10b 0b01 	add.w	fp, fp, #1
 801378e:	e7b9      	b.n	8013704 <_printf_float+0x310>
 8013790:	ee18 3a10 	vmov	r3, s16
 8013794:	4652      	mov	r2, sl
 8013796:	4631      	mov	r1, r6
 8013798:	4628      	mov	r0, r5
 801379a:	47b8      	blx	r7
 801379c:	3001      	adds	r0, #1
 801379e:	d1be      	bne.n	801371e <_printf_float+0x32a>
 80137a0:	e689      	b.n	80134b6 <_printf_float+0xc2>
 80137a2:	9a05      	ldr	r2, [sp, #20]
 80137a4:	464b      	mov	r3, r9
 80137a6:	4442      	add	r2, r8
 80137a8:	4631      	mov	r1, r6
 80137aa:	4628      	mov	r0, r5
 80137ac:	47b8      	blx	r7
 80137ae:	3001      	adds	r0, #1
 80137b0:	d1c1      	bne.n	8013736 <_printf_float+0x342>
 80137b2:	e680      	b.n	80134b6 <_printf_float+0xc2>
 80137b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137b6:	2a01      	cmp	r2, #1
 80137b8:	dc01      	bgt.n	80137be <_printf_float+0x3ca>
 80137ba:	07db      	lsls	r3, r3, #31
 80137bc:	d538      	bpl.n	8013830 <_printf_float+0x43c>
 80137be:	2301      	movs	r3, #1
 80137c0:	4642      	mov	r2, r8
 80137c2:	4631      	mov	r1, r6
 80137c4:	4628      	mov	r0, r5
 80137c6:	47b8      	blx	r7
 80137c8:	3001      	adds	r0, #1
 80137ca:	f43f ae74 	beq.w	80134b6 <_printf_float+0xc2>
 80137ce:	ee18 3a10 	vmov	r3, s16
 80137d2:	4652      	mov	r2, sl
 80137d4:	4631      	mov	r1, r6
 80137d6:	4628      	mov	r0, r5
 80137d8:	47b8      	blx	r7
 80137da:	3001      	adds	r0, #1
 80137dc:	f43f ae6b 	beq.w	80134b6 <_printf_float+0xc2>
 80137e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80137e4:	2200      	movs	r2, #0
 80137e6:	2300      	movs	r3, #0
 80137e8:	f7ed f98e 	bl	8000b08 <__aeabi_dcmpeq>
 80137ec:	b9d8      	cbnz	r0, 8013826 <_printf_float+0x432>
 80137ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137f0:	f108 0201 	add.w	r2, r8, #1
 80137f4:	3b01      	subs	r3, #1
 80137f6:	4631      	mov	r1, r6
 80137f8:	4628      	mov	r0, r5
 80137fa:	47b8      	blx	r7
 80137fc:	3001      	adds	r0, #1
 80137fe:	d10e      	bne.n	801381e <_printf_float+0x42a>
 8013800:	e659      	b.n	80134b6 <_printf_float+0xc2>
 8013802:	2301      	movs	r3, #1
 8013804:	4652      	mov	r2, sl
 8013806:	4631      	mov	r1, r6
 8013808:	4628      	mov	r0, r5
 801380a:	47b8      	blx	r7
 801380c:	3001      	adds	r0, #1
 801380e:	f43f ae52 	beq.w	80134b6 <_printf_float+0xc2>
 8013812:	f108 0801 	add.w	r8, r8, #1
 8013816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013818:	3b01      	subs	r3, #1
 801381a:	4543      	cmp	r3, r8
 801381c:	dcf1      	bgt.n	8013802 <_printf_float+0x40e>
 801381e:	464b      	mov	r3, r9
 8013820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013824:	e6dc      	b.n	80135e0 <_printf_float+0x1ec>
 8013826:	f04f 0800 	mov.w	r8, #0
 801382a:	f104 0a1a 	add.w	sl, r4, #26
 801382e:	e7f2      	b.n	8013816 <_printf_float+0x422>
 8013830:	2301      	movs	r3, #1
 8013832:	4642      	mov	r2, r8
 8013834:	e7df      	b.n	80137f6 <_printf_float+0x402>
 8013836:	2301      	movs	r3, #1
 8013838:	464a      	mov	r2, r9
 801383a:	4631      	mov	r1, r6
 801383c:	4628      	mov	r0, r5
 801383e:	47b8      	blx	r7
 8013840:	3001      	adds	r0, #1
 8013842:	f43f ae38 	beq.w	80134b6 <_printf_float+0xc2>
 8013846:	f108 0801 	add.w	r8, r8, #1
 801384a:	68e3      	ldr	r3, [r4, #12]
 801384c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801384e:	1a5b      	subs	r3, r3, r1
 8013850:	4543      	cmp	r3, r8
 8013852:	dcf0      	bgt.n	8013836 <_printf_float+0x442>
 8013854:	e6fa      	b.n	801364c <_printf_float+0x258>
 8013856:	f04f 0800 	mov.w	r8, #0
 801385a:	f104 0919 	add.w	r9, r4, #25
 801385e:	e7f4      	b.n	801384a <_printf_float+0x456>

08013860 <_printf_common>:
 8013860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013864:	4616      	mov	r6, r2
 8013866:	4699      	mov	r9, r3
 8013868:	688a      	ldr	r2, [r1, #8]
 801386a:	690b      	ldr	r3, [r1, #16]
 801386c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013870:	4293      	cmp	r3, r2
 8013872:	bfb8      	it	lt
 8013874:	4613      	movlt	r3, r2
 8013876:	6033      	str	r3, [r6, #0]
 8013878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801387c:	4607      	mov	r7, r0
 801387e:	460c      	mov	r4, r1
 8013880:	b10a      	cbz	r2, 8013886 <_printf_common+0x26>
 8013882:	3301      	adds	r3, #1
 8013884:	6033      	str	r3, [r6, #0]
 8013886:	6823      	ldr	r3, [r4, #0]
 8013888:	0699      	lsls	r1, r3, #26
 801388a:	bf42      	ittt	mi
 801388c:	6833      	ldrmi	r3, [r6, #0]
 801388e:	3302      	addmi	r3, #2
 8013890:	6033      	strmi	r3, [r6, #0]
 8013892:	6825      	ldr	r5, [r4, #0]
 8013894:	f015 0506 	ands.w	r5, r5, #6
 8013898:	d106      	bne.n	80138a8 <_printf_common+0x48>
 801389a:	f104 0a19 	add.w	sl, r4, #25
 801389e:	68e3      	ldr	r3, [r4, #12]
 80138a0:	6832      	ldr	r2, [r6, #0]
 80138a2:	1a9b      	subs	r3, r3, r2
 80138a4:	42ab      	cmp	r3, r5
 80138a6:	dc26      	bgt.n	80138f6 <_printf_common+0x96>
 80138a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80138ac:	1e13      	subs	r3, r2, #0
 80138ae:	6822      	ldr	r2, [r4, #0]
 80138b0:	bf18      	it	ne
 80138b2:	2301      	movne	r3, #1
 80138b4:	0692      	lsls	r2, r2, #26
 80138b6:	d42b      	bmi.n	8013910 <_printf_common+0xb0>
 80138b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80138bc:	4649      	mov	r1, r9
 80138be:	4638      	mov	r0, r7
 80138c0:	47c0      	blx	r8
 80138c2:	3001      	adds	r0, #1
 80138c4:	d01e      	beq.n	8013904 <_printf_common+0xa4>
 80138c6:	6823      	ldr	r3, [r4, #0]
 80138c8:	68e5      	ldr	r5, [r4, #12]
 80138ca:	6832      	ldr	r2, [r6, #0]
 80138cc:	f003 0306 	and.w	r3, r3, #6
 80138d0:	2b04      	cmp	r3, #4
 80138d2:	bf08      	it	eq
 80138d4:	1aad      	subeq	r5, r5, r2
 80138d6:	68a3      	ldr	r3, [r4, #8]
 80138d8:	6922      	ldr	r2, [r4, #16]
 80138da:	bf0c      	ite	eq
 80138dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138e0:	2500      	movne	r5, #0
 80138e2:	4293      	cmp	r3, r2
 80138e4:	bfc4      	itt	gt
 80138e6:	1a9b      	subgt	r3, r3, r2
 80138e8:	18ed      	addgt	r5, r5, r3
 80138ea:	2600      	movs	r6, #0
 80138ec:	341a      	adds	r4, #26
 80138ee:	42b5      	cmp	r5, r6
 80138f0:	d11a      	bne.n	8013928 <_printf_common+0xc8>
 80138f2:	2000      	movs	r0, #0
 80138f4:	e008      	b.n	8013908 <_printf_common+0xa8>
 80138f6:	2301      	movs	r3, #1
 80138f8:	4652      	mov	r2, sl
 80138fa:	4649      	mov	r1, r9
 80138fc:	4638      	mov	r0, r7
 80138fe:	47c0      	blx	r8
 8013900:	3001      	adds	r0, #1
 8013902:	d103      	bne.n	801390c <_printf_common+0xac>
 8013904:	f04f 30ff 	mov.w	r0, #4294967295
 8013908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801390c:	3501      	adds	r5, #1
 801390e:	e7c6      	b.n	801389e <_printf_common+0x3e>
 8013910:	18e1      	adds	r1, r4, r3
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	2030      	movs	r0, #48	; 0x30
 8013916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801391a:	4422      	add	r2, r4
 801391c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013924:	3302      	adds	r3, #2
 8013926:	e7c7      	b.n	80138b8 <_printf_common+0x58>
 8013928:	2301      	movs	r3, #1
 801392a:	4622      	mov	r2, r4
 801392c:	4649      	mov	r1, r9
 801392e:	4638      	mov	r0, r7
 8013930:	47c0      	blx	r8
 8013932:	3001      	adds	r0, #1
 8013934:	d0e6      	beq.n	8013904 <_printf_common+0xa4>
 8013936:	3601      	adds	r6, #1
 8013938:	e7d9      	b.n	80138ee <_printf_common+0x8e>
	...

0801393c <_printf_i>:
 801393c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013940:	7e0f      	ldrb	r7, [r1, #24]
 8013942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013944:	2f78      	cmp	r7, #120	; 0x78
 8013946:	4691      	mov	r9, r2
 8013948:	4680      	mov	r8, r0
 801394a:	460c      	mov	r4, r1
 801394c:	469a      	mov	sl, r3
 801394e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013952:	d807      	bhi.n	8013964 <_printf_i+0x28>
 8013954:	2f62      	cmp	r7, #98	; 0x62
 8013956:	d80a      	bhi.n	801396e <_printf_i+0x32>
 8013958:	2f00      	cmp	r7, #0
 801395a:	f000 80d8 	beq.w	8013b0e <_printf_i+0x1d2>
 801395e:	2f58      	cmp	r7, #88	; 0x58
 8013960:	f000 80a3 	beq.w	8013aaa <_printf_i+0x16e>
 8013964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801396c:	e03a      	b.n	80139e4 <_printf_i+0xa8>
 801396e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013972:	2b15      	cmp	r3, #21
 8013974:	d8f6      	bhi.n	8013964 <_printf_i+0x28>
 8013976:	a101      	add	r1, pc, #4	; (adr r1, 801397c <_printf_i+0x40>)
 8013978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801397c:	080139d5 	.word	0x080139d5
 8013980:	080139e9 	.word	0x080139e9
 8013984:	08013965 	.word	0x08013965
 8013988:	08013965 	.word	0x08013965
 801398c:	08013965 	.word	0x08013965
 8013990:	08013965 	.word	0x08013965
 8013994:	080139e9 	.word	0x080139e9
 8013998:	08013965 	.word	0x08013965
 801399c:	08013965 	.word	0x08013965
 80139a0:	08013965 	.word	0x08013965
 80139a4:	08013965 	.word	0x08013965
 80139a8:	08013af5 	.word	0x08013af5
 80139ac:	08013a19 	.word	0x08013a19
 80139b0:	08013ad7 	.word	0x08013ad7
 80139b4:	08013965 	.word	0x08013965
 80139b8:	08013965 	.word	0x08013965
 80139bc:	08013b17 	.word	0x08013b17
 80139c0:	08013965 	.word	0x08013965
 80139c4:	08013a19 	.word	0x08013a19
 80139c8:	08013965 	.word	0x08013965
 80139cc:	08013965 	.word	0x08013965
 80139d0:	08013adf 	.word	0x08013adf
 80139d4:	682b      	ldr	r3, [r5, #0]
 80139d6:	1d1a      	adds	r2, r3, #4
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	602a      	str	r2, [r5, #0]
 80139dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139e4:	2301      	movs	r3, #1
 80139e6:	e0a3      	b.n	8013b30 <_printf_i+0x1f4>
 80139e8:	6820      	ldr	r0, [r4, #0]
 80139ea:	6829      	ldr	r1, [r5, #0]
 80139ec:	0606      	lsls	r6, r0, #24
 80139ee:	f101 0304 	add.w	r3, r1, #4
 80139f2:	d50a      	bpl.n	8013a0a <_printf_i+0xce>
 80139f4:	680e      	ldr	r6, [r1, #0]
 80139f6:	602b      	str	r3, [r5, #0]
 80139f8:	2e00      	cmp	r6, #0
 80139fa:	da03      	bge.n	8013a04 <_printf_i+0xc8>
 80139fc:	232d      	movs	r3, #45	; 0x2d
 80139fe:	4276      	negs	r6, r6
 8013a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a04:	485e      	ldr	r0, [pc, #376]	; (8013b80 <_printf_i+0x244>)
 8013a06:	230a      	movs	r3, #10
 8013a08:	e019      	b.n	8013a3e <_printf_i+0x102>
 8013a0a:	680e      	ldr	r6, [r1, #0]
 8013a0c:	602b      	str	r3, [r5, #0]
 8013a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013a12:	bf18      	it	ne
 8013a14:	b236      	sxthne	r6, r6
 8013a16:	e7ef      	b.n	80139f8 <_printf_i+0xbc>
 8013a18:	682b      	ldr	r3, [r5, #0]
 8013a1a:	6820      	ldr	r0, [r4, #0]
 8013a1c:	1d19      	adds	r1, r3, #4
 8013a1e:	6029      	str	r1, [r5, #0]
 8013a20:	0601      	lsls	r1, r0, #24
 8013a22:	d501      	bpl.n	8013a28 <_printf_i+0xec>
 8013a24:	681e      	ldr	r6, [r3, #0]
 8013a26:	e002      	b.n	8013a2e <_printf_i+0xf2>
 8013a28:	0646      	lsls	r6, r0, #25
 8013a2a:	d5fb      	bpl.n	8013a24 <_printf_i+0xe8>
 8013a2c:	881e      	ldrh	r6, [r3, #0]
 8013a2e:	4854      	ldr	r0, [pc, #336]	; (8013b80 <_printf_i+0x244>)
 8013a30:	2f6f      	cmp	r7, #111	; 0x6f
 8013a32:	bf0c      	ite	eq
 8013a34:	2308      	moveq	r3, #8
 8013a36:	230a      	movne	r3, #10
 8013a38:	2100      	movs	r1, #0
 8013a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a3e:	6865      	ldr	r5, [r4, #4]
 8013a40:	60a5      	str	r5, [r4, #8]
 8013a42:	2d00      	cmp	r5, #0
 8013a44:	bfa2      	ittt	ge
 8013a46:	6821      	ldrge	r1, [r4, #0]
 8013a48:	f021 0104 	bicge.w	r1, r1, #4
 8013a4c:	6021      	strge	r1, [r4, #0]
 8013a4e:	b90e      	cbnz	r6, 8013a54 <_printf_i+0x118>
 8013a50:	2d00      	cmp	r5, #0
 8013a52:	d04d      	beq.n	8013af0 <_printf_i+0x1b4>
 8013a54:	4615      	mov	r5, r2
 8013a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8013a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8013a5e:	5dc7      	ldrb	r7, [r0, r7]
 8013a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013a64:	4637      	mov	r7, r6
 8013a66:	42bb      	cmp	r3, r7
 8013a68:	460e      	mov	r6, r1
 8013a6a:	d9f4      	bls.n	8013a56 <_printf_i+0x11a>
 8013a6c:	2b08      	cmp	r3, #8
 8013a6e:	d10b      	bne.n	8013a88 <_printf_i+0x14c>
 8013a70:	6823      	ldr	r3, [r4, #0]
 8013a72:	07de      	lsls	r6, r3, #31
 8013a74:	d508      	bpl.n	8013a88 <_printf_i+0x14c>
 8013a76:	6923      	ldr	r3, [r4, #16]
 8013a78:	6861      	ldr	r1, [r4, #4]
 8013a7a:	4299      	cmp	r1, r3
 8013a7c:	bfde      	ittt	le
 8013a7e:	2330      	movle	r3, #48	; 0x30
 8013a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013a88:	1b52      	subs	r2, r2, r5
 8013a8a:	6122      	str	r2, [r4, #16]
 8013a8c:	f8cd a000 	str.w	sl, [sp]
 8013a90:	464b      	mov	r3, r9
 8013a92:	aa03      	add	r2, sp, #12
 8013a94:	4621      	mov	r1, r4
 8013a96:	4640      	mov	r0, r8
 8013a98:	f7ff fee2 	bl	8013860 <_printf_common>
 8013a9c:	3001      	adds	r0, #1
 8013a9e:	d14c      	bne.n	8013b3a <_printf_i+0x1fe>
 8013aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa4:	b004      	add	sp, #16
 8013aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aaa:	4835      	ldr	r0, [pc, #212]	; (8013b80 <_printf_i+0x244>)
 8013aac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013ab0:	6829      	ldr	r1, [r5, #0]
 8013ab2:	6823      	ldr	r3, [r4, #0]
 8013ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ab8:	6029      	str	r1, [r5, #0]
 8013aba:	061d      	lsls	r5, r3, #24
 8013abc:	d514      	bpl.n	8013ae8 <_printf_i+0x1ac>
 8013abe:	07df      	lsls	r7, r3, #31
 8013ac0:	bf44      	itt	mi
 8013ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8013ac6:	6023      	strmi	r3, [r4, #0]
 8013ac8:	b91e      	cbnz	r6, 8013ad2 <_printf_i+0x196>
 8013aca:	6823      	ldr	r3, [r4, #0]
 8013acc:	f023 0320 	bic.w	r3, r3, #32
 8013ad0:	6023      	str	r3, [r4, #0]
 8013ad2:	2310      	movs	r3, #16
 8013ad4:	e7b0      	b.n	8013a38 <_printf_i+0xfc>
 8013ad6:	6823      	ldr	r3, [r4, #0]
 8013ad8:	f043 0320 	orr.w	r3, r3, #32
 8013adc:	6023      	str	r3, [r4, #0]
 8013ade:	2378      	movs	r3, #120	; 0x78
 8013ae0:	4828      	ldr	r0, [pc, #160]	; (8013b84 <_printf_i+0x248>)
 8013ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013ae6:	e7e3      	b.n	8013ab0 <_printf_i+0x174>
 8013ae8:	0659      	lsls	r1, r3, #25
 8013aea:	bf48      	it	mi
 8013aec:	b2b6      	uxthmi	r6, r6
 8013aee:	e7e6      	b.n	8013abe <_printf_i+0x182>
 8013af0:	4615      	mov	r5, r2
 8013af2:	e7bb      	b.n	8013a6c <_printf_i+0x130>
 8013af4:	682b      	ldr	r3, [r5, #0]
 8013af6:	6826      	ldr	r6, [r4, #0]
 8013af8:	6961      	ldr	r1, [r4, #20]
 8013afa:	1d18      	adds	r0, r3, #4
 8013afc:	6028      	str	r0, [r5, #0]
 8013afe:	0635      	lsls	r5, r6, #24
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	d501      	bpl.n	8013b08 <_printf_i+0x1cc>
 8013b04:	6019      	str	r1, [r3, #0]
 8013b06:	e002      	b.n	8013b0e <_printf_i+0x1d2>
 8013b08:	0670      	lsls	r0, r6, #25
 8013b0a:	d5fb      	bpl.n	8013b04 <_printf_i+0x1c8>
 8013b0c:	8019      	strh	r1, [r3, #0]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	6123      	str	r3, [r4, #16]
 8013b12:	4615      	mov	r5, r2
 8013b14:	e7ba      	b.n	8013a8c <_printf_i+0x150>
 8013b16:	682b      	ldr	r3, [r5, #0]
 8013b18:	1d1a      	adds	r2, r3, #4
 8013b1a:	602a      	str	r2, [r5, #0]
 8013b1c:	681d      	ldr	r5, [r3, #0]
 8013b1e:	6862      	ldr	r2, [r4, #4]
 8013b20:	2100      	movs	r1, #0
 8013b22:	4628      	mov	r0, r5
 8013b24:	f7ec fb7c 	bl	8000220 <memchr>
 8013b28:	b108      	cbz	r0, 8013b2e <_printf_i+0x1f2>
 8013b2a:	1b40      	subs	r0, r0, r5
 8013b2c:	6060      	str	r0, [r4, #4]
 8013b2e:	6863      	ldr	r3, [r4, #4]
 8013b30:	6123      	str	r3, [r4, #16]
 8013b32:	2300      	movs	r3, #0
 8013b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b38:	e7a8      	b.n	8013a8c <_printf_i+0x150>
 8013b3a:	6923      	ldr	r3, [r4, #16]
 8013b3c:	462a      	mov	r2, r5
 8013b3e:	4649      	mov	r1, r9
 8013b40:	4640      	mov	r0, r8
 8013b42:	47d0      	blx	sl
 8013b44:	3001      	adds	r0, #1
 8013b46:	d0ab      	beq.n	8013aa0 <_printf_i+0x164>
 8013b48:	6823      	ldr	r3, [r4, #0]
 8013b4a:	079b      	lsls	r3, r3, #30
 8013b4c:	d413      	bmi.n	8013b76 <_printf_i+0x23a>
 8013b4e:	68e0      	ldr	r0, [r4, #12]
 8013b50:	9b03      	ldr	r3, [sp, #12]
 8013b52:	4298      	cmp	r0, r3
 8013b54:	bfb8      	it	lt
 8013b56:	4618      	movlt	r0, r3
 8013b58:	e7a4      	b.n	8013aa4 <_printf_i+0x168>
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	4632      	mov	r2, r6
 8013b5e:	4649      	mov	r1, r9
 8013b60:	4640      	mov	r0, r8
 8013b62:	47d0      	blx	sl
 8013b64:	3001      	adds	r0, #1
 8013b66:	d09b      	beq.n	8013aa0 <_printf_i+0x164>
 8013b68:	3501      	adds	r5, #1
 8013b6a:	68e3      	ldr	r3, [r4, #12]
 8013b6c:	9903      	ldr	r1, [sp, #12]
 8013b6e:	1a5b      	subs	r3, r3, r1
 8013b70:	42ab      	cmp	r3, r5
 8013b72:	dcf2      	bgt.n	8013b5a <_printf_i+0x21e>
 8013b74:	e7eb      	b.n	8013b4e <_printf_i+0x212>
 8013b76:	2500      	movs	r5, #0
 8013b78:	f104 0619 	add.w	r6, r4, #25
 8013b7c:	e7f5      	b.n	8013b6a <_printf_i+0x22e>
 8013b7e:	bf00      	nop
 8013b80:	08015bbe 	.word	0x08015bbe
 8013b84:	08015bcf 	.word	0x08015bcf

08013b88 <_sbrk_r>:
 8013b88:	b538      	push	{r3, r4, r5, lr}
 8013b8a:	4d06      	ldr	r5, [pc, #24]	; (8013ba4 <_sbrk_r+0x1c>)
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	4604      	mov	r4, r0
 8013b90:	4608      	mov	r0, r1
 8013b92:	602b      	str	r3, [r5, #0]
 8013b94:	f7ee fbda 	bl	800234c <_sbrk>
 8013b98:	1c43      	adds	r3, r0, #1
 8013b9a:	d102      	bne.n	8013ba2 <_sbrk_r+0x1a>
 8013b9c:	682b      	ldr	r3, [r5, #0]
 8013b9e:	b103      	cbz	r3, 8013ba2 <_sbrk_r+0x1a>
 8013ba0:	6023      	str	r3, [r4, #0]
 8013ba2:	bd38      	pop	{r3, r4, r5, pc}
 8013ba4:	200048b4 	.word	0x200048b4

08013ba8 <quorem>:
 8013ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	6903      	ldr	r3, [r0, #16]
 8013bae:	690c      	ldr	r4, [r1, #16]
 8013bb0:	42a3      	cmp	r3, r4
 8013bb2:	4607      	mov	r7, r0
 8013bb4:	f2c0 8081 	blt.w	8013cba <quorem+0x112>
 8013bb8:	3c01      	subs	r4, #1
 8013bba:	f101 0814 	add.w	r8, r1, #20
 8013bbe:	f100 0514 	add.w	r5, r0, #20
 8013bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bc6:	9301      	str	r3, [sp, #4]
 8013bc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013bcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bd0:	3301      	adds	r3, #1
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013bd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013bdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8013be0:	d331      	bcc.n	8013c46 <quorem+0x9e>
 8013be2:	f04f 0e00 	mov.w	lr, #0
 8013be6:	4640      	mov	r0, r8
 8013be8:	46ac      	mov	ip, r5
 8013bea:	46f2      	mov	sl, lr
 8013bec:	f850 2b04 	ldr.w	r2, [r0], #4
 8013bf0:	b293      	uxth	r3, r2
 8013bf2:	fb06 e303 	mla	r3, r6, r3, lr
 8013bf6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	ebaa 0303 	sub.w	r3, sl, r3
 8013c00:	f8dc a000 	ldr.w	sl, [ip]
 8013c04:	0c12      	lsrs	r2, r2, #16
 8013c06:	fa13 f38a 	uxtah	r3, r3, sl
 8013c0a:	fb06 e202 	mla	r2, r6, r2, lr
 8013c0e:	9300      	str	r3, [sp, #0]
 8013c10:	9b00      	ldr	r3, [sp, #0]
 8013c12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013c16:	b292      	uxth	r2, r2
 8013c18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c20:	f8bd 3000 	ldrh.w	r3, [sp]
 8013c24:	4581      	cmp	r9, r0
 8013c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c2a:	f84c 3b04 	str.w	r3, [ip], #4
 8013c2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013c32:	d2db      	bcs.n	8013bec <quorem+0x44>
 8013c34:	f855 300b 	ldr.w	r3, [r5, fp]
 8013c38:	b92b      	cbnz	r3, 8013c46 <quorem+0x9e>
 8013c3a:	9b01      	ldr	r3, [sp, #4]
 8013c3c:	3b04      	subs	r3, #4
 8013c3e:	429d      	cmp	r5, r3
 8013c40:	461a      	mov	r2, r3
 8013c42:	d32e      	bcc.n	8013ca2 <quorem+0xfa>
 8013c44:	613c      	str	r4, [r7, #16]
 8013c46:	4638      	mov	r0, r7
 8013c48:	f001 f8c8 	bl	8014ddc <__mcmp>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	db24      	blt.n	8013c9a <quorem+0xf2>
 8013c50:	3601      	adds	r6, #1
 8013c52:	4628      	mov	r0, r5
 8013c54:	f04f 0c00 	mov.w	ip, #0
 8013c58:	f858 2b04 	ldr.w	r2, [r8], #4
 8013c5c:	f8d0 e000 	ldr.w	lr, [r0]
 8013c60:	b293      	uxth	r3, r2
 8013c62:	ebac 0303 	sub.w	r3, ip, r3
 8013c66:	0c12      	lsrs	r2, r2, #16
 8013c68:	fa13 f38e 	uxtah	r3, r3, lr
 8013c6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c7a:	45c1      	cmp	r9, r8
 8013c7c:	f840 3b04 	str.w	r3, [r0], #4
 8013c80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013c84:	d2e8      	bcs.n	8013c58 <quorem+0xb0>
 8013c86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c8e:	b922      	cbnz	r2, 8013c9a <quorem+0xf2>
 8013c90:	3b04      	subs	r3, #4
 8013c92:	429d      	cmp	r5, r3
 8013c94:	461a      	mov	r2, r3
 8013c96:	d30a      	bcc.n	8013cae <quorem+0x106>
 8013c98:	613c      	str	r4, [r7, #16]
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	b003      	add	sp, #12
 8013c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca2:	6812      	ldr	r2, [r2, #0]
 8013ca4:	3b04      	subs	r3, #4
 8013ca6:	2a00      	cmp	r2, #0
 8013ca8:	d1cc      	bne.n	8013c44 <quorem+0x9c>
 8013caa:	3c01      	subs	r4, #1
 8013cac:	e7c7      	b.n	8013c3e <quorem+0x96>
 8013cae:	6812      	ldr	r2, [r2, #0]
 8013cb0:	3b04      	subs	r3, #4
 8013cb2:	2a00      	cmp	r2, #0
 8013cb4:	d1f0      	bne.n	8013c98 <quorem+0xf0>
 8013cb6:	3c01      	subs	r4, #1
 8013cb8:	e7eb      	b.n	8013c92 <quorem+0xea>
 8013cba:	2000      	movs	r0, #0
 8013cbc:	e7ee      	b.n	8013c9c <quorem+0xf4>
	...

08013cc0 <_dtoa_r>:
 8013cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc4:	ed2d 8b04 	vpush	{d8-d9}
 8013cc8:	ec57 6b10 	vmov	r6, r7, d0
 8013ccc:	b093      	sub	sp, #76	; 0x4c
 8013cce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013cd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013cd4:	9106      	str	r1, [sp, #24]
 8013cd6:	ee10 aa10 	vmov	sl, s0
 8013cda:	4604      	mov	r4, r0
 8013cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8013cde:	930c      	str	r3, [sp, #48]	; 0x30
 8013ce0:	46bb      	mov	fp, r7
 8013ce2:	b975      	cbnz	r5, 8013d02 <_dtoa_r+0x42>
 8013ce4:	2010      	movs	r0, #16
 8013ce6:	f7ff f9ed 	bl	80130c4 <malloc>
 8013cea:	4602      	mov	r2, r0
 8013cec:	6260      	str	r0, [r4, #36]	; 0x24
 8013cee:	b920      	cbnz	r0, 8013cfa <_dtoa_r+0x3a>
 8013cf0:	4ba7      	ldr	r3, [pc, #668]	; (8013f90 <_dtoa_r+0x2d0>)
 8013cf2:	21ea      	movs	r1, #234	; 0xea
 8013cf4:	48a7      	ldr	r0, [pc, #668]	; (8013f94 <_dtoa_r+0x2d4>)
 8013cf6:	f001 f989 	bl	801500c <__assert_func>
 8013cfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013cfe:	6005      	str	r5, [r0, #0]
 8013d00:	60c5      	str	r5, [r0, #12]
 8013d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d04:	6819      	ldr	r1, [r3, #0]
 8013d06:	b151      	cbz	r1, 8013d1e <_dtoa_r+0x5e>
 8013d08:	685a      	ldr	r2, [r3, #4]
 8013d0a:	604a      	str	r2, [r1, #4]
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	4093      	lsls	r3, r2
 8013d10:	608b      	str	r3, [r1, #8]
 8013d12:	4620      	mov	r0, r4
 8013d14:	f000 fe20 	bl	8014958 <_Bfree>
 8013d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	601a      	str	r2, [r3, #0]
 8013d1e:	1e3b      	subs	r3, r7, #0
 8013d20:	bfaa      	itet	ge
 8013d22:	2300      	movge	r3, #0
 8013d24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013d28:	f8c8 3000 	strge.w	r3, [r8]
 8013d2c:	4b9a      	ldr	r3, [pc, #616]	; (8013f98 <_dtoa_r+0x2d8>)
 8013d2e:	bfbc      	itt	lt
 8013d30:	2201      	movlt	r2, #1
 8013d32:	f8c8 2000 	strlt.w	r2, [r8]
 8013d36:	ea33 030b 	bics.w	r3, r3, fp
 8013d3a:	d11b      	bne.n	8013d74 <_dtoa_r+0xb4>
 8013d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8013d42:	6013      	str	r3, [r2, #0]
 8013d44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d48:	4333      	orrs	r3, r6
 8013d4a:	f000 8592 	beq.w	8014872 <_dtoa_r+0xbb2>
 8013d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d50:	b963      	cbnz	r3, 8013d6c <_dtoa_r+0xac>
 8013d52:	4b92      	ldr	r3, [pc, #584]	; (8013f9c <_dtoa_r+0x2dc>)
 8013d54:	e022      	b.n	8013d9c <_dtoa_r+0xdc>
 8013d56:	4b92      	ldr	r3, [pc, #584]	; (8013fa0 <_dtoa_r+0x2e0>)
 8013d58:	9301      	str	r3, [sp, #4]
 8013d5a:	3308      	adds	r3, #8
 8013d5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013d5e:	6013      	str	r3, [r2, #0]
 8013d60:	9801      	ldr	r0, [sp, #4]
 8013d62:	b013      	add	sp, #76	; 0x4c
 8013d64:	ecbd 8b04 	vpop	{d8-d9}
 8013d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6c:	4b8b      	ldr	r3, [pc, #556]	; (8013f9c <_dtoa_r+0x2dc>)
 8013d6e:	9301      	str	r3, [sp, #4]
 8013d70:	3303      	adds	r3, #3
 8013d72:	e7f3      	b.n	8013d5c <_dtoa_r+0x9c>
 8013d74:	2200      	movs	r2, #0
 8013d76:	2300      	movs	r3, #0
 8013d78:	4650      	mov	r0, sl
 8013d7a:	4659      	mov	r1, fp
 8013d7c:	f7ec fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8013d80:	ec4b ab19 	vmov	d9, sl, fp
 8013d84:	4680      	mov	r8, r0
 8013d86:	b158      	cbz	r0, 8013da0 <_dtoa_r+0xe0>
 8013d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	6013      	str	r3, [r2, #0]
 8013d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	f000 856b 	beq.w	801486c <_dtoa_r+0xbac>
 8013d96:	4883      	ldr	r0, [pc, #524]	; (8013fa4 <_dtoa_r+0x2e4>)
 8013d98:	6018      	str	r0, [r3, #0]
 8013d9a:	1e43      	subs	r3, r0, #1
 8013d9c:	9301      	str	r3, [sp, #4]
 8013d9e:	e7df      	b.n	8013d60 <_dtoa_r+0xa0>
 8013da0:	ec4b ab10 	vmov	d0, sl, fp
 8013da4:	aa10      	add	r2, sp, #64	; 0x40
 8013da6:	a911      	add	r1, sp, #68	; 0x44
 8013da8:	4620      	mov	r0, r4
 8013daa:	f001 f8bd 	bl	8014f28 <__d2b>
 8013dae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8013db2:	ee08 0a10 	vmov	s16, r0
 8013db6:	2d00      	cmp	r5, #0
 8013db8:	f000 8084 	beq.w	8013ec4 <_dtoa_r+0x204>
 8013dbc:	ee19 3a90 	vmov	r3, s19
 8013dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013dc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013dc8:	4656      	mov	r6, sl
 8013dca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013dd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8013dd6:	4b74      	ldr	r3, [pc, #464]	; (8013fa8 <_dtoa_r+0x2e8>)
 8013dd8:	2200      	movs	r2, #0
 8013dda:	4630      	mov	r0, r6
 8013ddc:	4639      	mov	r1, r7
 8013dde:	f7ec fa73 	bl	80002c8 <__aeabi_dsub>
 8013de2:	a365      	add	r3, pc, #404	; (adr r3, 8013f78 <_dtoa_r+0x2b8>)
 8013de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de8:	f7ec fc26 	bl	8000638 <__aeabi_dmul>
 8013dec:	a364      	add	r3, pc, #400	; (adr r3, 8013f80 <_dtoa_r+0x2c0>)
 8013dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df2:	f7ec fa6b 	bl	80002cc <__adddf3>
 8013df6:	4606      	mov	r6, r0
 8013df8:	4628      	mov	r0, r5
 8013dfa:	460f      	mov	r7, r1
 8013dfc:	f7ec fbb2 	bl	8000564 <__aeabi_i2d>
 8013e00:	a361      	add	r3, pc, #388	; (adr r3, 8013f88 <_dtoa_r+0x2c8>)
 8013e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e06:	f7ec fc17 	bl	8000638 <__aeabi_dmul>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	4630      	mov	r0, r6
 8013e10:	4639      	mov	r1, r7
 8013e12:	f7ec fa5b 	bl	80002cc <__adddf3>
 8013e16:	4606      	mov	r6, r0
 8013e18:	460f      	mov	r7, r1
 8013e1a:	f7ec febd 	bl	8000b98 <__aeabi_d2iz>
 8013e1e:	2200      	movs	r2, #0
 8013e20:	9000      	str	r0, [sp, #0]
 8013e22:	2300      	movs	r3, #0
 8013e24:	4630      	mov	r0, r6
 8013e26:	4639      	mov	r1, r7
 8013e28:	f7ec fe78 	bl	8000b1c <__aeabi_dcmplt>
 8013e2c:	b150      	cbz	r0, 8013e44 <_dtoa_r+0x184>
 8013e2e:	9800      	ldr	r0, [sp, #0]
 8013e30:	f7ec fb98 	bl	8000564 <__aeabi_i2d>
 8013e34:	4632      	mov	r2, r6
 8013e36:	463b      	mov	r3, r7
 8013e38:	f7ec fe66 	bl	8000b08 <__aeabi_dcmpeq>
 8013e3c:	b910      	cbnz	r0, 8013e44 <_dtoa_r+0x184>
 8013e3e:	9b00      	ldr	r3, [sp, #0]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	9300      	str	r3, [sp, #0]
 8013e44:	9b00      	ldr	r3, [sp, #0]
 8013e46:	2b16      	cmp	r3, #22
 8013e48:	d85a      	bhi.n	8013f00 <_dtoa_r+0x240>
 8013e4a:	9a00      	ldr	r2, [sp, #0]
 8013e4c:	4b57      	ldr	r3, [pc, #348]	; (8013fac <_dtoa_r+0x2ec>)
 8013e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e56:	ec51 0b19 	vmov	r0, r1, d9
 8013e5a:	f7ec fe5f 	bl	8000b1c <__aeabi_dcmplt>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d050      	beq.n	8013f04 <_dtoa_r+0x244>
 8013e62:	9b00      	ldr	r3, [sp, #0]
 8013e64:	3b01      	subs	r3, #1
 8013e66:	9300      	str	r3, [sp, #0]
 8013e68:	2300      	movs	r3, #0
 8013e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e6e:	1b5d      	subs	r5, r3, r5
 8013e70:	1e6b      	subs	r3, r5, #1
 8013e72:	9305      	str	r3, [sp, #20]
 8013e74:	bf45      	ittet	mi
 8013e76:	f1c5 0301 	rsbmi	r3, r5, #1
 8013e7a:	9304      	strmi	r3, [sp, #16]
 8013e7c:	2300      	movpl	r3, #0
 8013e7e:	2300      	movmi	r3, #0
 8013e80:	bf4c      	ite	mi
 8013e82:	9305      	strmi	r3, [sp, #20]
 8013e84:	9304      	strpl	r3, [sp, #16]
 8013e86:	9b00      	ldr	r3, [sp, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	db3d      	blt.n	8013f08 <_dtoa_r+0x248>
 8013e8c:	9b05      	ldr	r3, [sp, #20]
 8013e8e:	9a00      	ldr	r2, [sp, #0]
 8013e90:	920a      	str	r2, [sp, #40]	; 0x28
 8013e92:	4413      	add	r3, r2
 8013e94:	9305      	str	r3, [sp, #20]
 8013e96:	2300      	movs	r3, #0
 8013e98:	9307      	str	r3, [sp, #28]
 8013e9a:	9b06      	ldr	r3, [sp, #24]
 8013e9c:	2b09      	cmp	r3, #9
 8013e9e:	f200 8089 	bhi.w	8013fb4 <_dtoa_r+0x2f4>
 8013ea2:	2b05      	cmp	r3, #5
 8013ea4:	bfc4      	itt	gt
 8013ea6:	3b04      	subgt	r3, #4
 8013ea8:	9306      	strgt	r3, [sp, #24]
 8013eaa:	9b06      	ldr	r3, [sp, #24]
 8013eac:	f1a3 0302 	sub.w	r3, r3, #2
 8013eb0:	bfcc      	ite	gt
 8013eb2:	2500      	movgt	r5, #0
 8013eb4:	2501      	movle	r5, #1
 8013eb6:	2b03      	cmp	r3, #3
 8013eb8:	f200 8087 	bhi.w	8013fca <_dtoa_r+0x30a>
 8013ebc:	e8df f003 	tbb	[pc, r3]
 8013ec0:	59383a2d 	.word	0x59383a2d
 8013ec4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013ec8:	441d      	add	r5, r3
 8013eca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013ece:	2b20      	cmp	r3, #32
 8013ed0:	bfc1      	itttt	gt
 8013ed2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013ed6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013eda:	fa0b f303 	lslgt.w	r3, fp, r3
 8013ede:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013ee2:	bfda      	itte	le
 8013ee4:	f1c3 0320 	rsble	r3, r3, #32
 8013ee8:	fa06 f003 	lslle.w	r0, r6, r3
 8013eec:	4318      	orrgt	r0, r3
 8013eee:	f7ec fb29 	bl	8000544 <__aeabi_ui2d>
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	4606      	mov	r6, r0
 8013ef6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013efa:	3d01      	subs	r5, #1
 8013efc:	930e      	str	r3, [sp, #56]	; 0x38
 8013efe:	e76a      	b.n	8013dd6 <_dtoa_r+0x116>
 8013f00:	2301      	movs	r3, #1
 8013f02:	e7b2      	b.n	8013e6a <_dtoa_r+0x1aa>
 8013f04:	900b      	str	r0, [sp, #44]	; 0x2c
 8013f06:	e7b1      	b.n	8013e6c <_dtoa_r+0x1ac>
 8013f08:	9b04      	ldr	r3, [sp, #16]
 8013f0a:	9a00      	ldr	r2, [sp, #0]
 8013f0c:	1a9b      	subs	r3, r3, r2
 8013f0e:	9304      	str	r3, [sp, #16]
 8013f10:	4253      	negs	r3, r2
 8013f12:	9307      	str	r3, [sp, #28]
 8013f14:	2300      	movs	r3, #0
 8013f16:	930a      	str	r3, [sp, #40]	; 0x28
 8013f18:	e7bf      	b.n	8013e9a <_dtoa_r+0x1da>
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	9308      	str	r3, [sp, #32]
 8013f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	dc55      	bgt.n	8013fd0 <_dtoa_r+0x310>
 8013f24:	2301      	movs	r3, #1
 8013f26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8013f2e:	e00c      	b.n	8013f4a <_dtoa_r+0x28a>
 8013f30:	2301      	movs	r3, #1
 8013f32:	e7f3      	b.n	8013f1c <_dtoa_r+0x25c>
 8013f34:	2300      	movs	r3, #0
 8013f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f38:	9308      	str	r3, [sp, #32]
 8013f3a:	9b00      	ldr	r3, [sp, #0]
 8013f3c:	4413      	add	r3, r2
 8013f3e:	9302      	str	r3, [sp, #8]
 8013f40:	3301      	adds	r3, #1
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	9303      	str	r3, [sp, #12]
 8013f46:	bfb8      	it	lt
 8013f48:	2301      	movlt	r3, #1
 8013f4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	6042      	str	r2, [r0, #4]
 8013f50:	2204      	movs	r2, #4
 8013f52:	f102 0614 	add.w	r6, r2, #20
 8013f56:	429e      	cmp	r6, r3
 8013f58:	6841      	ldr	r1, [r0, #4]
 8013f5a:	d93d      	bls.n	8013fd8 <_dtoa_r+0x318>
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	f000 fcbb 	bl	80148d8 <_Balloc>
 8013f62:	9001      	str	r0, [sp, #4]
 8013f64:	2800      	cmp	r0, #0
 8013f66:	d13b      	bne.n	8013fe0 <_dtoa_r+0x320>
 8013f68:	4b11      	ldr	r3, [pc, #68]	; (8013fb0 <_dtoa_r+0x2f0>)
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013f70:	e6c0      	b.n	8013cf4 <_dtoa_r+0x34>
 8013f72:	2301      	movs	r3, #1
 8013f74:	e7df      	b.n	8013f36 <_dtoa_r+0x276>
 8013f76:	bf00      	nop
 8013f78:	636f4361 	.word	0x636f4361
 8013f7c:	3fd287a7 	.word	0x3fd287a7
 8013f80:	8b60c8b3 	.word	0x8b60c8b3
 8013f84:	3fc68a28 	.word	0x3fc68a28
 8013f88:	509f79fb 	.word	0x509f79fb
 8013f8c:	3fd34413 	.word	0x3fd34413
 8013f90:	08015bed 	.word	0x08015bed
 8013f94:	08015c04 	.word	0x08015c04
 8013f98:	7ff00000 	.word	0x7ff00000
 8013f9c:	08015be9 	.word	0x08015be9
 8013fa0:	08015be0 	.word	0x08015be0
 8013fa4:	08015bbd 	.word	0x08015bbd
 8013fa8:	3ff80000 	.word	0x3ff80000
 8013fac:	08015cf8 	.word	0x08015cf8
 8013fb0:	08015c5f 	.word	0x08015c5f
 8013fb4:	2501      	movs	r5, #1
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	9306      	str	r3, [sp, #24]
 8013fba:	9508      	str	r5, [sp, #32]
 8013fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013fc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	2312      	movs	r3, #18
 8013fc8:	e7b0      	b.n	8013f2c <_dtoa_r+0x26c>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	9308      	str	r3, [sp, #32]
 8013fce:	e7f5      	b.n	8013fbc <_dtoa_r+0x2fc>
 8013fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013fd6:	e7b8      	b.n	8013f4a <_dtoa_r+0x28a>
 8013fd8:	3101      	adds	r1, #1
 8013fda:	6041      	str	r1, [r0, #4]
 8013fdc:	0052      	lsls	r2, r2, #1
 8013fde:	e7b8      	b.n	8013f52 <_dtoa_r+0x292>
 8013fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fe2:	9a01      	ldr	r2, [sp, #4]
 8013fe4:	601a      	str	r2, [r3, #0]
 8013fe6:	9b03      	ldr	r3, [sp, #12]
 8013fe8:	2b0e      	cmp	r3, #14
 8013fea:	f200 809d 	bhi.w	8014128 <_dtoa_r+0x468>
 8013fee:	2d00      	cmp	r5, #0
 8013ff0:	f000 809a 	beq.w	8014128 <_dtoa_r+0x468>
 8013ff4:	9b00      	ldr	r3, [sp, #0]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	dd32      	ble.n	8014060 <_dtoa_r+0x3a0>
 8013ffa:	4ab7      	ldr	r2, [pc, #732]	; (80142d8 <_dtoa_r+0x618>)
 8013ffc:	f003 030f 	and.w	r3, r3, #15
 8014000:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014008:	9b00      	ldr	r3, [sp, #0]
 801400a:	05d8      	lsls	r0, r3, #23
 801400c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014010:	d516      	bpl.n	8014040 <_dtoa_r+0x380>
 8014012:	4bb2      	ldr	r3, [pc, #712]	; (80142dc <_dtoa_r+0x61c>)
 8014014:	ec51 0b19 	vmov	r0, r1, d9
 8014018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801401c:	f7ec fc36 	bl	800088c <__aeabi_ddiv>
 8014020:	f007 070f 	and.w	r7, r7, #15
 8014024:	4682      	mov	sl, r0
 8014026:	468b      	mov	fp, r1
 8014028:	2503      	movs	r5, #3
 801402a:	4eac      	ldr	r6, [pc, #688]	; (80142dc <_dtoa_r+0x61c>)
 801402c:	b957      	cbnz	r7, 8014044 <_dtoa_r+0x384>
 801402e:	4642      	mov	r2, r8
 8014030:	464b      	mov	r3, r9
 8014032:	4650      	mov	r0, sl
 8014034:	4659      	mov	r1, fp
 8014036:	f7ec fc29 	bl	800088c <__aeabi_ddiv>
 801403a:	4682      	mov	sl, r0
 801403c:	468b      	mov	fp, r1
 801403e:	e028      	b.n	8014092 <_dtoa_r+0x3d2>
 8014040:	2502      	movs	r5, #2
 8014042:	e7f2      	b.n	801402a <_dtoa_r+0x36a>
 8014044:	07f9      	lsls	r1, r7, #31
 8014046:	d508      	bpl.n	801405a <_dtoa_r+0x39a>
 8014048:	4640      	mov	r0, r8
 801404a:	4649      	mov	r1, r9
 801404c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014050:	f7ec faf2 	bl	8000638 <__aeabi_dmul>
 8014054:	3501      	adds	r5, #1
 8014056:	4680      	mov	r8, r0
 8014058:	4689      	mov	r9, r1
 801405a:	107f      	asrs	r7, r7, #1
 801405c:	3608      	adds	r6, #8
 801405e:	e7e5      	b.n	801402c <_dtoa_r+0x36c>
 8014060:	f000 809b 	beq.w	801419a <_dtoa_r+0x4da>
 8014064:	9b00      	ldr	r3, [sp, #0]
 8014066:	4f9d      	ldr	r7, [pc, #628]	; (80142dc <_dtoa_r+0x61c>)
 8014068:	425e      	negs	r6, r3
 801406a:	4b9b      	ldr	r3, [pc, #620]	; (80142d8 <_dtoa_r+0x618>)
 801406c:	f006 020f 	and.w	r2, r6, #15
 8014070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014078:	ec51 0b19 	vmov	r0, r1, d9
 801407c:	f7ec fadc 	bl	8000638 <__aeabi_dmul>
 8014080:	1136      	asrs	r6, r6, #4
 8014082:	4682      	mov	sl, r0
 8014084:	468b      	mov	fp, r1
 8014086:	2300      	movs	r3, #0
 8014088:	2502      	movs	r5, #2
 801408a:	2e00      	cmp	r6, #0
 801408c:	d17a      	bne.n	8014184 <_dtoa_r+0x4c4>
 801408e:	2b00      	cmp	r3, #0
 8014090:	d1d3      	bne.n	801403a <_dtoa_r+0x37a>
 8014092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014094:	2b00      	cmp	r3, #0
 8014096:	f000 8082 	beq.w	801419e <_dtoa_r+0x4de>
 801409a:	4b91      	ldr	r3, [pc, #580]	; (80142e0 <_dtoa_r+0x620>)
 801409c:	2200      	movs	r2, #0
 801409e:	4650      	mov	r0, sl
 80140a0:	4659      	mov	r1, fp
 80140a2:	f7ec fd3b 	bl	8000b1c <__aeabi_dcmplt>
 80140a6:	2800      	cmp	r0, #0
 80140a8:	d079      	beq.n	801419e <_dtoa_r+0x4de>
 80140aa:	9b03      	ldr	r3, [sp, #12]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d076      	beq.n	801419e <_dtoa_r+0x4de>
 80140b0:	9b02      	ldr	r3, [sp, #8]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	dd36      	ble.n	8014124 <_dtoa_r+0x464>
 80140b6:	9b00      	ldr	r3, [sp, #0]
 80140b8:	4650      	mov	r0, sl
 80140ba:	4659      	mov	r1, fp
 80140bc:	1e5f      	subs	r7, r3, #1
 80140be:	2200      	movs	r2, #0
 80140c0:	4b88      	ldr	r3, [pc, #544]	; (80142e4 <_dtoa_r+0x624>)
 80140c2:	f7ec fab9 	bl	8000638 <__aeabi_dmul>
 80140c6:	9e02      	ldr	r6, [sp, #8]
 80140c8:	4682      	mov	sl, r0
 80140ca:	468b      	mov	fp, r1
 80140cc:	3501      	adds	r5, #1
 80140ce:	4628      	mov	r0, r5
 80140d0:	f7ec fa48 	bl	8000564 <__aeabi_i2d>
 80140d4:	4652      	mov	r2, sl
 80140d6:	465b      	mov	r3, fp
 80140d8:	f7ec faae 	bl	8000638 <__aeabi_dmul>
 80140dc:	4b82      	ldr	r3, [pc, #520]	; (80142e8 <_dtoa_r+0x628>)
 80140de:	2200      	movs	r2, #0
 80140e0:	f7ec f8f4 	bl	80002cc <__adddf3>
 80140e4:	46d0      	mov	r8, sl
 80140e6:	46d9      	mov	r9, fp
 80140e8:	4682      	mov	sl, r0
 80140ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80140ee:	2e00      	cmp	r6, #0
 80140f0:	d158      	bne.n	80141a4 <_dtoa_r+0x4e4>
 80140f2:	4b7e      	ldr	r3, [pc, #504]	; (80142ec <_dtoa_r+0x62c>)
 80140f4:	2200      	movs	r2, #0
 80140f6:	4640      	mov	r0, r8
 80140f8:	4649      	mov	r1, r9
 80140fa:	f7ec f8e5 	bl	80002c8 <__aeabi_dsub>
 80140fe:	4652      	mov	r2, sl
 8014100:	465b      	mov	r3, fp
 8014102:	4680      	mov	r8, r0
 8014104:	4689      	mov	r9, r1
 8014106:	f7ec fd27 	bl	8000b58 <__aeabi_dcmpgt>
 801410a:	2800      	cmp	r0, #0
 801410c:	f040 8295 	bne.w	801463a <_dtoa_r+0x97a>
 8014110:	4652      	mov	r2, sl
 8014112:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014116:	4640      	mov	r0, r8
 8014118:	4649      	mov	r1, r9
 801411a:	f7ec fcff 	bl	8000b1c <__aeabi_dcmplt>
 801411e:	2800      	cmp	r0, #0
 8014120:	f040 8289 	bne.w	8014636 <_dtoa_r+0x976>
 8014124:	ec5b ab19 	vmov	sl, fp, d9
 8014128:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801412a:	2b00      	cmp	r3, #0
 801412c:	f2c0 8148 	blt.w	80143c0 <_dtoa_r+0x700>
 8014130:	9a00      	ldr	r2, [sp, #0]
 8014132:	2a0e      	cmp	r2, #14
 8014134:	f300 8144 	bgt.w	80143c0 <_dtoa_r+0x700>
 8014138:	4b67      	ldr	r3, [pc, #412]	; (80142d8 <_dtoa_r+0x618>)
 801413a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801413e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014144:	2b00      	cmp	r3, #0
 8014146:	f280 80d5 	bge.w	80142f4 <_dtoa_r+0x634>
 801414a:	9b03      	ldr	r3, [sp, #12]
 801414c:	2b00      	cmp	r3, #0
 801414e:	f300 80d1 	bgt.w	80142f4 <_dtoa_r+0x634>
 8014152:	f040 826f 	bne.w	8014634 <_dtoa_r+0x974>
 8014156:	4b65      	ldr	r3, [pc, #404]	; (80142ec <_dtoa_r+0x62c>)
 8014158:	2200      	movs	r2, #0
 801415a:	4640      	mov	r0, r8
 801415c:	4649      	mov	r1, r9
 801415e:	f7ec fa6b 	bl	8000638 <__aeabi_dmul>
 8014162:	4652      	mov	r2, sl
 8014164:	465b      	mov	r3, fp
 8014166:	f7ec fced 	bl	8000b44 <__aeabi_dcmpge>
 801416a:	9e03      	ldr	r6, [sp, #12]
 801416c:	4637      	mov	r7, r6
 801416e:	2800      	cmp	r0, #0
 8014170:	f040 8245 	bne.w	80145fe <_dtoa_r+0x93e>
 8014174:	9d01      	ldr	r5, [sp, #4]
 8014176:	2331      	movs	r3, #49	; 0x31
 8014178:	f805 3b01 	strb.w	r3, [r5], #1
 801417c:	9b00      	ldr	r3, [sp, #0]
 801417e:	3301      	adds	r3, #1
 8014180:	9300      	str	r3, [sp, #0]
 8014182:	e240      	b.n	8014606 <_dtoa_r+0x946>
 8014184:	07f2      	lsls	r2, r6, #31
 8014186:	d505      	bpl.n	8014194 <_dtoa_r+0x4d4>
 8014188:	e9d7 2300 	ldrd	r2, r3, [r7]
 801418c:	f7ec fa54 	bl	8000638 <__aeabi_dmul>
 8014190:	3501      	adds	r5, #1
 8014192:	2301      	movs	r3, #1
 8014194:	1076      	asrs	r6, r6, #1
 8014196:	3708      	adds	r7, #8
 8014198:	e777      	b.n	801408a <_dtoa_r+0x3ca>
 801419a:	2502      	movs	r5, #2
 801419c:	e779      	b.n	8014092 <_dtoa_r+0x3d2>
 801419e:	9f00      	ldr	r7, [sp, #0]
 80141a0:	9e03      	ldr	r6, [sp, #12]
 80141a2:	e794      	b.n	80140ce <_dtoa_r+0x40e>
 80141a4:	9901      	ldr	r1, [sp, #4]
 80141a6:	4b4c      	ldr	r3, [pc, #304]	; (80142d8 <_dtoa_r+0x618>)
 80141a8:	4431      	add	r1, r6
 80141aa:	910d      	str	r1, [sp, #52]	; 0x34
 80141ac:	9908      	ldr	r1, [sp, #32]
 80141ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80141b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80141b6:	2900      	cmp	r1, #0
 80141b8:	d043      	beq.n	8014242 <_dtoa_r+0x582>
 80141ba:	494d      	ldr	r1, [pc, #308]	; (80142f0 <_dtoa_r+0x630>)
 80141bc:	2000      	movs	r0, #0
 80141be:	f7ec fb65 	bl	800088c <__aeabi_ddiv>
 80141c2:	4652      	mov	r2, sl
 80141c4:	465b      	mov	r3, fp
 80141c6:	f7ec f87f 	bl	80002c8 <__aeabi_dsub>
 80141ca:	9d01      	ldr	r5, [sp, #4]
 80141cc:	4682      	mov	sl, r0
 80141ce:	468b      	mov	fp, r1
 80141d0:	4649      	mov	r1, r9
 80141d2:	4640      	mov	r0, r8
 80141d4:	f7ec fce0 	bl	8000b98 <__aeabi_d2iz>
 80141d8:	4606      	mov	r6, r0
 80141da:	f7ec f9c3 	bl	8000564 <__aeabi_i2d>
 80141de:	4602      	mov	r2, r0
 80141e0:	460b      	mov	r3, r1
 80141e2:	4640      	mov	r0, r8
 80141e4:	4649      	mov	r1, r9
 80141e6:	f7ec f86f 	bl	80002c8 <__aeabi_dsub>
 80141ea:	3630      	adds	r6, #48	; 0x30
 80141ec:	f805 6b01 	strb.w	r6, [r5], #1
 80141f0:	4652      	mov	r2, sl
 80141f2:	465b      	mov	r3, fp
 80141f4:	4680      	mov	r8, r0
 80141f6:	4689      	mov	r9, r1
 80141f8:	f7ec fc90 	bl	8000b1c <__aeabi_dcmplt>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d163      	bne.n	80142c8 <_dtoa_r+0x608>
 8014200:	4642      	mov	r2, r8
 8014202:	464b      	mov	r3, r9
 8014204:	4936      	ldr	r1, [pc, #216]	; (80142e0 <_dtoa_r+0x620>)
 8014206:	2000      	movs	r0, #0
 8014208:	f7ec f85e 	bl	80002c8 <__aeabi_dsub>
 801420c:	4652      	mov	r2, sl
 801420e:	465b      	mov	r3, fp
 8014210:	f7ec fc84 	bl	8000b1c <__aeabi_dcmplt>
 8014214:	2800      	cmp	r0, #0
 8014216:	f040 80b5 	bne.w	8014384 <_dtoa_r+0x6c4>
 801421a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801421c:	429d      	cmp	r5, r3
 801421e:	d081      	beq.n	8014124 <_dtoa_r+0x464>
 8014220:	4b30      	ldr	r3, [pc, #192]	; (80142e4 <_dtoa_r+0x624>)
 8014222:	2200      	movs	r2, #0
 8014224:	4650      	mov	r0, sl
 8014226:	4659      	mov	r1, fp
 8014228:	f7ec fa06 	bl	8000638 <__aeabi_dmul>
 801422c:	4b2d      	ldr	r3, [pc, #180]	; (80142e4 <_dtoa_r+0x624>)
 801422e:	4682      	mov	sl, r0
 8014230:	468b      	mov	fp, r1
 8014232:	4640      	mov	r0, r8
 8014234:	4649      	mov	r1, r9
 8014236:	2200      	movs	r2, #0
 8014238:	f7ec f9fe 	bl	8000638 <__aeabi_dmul>
 801423c:	4680      	mov	r8, r0
 801423e:	4689      	mov	r9, r1
 8014240:	e7c6      	b.n	80141d0 <_dtoa_r+0x510>
 8014242:	4650      	mov	r0, sl
 8014244:	4659      	mov	r1, fp
 8014246:	f7ec f9f7 	bl	8000638 <__aeabi_dmul>
 801424a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801424c:	9d01      	ldr	r5, [sp, #4]
 801424e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014250:	4682      	mov	sl, r0
 8014252:	468b      	mov	fp, r1
 8014254:	4649      	mov	r1, r9
 8014256:	4640      	mov	r0, r8
 8014258:	f7ec fc9e 	bl	8000b98 <__aeabi_d2iz>
 801425c:	4606      	mov	r6, r0
 801425e:	f7ec f981 	bl	8000564 <__aeabi_i2d>
 8014262:	3630      	adds	r6, #48	; 0x30
 8014264:	4602      	mov	r2, r0
 8014266:	460b      	mov	r3, r1
 8014268:	4640      	mov	r0, r8
 801426a:	4649      	mov	r1, r9
 801426c:	f7ec f82c 	bl	80002c8 <__aeabi_dsub>
 8014270:	f805 6b01 	strb.w	r6, [r5], #1
 8014274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014276:	429d      	cmp	r5, r3
 8014278:	4680      	mov	r8, r0
 801427a:	4689      	mov	r9, r1
 801427c:	f04f 0200 	mov.w	r2, #0
 8014280:	d124      	bne.n	80142cc <_dtoa_r+0x60c>
 8014282:	4b1b      	ldr	r3, [pc, #108]	; (80142f0 <_dtoa_r+0x630>)
 8014284:	4650      	mov	r0, sl
 8014286:	4659      	mov	r1, fp
 8014288:	f7ec f820 	bl	80002cc <__adddf3>
 801428c:	4602      	mov	r2, r0
 801428e:	460b      	mov	r3, r1
 8014290:	4640      	mov	r0, r8
 8014292:	4649      	mov	r1, r9
 8014294:	f7ec fc60 	bl	8000b58 <__aeabi_dcmpgt>
 8014298:	2800      	cmp	r0, #0
 801429a:	d173      	bne.n	8014384 <_dtoa_r+0x6c4>
 801429c:	4652      	mov	r2, sl
 801429e:	465b      	mov	r3, fp
 80142a0:	4913      	ldr	r1, [pc, #76]	; (80142f0 <_dtoa_r+0x630>)
 80142a2:	2000      	movs	r0, #0
 80142a4:	f7ec f810 	bl	80002c8 <__aeabi_dsub>
 80142a8:	4602      	mov	r2, r0
 80142aa:	460b      	mov	r3, r1
 80142ac:	4640      	mov	r0, r8
 80142ae:	4649      	mov	r1, r9
 80142b0:	f7ec fc34 	bl	8000b1c <__aeabi_dcmplt>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	f43f af35 	beq.w	8014124 <_dtoa_r+0x464>
 80142ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80142bc:	1e6b      	subs	r3, r5, #1
 80142be:	930f      	str	r3, [sp, #60]	; 0x3c
 80142c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80142c4:	2b30      	cmp	r3, #48	; 0x30
 80142c6:	d0f8      	beq.n	80142ba <_dtoa_r+0x5fa>
 80142c8:	9700      	str	r7, [sp, #0]
 80142ca:	e049      	b.n	8014360 <_dtoa_r+0x6a0>
 80142cc:	4b05      	ldr	r3, [pc, #20]	; (80142e4 <_dtoa_r+0x624>)
 80142ce:	f7ec f9b3 	bl	8000638 <__aeabi_dmul>
 80142d2:	4680      	mov	r8, r0
 80142d4:	4689      	mov	r9, r1
 80142d6:	e7bd      	b.n	8014254 <_dtoa_r+0x594>
 80142d8:	08015cf8 	.word	0x08015cf8
 80142dc:	08015cd0 	.word	0x08015cd0
 80142e0:	3ff00000 	.word	0x3ff00000
 80142e4:	40240000 	.word	0x40240000
 80142e8:	401c0000 	.word	0x401c0000
 80142ec:	40140000 	.word	0x40140000
 80142f0:	3fe00000 	.word	0x3fe00000
 80142f4:	9d01      	ldr	r5, [sp, #4]
 80142f6:	4656      	mov	r6, sl
 80142f8:	465f      	mov	r7, fp
 80142fa:	4642      	mov	r2, r8
 80142fc:	464b      	mov	r3, r9
 80142fe:	4630      	mov	r0, r6
 8014300:	4639      	mov	r1, r7
 8014302:	f7ec fac3 	bl	800088c <__aeabi_ddiv>
 8014306:	f7ec fc47 	bl	8000b98 <__aeabi_d2iz>
 801430a:	4682      	mov	sl, r0
 801430c:	f7ec f92a 	bl	8000564 <__aeabi_i2d>
 8014310:	4642      	mov	r2, r8
 8014312:	464b      	mov	r3, r9
 8014314:	f7ec f990 	bl	8000638 <__aeabi_dmul>
 8014318:	4602      	mov	r2, r0
 801431a:	460b      	mov	r3, r1
 801431c:	4630      	mov	r0, r6
 801431e:	4639      	mov	r1, r7
 8014320:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014324:	f7eb ffd0 	bl	80002c8 <__aeabi_dsub>
 8014328:	f805 6b01 	strb.w	r6, [r5], #1
 801432c:	9e01      	ldr	r6, [sp, #4]
 801432e:	9f03      	ldr	r7, [sp, #12]
 8014330:	1bae      	subs	r6, r5, r6
 8014332:	42b7      	cmp	r7, r6
 8014334:	4602      	mov	r2, r0
 8014336:	460b      	mov	r3, r1
 8014338:	d135      	bne.n	80143a6 <_dtoa_r+0x6e6>
 801433a:	f7eb ffc7 	bl	80002cc <__adddf3>
 801433e:	4642      	mov	r2, r8
 8014340:	464b      	mov	r3, r9
 8014342:	4606      	mov	r6, r0
 8014344:	460f      	mov	r7, r1
 8014346:	f7ec fc07 	bl	8000b58 <__aeabi_dcmpgt>
 801434a:	b9d0      	cbnz	r0, 8014382 <_dtoa_r+0x6c2>
 801434c:	4642      	mov	r2, r8
 801434e:	464b      	mov	r3, r9
 8014350:	4630      	mov	r0, r6
 8014352:	4639      	mov	r1, r7
 8014354:	f7ec fbd8 	bl	8000b08 <__aeabi_dcmpeq>
 8014358:	b110      	cbz	r0, 8014360 <_dtoa_r+0x6a0>
 801435a:	f01a 0f01 	tst.w	sl, #1
 801435e:	d110      	bne.n	8014382 <_dtoa_r+0x6c2>
 8014360:	4620      	mov	r0, r4
 8014362:	ee18 1a10 	vmov	r1, s16
 8014366:	f000 faf7 	bl	8014958 <_Bfree>
 801436a:	2300      	movs	r3, #0
 801436c:	9800      	ldr	r0, [sp, #0]
 801436e:	702b      	strb	r3, [r5, #0]
 8014370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014372:	3001      	adds	r0, #1
 8014374:	6018      	str	r0, [r3, #0]
 8014376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014378:	2b00      	cmp	r3, #0
 801437a:	f43f acf1 	beq.w	8013d60 <_dtoa_r+0xa0>
 801437e:	601d      	str	r5, [r3, #0]
 8014380:	e4ee      	b.n	8013d60 <_dtoa_r+0xa0>
 8014382:	9f00      	ldr	r7, [sp, #0]
 8014384:	462b      	mov	r3, r5
 8014386:	461d      	mov	r5, r3
 8014388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801438c:	2a39      	cmp	r2, #57	; 0x39
 801438e:	d106      	bne.n	801439e <_dtoa_r+0x6de>
 8014390:	9a01      	ldr	r2, [sp, #4]
 8014392:	429a      	cmp	r2, r3
 8014394:	d1f7      	bne.n	8014386 <_dtoa_r+0x6c6>
 8014396:	9901      	ldr	r1, [sp, #4]
 8014398:	2230      	movs	r2, #48	; 0x30
 801439a:	3701      	adds	r7, #1
 801439c:	700a      	strb	r2, [r1, #0]
 801439e:	781a      	ldrb	r2, [r3, #0]
 80143a0:	3201      	adds	r2, #1
 80143a2:	701a      	strb	r2, [r3, #0]
 80143a4:	e790      	b.n	80142c8 <_dtoa_r+0x608>
 80143a6:	4ba6      	ldr	r3, [pc, #664]	; (8014640 <_dtoa_r+0x980>)
 80143a8:	2200      	movs	r2, #0
 80143aa:	f7ec f945 	bl	8000638 <__aeabi_dmul>
 80143ae:	2200      	movs	r2, #0
 80143b0:	2300      	movs	r3, #0
 80143b2:	4606      	mov	r6, r0
 80143b4:	460f      	mov	r7, r1
 80143b6:	f7ec fba7 	bl	8000b08 <__aeabi_dcmpeq>
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d09d      	beq.n	80142fa <_dtoa_r+0x63a>
 80143be:	e7cf      	b.n	8014360 <_dtoa_r+0x6a0>
 80143c0:	9a08      	ldr	r2, [sp, #32]
 80143c2:	2a00      	cmp	r2, #0
 80143c4:	f000 80d7 	beq.w	8014576 <_dtoa_r+0x8b6>
 80143c8:	9a06      	ldr	r2, [sp, #24]
 80143ca:	2a01      	cmp	r2, #1
 80143cc:	f300 80ba 	bgt.w	8014544 <_dtoa_r+0x884>
 80143d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80143d2:	2a00      	cmp	r2, #0
 80143d4:	f000 80b2 	beq.w	801453c <_dtoa_r+0x87c>
 80143d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80143dc:	9e07      	ldr	r6, [sp, #28]
 80143de:	9d04      	ldr	r5, [sp, #16]
 80143e0:	9a04      	ldr	r2, [sp, #16]
 80143e2:	441a      	add	r2, r3
 80143e4:	9204      	str	r2, [sp, #16]
 80143e6:	9a05      	ldr	r2, [sp, #20]
 80143e8:	2101      	movs	r1, #1
 80143ea:	441a      	add	r2, r3
 80143ec:	4620      	mov	r0, r4
 80143ee:	9205      	str	r2, [sp, #20]
 80143f0:	f000 fb6a 	bl	8014ac8 <__i2b>
 80143f4:	4607      	mov	r7, r0
 80143f6:	2d00      	cmp	r5, #0
 80143f8:	dd0c      	ble.n	8014414 <_dtoa_r+0x754>
 80143fa:	9b05      	ldr	r3, [sp, #20]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	dd09      	ble.n	8014414 <_dtoa_r+0x754>
 8014400:	42ab      	cmp	r3, r5
 8014402:	9a04      	ldr	r2, [sp, #16]
 8014404:	bfa8      	it	ge
 8014406:	462b      	movge	r3, r5
 8014408:	1ad2      	subs	r2, r2, r3
 801440a:	9204      	str	r2, [sp, #16]
 801440c:	9a05      	ldr	r2, [sp, #20]
 801440e:	1aed      	subs	r5, r5, r3
 8014410:	1ad3      	subs	r3, r2, r3
 8014412:	9305      	str	r3, [sp, #20]
 8014414:	9b07      	ldr	r3, [sp, #28]
 8014416:	b31b      	cbz	r3, 8014460 <_dtoa_r+0x7a0>
 8014418:	9b08      	ldr	r3, [sp, #32]
 801441a:	2b00      	cmp	r3, #0
 801441c:	f000 80af 	beq.w	801457e <_dtoa_r+0x8be>
 8014420:	2e00      	cmp	r6, #0
 8014422:	dd13      	ble.n	801444c <_dtoa_r+0x78c>
 8014424:	4639      	mov	r1, r7
 8014426:	4632      	mov	r2, r6
 8014428:	4620      	mov	r0, r4
 801442a:	f000 fc0d 	bl	8014c48 <__pow5mult>
 801442e:	ee18 2a10 	vmov	r2, s16
 8014432:	4601      	mov	r1, r0
 8014434:	4607      	mov	r7, r0
 8014436:	4620      	mov	r0, r4
 8014438:	f000 fb5c 	bl	8014af4 <__multiply>
 801443c:	ee18 1a10 	vmov	r1, s16
 8014440:	4680      	mov	r8, r0
 8014442:	4620      	mov	r0, r4
 8014444:	f000 fa88 	bl	8014958 <_Bfree>
 8014448:	ee08 8a10 	vmov	s16, r8
 801444c:	9b07      	ldr	r3, [sp, #28]
 801444e:	1b9a      	subs	r2, r3, r6
 8014450:	d006      	beq.n	8014460 <_dtoa_r+0x7a0>
 8014452:	ee18 1a10 	vmov	r1, s16
 8014456:	4620      	mov	r0, r4
 8014458:	f000 fbf6 	bl	8014c48 <__pow5mult>
 801445c:	ee08 0a10 	vmov	s16, r0
 8014460:	2101      	movs	r1, #1
 8014462:	4620      	mov	r0, r4
 8014464:	f000 fb30 	bl	8014ac8 <__i2b>
 8014468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801446a:	2b00      	cmp	r3, #0
 801446c:	4606      	mov	r6, r0
 801446e:	f340 8088 	ble.w	8014582 <_dtoa_r+0x8c2>
 8014472:	461a      	mov	r2, r3
 8014474:	4601      	mov	r1, r0
 8014476:	4620      	mov	r0, r4
 8014478:	f000 fbe6 	bl	8014c48 <__pow5mult>
 801447c:	9b06      	ldr	r3, [sp, #24]
 801447e:	2b01      	cmp	r3, #1
 8014480:	4606      	mov	r6, r0
 8014482:	f340 8081 	ble.w	8014588 <_dtoa_r+0x8c8>
 8014486:	f04f 0800 	mov.w	r8, #0
 801448a:	6933      	ldr	r3, [r6, #16]
 801448c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014490:	6918      	ldr	r0, [r3, #16]
 8014492:	f000 fac9 	bl	8014a28 <__hi0bits>
 8014496:	f1c0 0020 	rsb	r0, r0, #32
 801449a:	9b05      	ldr	r3, [sp, #20]
 801449c:	4418      	add	r0, r3
 801449e:	f010 001f 	ands.w	r0, r0, #31
 80144a2:	f000 8092 	beq.w	80145ca <_dtoa_r+0x90a>
 80144a6:	f1c0 0320 	rsb	r3, r0, #32
 80144aa:	2b04      	cmp	r3, #4
 80144ac:	f340 808a 	ble.w	80145c4 <_dtoa_r+0x904>
 80144b0:	f1c0 001c 	rsb	r0, r0, #28
 80144b4:	9b04      	ldr	r3, [sp, #16]
 80144b6:	4403      	add	r3, r0
 80144b8:	9304      	str	r3, [sp, #16]
 80144ba:	9b05      	ldr	r3, [sp, #20]
 80144bc:	4403      	add	r3, r0
 80144be:	4405      	add	r5, r0
 80144c0:	9305      	str	r3, [sp, #20]
 80144c2:	9b04      	ldr	r3, [sp, #16]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	dd07      	ble.n	80144d8 <_dtoa_r+0x818>
 80144c8:	ee18 1a10 	vmov	r1, s16
 80144cc:	461a      	mov	r2, r3
 80144ce:	4620      	mov	r0, r4
 80144d0:	f000 fc14 	bl	8014cfc <__lshift>
 80144d4:	ee08 0a10 	vmov	s16, r0
 80144d8:	9b05      	ldr	r3, [sp, #20]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	dd05      	ble.n	80144ea <_dtoa_r+0x82a>
 80144de:	4631      	mov	r1, r6
 80144e0:	461a      	mov	r2, r3
 80144e2:	4620      	mov	r0, r4
 80144e4:	f000 fc0a 	bl	8014cfc <__lshift>
 80144e8:	4606      	mov	r6, r0
 80144ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d06e      	beq.n	80145ce <_dtoa_r+0x90e>
 80144f0:	ee18 0a10 	vmov	r0, s16
 80144f4:	4631      	mov	r1, r6
 80144f6:	f000 fc71 	bl	8014ddc <__mcmp>
 80144fa:	2800      	cmp	r0, #0
 80144fc:	da67      	bge.n	80145ce <_dtoa_r+0x90e>
 80144fe:	9b00      	ldr	r3, [sp, #0]
 8014500:	3b01      	subs	r3, #1
 8014502:	ee18 1a10 	vmov	r1, s16
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	220a      	movs	r2, #10
 801450a:	2300      	movs	r3, #0
 801450c:	4620      	mov	r0, r4
 801450e:	f000 fa45 	bl	801499c <__multadd>
 8014512:	9b08      	ldr	r3, [sp, #32]
 8014514:	ee08 0a10 	vmov	s16, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	f000 81b1 	beq.w	8014880 <_dtoa_r+0xbc0>
 801451e:	2300      	movs	r3, #0
 8014520:	4639      	mov	r1, r7
 8014522:	220a      	movs	r2, #10
 8014524:	4620      	mov	r0, r4
 8014526:	f000 fa39 	bl	801499c <__multadd>
 801452a:	9b02      	ldr	r3, [sp, #8]
 801452c:	2b00      	cmp	r3, #0
 801452e:	4607      	mov	r7, r0
 8014530:	f300 808e 	bgt.w	8014650 <_dtoa_r+0x990>
 8014534:	9b06      	ldr	r3, [sp, #24]
 8014536:	2b02      	cmp	r3, #2
 8014538:	dc51      	bgt.n	80145de <_dtoa_r+0x91e>
 801453a:	e089      	b.n	8014650 <_dtoa_r+0x990>
 801453c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801453e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014542:	e74b      	b.n	80143dc <_dtoa_r+0x71c>
 8014544:	9b03      	ldr	r3, [sp, #12]
 8014546:	1e5e      	subs	r6, r3, #1
 8014548:	9b07      	ldr	r3, [sp, #28]
 801454a:	42b3      	cmp	r3, r6
 801454c:	bfbf      	itttt	lt
 801454e:	9b07      	ldrlt	r3, [sp, #28]
 8014550:	9607      	strlt	r6, [sp, #28]
 8014552:	1af2      	sublt	r2, r6, r3
 8014554:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014556:	bfb6      	itet	lt
 8014558:	189b      	addlt	r3, r3, r2
 801455a:	1b9e      	subge	r6, r3, r6
 801455c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801455e:	9b03      	ldr	r3, [sp, #12]
 8014560:	bfb8      	it	lt
 8014562:	2600      	movlt	r6, #0
 8014564:	2b00      	cmp	r3, #0
 8014566:	bfb7      	itett	lt
 8014568:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801456c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014570:	1a9d      	sublt	r5, r3, r2
 8014572:	2300      	movlt	r3, #0
 8014574:	e734      	b.n	80143e0 <_dtoa_r+0x720>
 8014576:	9e07      	ldr	r6, [sp, #28]
 8014578:	9d04      	ldr	r5, [sp, #16]
 801457a:	9f08      	ldr	r7, [sp, #32]
 801457c:	e73b      	b.n	80143f6 <_dtoa_r+0x736>
 801457e:	9a07      	ldr	r2, [sp, #28]
 8014580:	e767      	b.n	8014452 <_dtoa_r+0x792>
 8014582:	9b06      	ldr	r3, [sp, #24]
 8014584:	2b01      	cmp	r3, #1
 8014586:	dc18      	bgt.n	80145ba <_dtoa_r+0x8fa>
 8014588:	f1ba 0f00 	cmp.w	sl, #0
 801458c:	d115      	bne.n	80145ba <_dtoa_r+0x8fa>
 801458e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014592:	b993      	cbnz	r3, 80145ba <_dtoa_r+0x8fa>
 8014594:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014598:	0d1b      	lsrs	r3, r3, #20
 801459a:	051b      	lsls	r3, r3, #20
 801459c:	b183      	cbz	r3, 80145c0 <_dtoa_r+0x900>
 801459e:	9b04      	ldr	r3, [sp, #16]
 80145a0:	3301      	adds	r3, #1
 80145a2:	9304      	str	r3, [sp, #16]
 80145a4:	9b05      	ldr	r3, [sp, #20]
 80145a6:	3301      	adds	r3, #1
 80145a8:	9305      	str	r3, [sp, #20]
 80145aa:	f04f 0801 	mov.w	r8, #1
 80145ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	f47f af6a 	bne.w	801448a <_dtoa_r+0x7ca>
 80145b6:	2001      	movs	r0, #1
 80145b8:	e76f      	b.n	801449a <_dtoa_r+0x7da>
 80145ba:	f04f 0800 	mov.w	r8, #0
 80145be:	e7f6      	b.n	80145ae <_dtoa_r+0x8ee>
 80145c0:	4698      	mov	r8, r3
 80145c2:	e7f4      	b.n	80145ae <_dtoa_r+0x8ee>
 80145c4:	f43f af7d 	beq.w	80144c2 <_dtoa_r+0x802>
 80145c8:	4618      	mov	r0, r3
 80145ca:	301c      	adds	r0, #28
 80145cc:	e772      	b.n	80144b4 <_dtoa_r+0x7f4>
 80145ce:	9b03      	ldr	r3, [sp, #12]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	dc37      	bgt.n	8014644 <_dtoa_r+0x984>
 80145d4:	9b06      	ldr	r3, [sp, #24]
 80145d6:	2b02      	cmp	r3, #2
 80145d8:	dd34      	ble.n	8014644 <_dtoa_r+0x984>
 80145da:	9b03      	ldr	r3, [sp, #12]
 80145dc:	9302      	str	r3, [sp, #8]
 80145de:	9b02      	ldr	r3, [sp, #8]
 80145e0:	b96b      	cbnz	r3, 80145fe <_dtoa_r+0x93e>
 80145e2:	4631      	mov	r1, r6
 80145e4:	2205      	movs	r2, #5
 80145e6:	4620      	mov	r0, r4
 80145e8:	f000 f9d8 	bl	801499c <__multadd>
 80145ec:	4601      	mov	r1, r0
 80145ee:	4606      	mov	r6, r0
 80145f0:	ee18 0a10 	vmov	r0, s16
 80145f4:	f000 fbf2 	bl	8014ddc <__mcmp>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	f73f adbb 	bgt.w	8014174 <_dtoa_r+0x4b4>
 80145fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014600:	9d01      	ldr	r5, [sp, #4]
 8014602:	43db      	mvns	r3, r3
 8014604:	9300      	str	r3, [sp, #0]
 8014606:	f04f 0800 	mov.w	r8, #0
 801460a:	4631      	mov	r1, r6
 801460c:	4620      	mov	r0, r4
 801460e:	f000 f9a3 	bl	8014958 <_Bfree>
 8014612:	2f00      	cmp	r7, #0
 8014614:	f43f aea4 	beq.w	8014360 <_dtoa_r+0x6a0>
 8014618:	f1b8 0f00 	cmp.w	r8, #0
 801461c:	d005      	beq.n	801462a <_dtoa_r+0x96a>
 801461e:	45b8      	cmp	r8, r7
 8014620:	d003      	beq.n	801462a <_dtoa_r+0x96a>
 8014622:	4641      	mov	r1, r8
 8014624:	4620      	mov	r0, r4
 8014626:	f000 f997 	bl	8014958 <_Bfree>
 801462a:	4639      	mov	r1, r7
 801462c:	4620      	mov	r0, r4
 801462e:	f000 f993 	bl	8014958 <_Bfree>
 8014632:	e695      	b.n	8014360 <_dtoa_r+0x6a0>
 8014634:	2600      	movs	r6, #0
 8014636:	4637      	mov	r7, r6
 8014638:	e7e1      	b.n	80145fe <_dtoa_r+0x93e>
 801463a:	9700      	str	r7, [sp, #0]
 801463c:	4637      	mov	r7, r6
 801463e:	e599      	b.n	8014174 <_dtoa_r+0x4b4>
 8014640:	40240000 	.word	0x40240000
 8014644:	9b08      	ldr	r3, [sp, #32]
 8014646:	2b00      	cmp	r3, #0
 8014648:	f000 80ca 	beq.w	80147e0 <_dtoa_r+0xb20>
 801464c:	9b03      	ldr	r3, [sp, #12]
 801464e:	9302      	str	r3, [sp, #8]
 8014650:	2d00      	cmp	r5, #0
 8014652:	dd05      	ble.n	8014660 <_dtoa_r+0x9a0>
 8014654:	4639      	mov	r1, r7
 8014656:	462a      	mov	r2, r5
 8014658:	4620      	mov	r0, r4
 801465a:	f000 fb4f 	bl	8014cfc <__lshift>
 801465e:	4607      	mov	r7, r0
 8014660:	f1b8 0f00 	cmp.w	r8, #0
 8014664:	d05b      	beq.n	801471e <_dtoa_r+0xa5e>
 8014666:	6879      	ldr	r1, [r7, #4]
 8014668:	4620      	mov	r0, r4
 801466a:	f000 f935 	bl	80148d8 <_Balloc>
 801466e:	4605      	mov	r5, r0
 8014670:	b928      	cbnz	r0, 801467e <_dtoa_r+0x9be>
 8014672:	4b87      	ldr	r3, [pc, #540]	; (8014890 <_dtoa_r+0xbd0>)
 8014674:	4602      	mov	r2, r0
 8014676:	f240 21ea 	movw	r1, #746	; 0x2ea
 801467a:	f7ff bb3b 	b.w	8013cf4 <_dtoa_r+0x34>
 801467e:	693a      	ldr	r2, [r7, #16]
 8014680:	3202      	adds	r2, #2
 8014682:	0092      	lsls	r2, r2, #2
 8014684:	f107 010c 	add.w	r1, r7, #12
 8014688:	300c      	adds	r0, #12
 801468a:	f000 f90b 	bl	80148a4 <memcpy>
 801468e:	2201      	movs	r2, #1
 8014690:	4629      	mov	r1, r5
 8014692:	4620      	mov	r0, r4
 8014694:	f000 fb32 	bl	8014cfc <__lshift>
 8014698:	9b01      	ldr	r3, [sp, #4]
 801469a:	f103 0901 	add.w	r9, r3, #1
 801469e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80146a2:	4413      	add	r3, r2
 80146a4:	9305      	str	r3, [sp, #20]
 80146a6:	f00a 0301 	and.w	r3, sl, #1
 80146aa:	46b8      	mov	r8, r7
 80146ac:	9304      	str	r3, [sp, #16]
 80146ae:	4607      	mov	r7, r0
 80146b0:	4631      	mov	r1, r6
 80146b2:	ee18 0a10 	vmov	r0, s16
 80146b6:	f7ff fa77 	bl	8013ba8 <quorem>
 80146ba:	4641      	mov	r1, r8
 80146bc:	9002      	str	r0, [sp, #8]
 80146be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80146c2:	ee18 0a10 	vmov	r0, s16
 80146c6:	f000 fb89 	bl	8014ddc <__mcmp>
 80146ca:	463a      	mov	r2, r7
 80146cc:	9003      	str	r0, [sp, #12]
 80146ce:	4631      	mov	r1, r6
 80146d0:	4620      	mov	r0, r4
 80146d2:	f000 fb9f 	bl	8014e14 <__mdiff>
 80146d6:	68c2      	ldr	r2, [r0, #12]
 80146d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80146dc:	4605      	mov	r5, r0
 80146de:	bb02      	cbnz	r2, 8014722 <_dtoa_r+0xa62>
 80146e0:	4601      	mov	r1, r0
 80146e2:	ee18 0a10 	vmov	r0, s16
 80146e6:	f000 fb79 	bl	8014ddc <__mcmp>
 80146ea:	4602      	mov	r2, r0
 80146ec:	4629      	mov	r1, r5
 80146ee:	4620      	mov	r0, r4
 80146f0:	9207      	str	r2, [sp, #28]
 80146f2:	f000 f931 	bl	8014958 <_Bfree>
 80146f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80146fa:	ea43 0102 	orr.w	r1, r3, r2
 80146fe:	9b04      	ldr	r3, [sp, #16]
 8014700:	430b      	orrs	r3, r1
 8014702:	464d      	mov	r5, r9
 8014704:	d10f      	bne.n	8014726 <_dtoa_r+0xa66>
 8014706:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801470a:	d02a      	beq.n	8014762 <_dtoa_r+0xaa2>
 801470c:	9b03      	ldr	r3, [sp, #12]
 801470e:	2b00      	cmp	r3, #0
 8014710:	dd02      	ble.n	8014718 <_dtoa_r+0xa58>
 8014712:	9b02      	ldr	r3, [sp, #8]
 8014714:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014718:	f88b a000 	strb.w	sl, [fp]
 801471c:	e775      	b.n	801460a <_dtoa_r+0x94a>
 801471e:	4638      	mov	r0, r7
 8014720:	e7ba      	b.n	8014698 <_dtoa_r+0x9d8>
 8014722:	2201      	movs	r2, #1
 8014724:	e7e2      	b.n	80146ec <_dtoa_r+0xa2c>
 8014726:	9b03      	ldr	r3, [sp, #12]
 8014728:	2b00      	cmp	r3, #0
 801472a:	db04      	blt.n	8014736 <_dtoa_r+0xa76>
 801472c:	9906      	ldr	r1, [sp, #24]
 801472e:	430b      	orrs	r3, r1
 8014730:	9904      	ldr	r1, [sp, #16]
 8014732:	430b      	orrs	r3, r1
 8014734:	d122      	bne.n	801477c <_dtoa_r+0xabc>
 8014736:	2a00      	cmp	r2, #0
 8014738:	ddee      	ble.n	8014718 <_dtoa_r+0xa58>
 801473a:	ee18 1a10 	vmov	r1, s16
 801473e:	2201      	movs	r2, #1
 8014740:	4620      	mov	r0, r4
 8014742:	f000 fadb 	bl	8014cfc <__lshift>
 8014746:	4631      	mov	r1, r6
 8014748:	ee08 0a10 	vmov	s16, r0
 801474c:	f000 fb46 	bl	8014ddc <__mcmp>
 8014750:	2800      	cmp	r0, #0
 8014752:	dc03      	bgt.n	801475c <_dtoa_r+0xa9c>
 8014754:	d1e0      	bne.n	8014718 <_dtoa_r+0xa58>
 8014756:	f01a 0f01 	tst.w	sl, #1
 801475a:	d0dd      	beq.n	8014718 <_dtoa_r+0xa58>
 801475c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014760:	d1d7      	bne.n	8014712 <_dtoa_r+0xa52>
 8014762:	2339      	movs	r3, #57	; 0x39
 8014764:	f88b 3000 	strb.w	r3, [fp]
 8014768:	462b      	mov	r3, r5
 801476a:	461d      	mov	r5, r3
 801476c:	3b01      	subs	r3, #1
 801476e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014772:	2a39      	cmp	r2, #57	; 0x39
 8014774:	d071      	beq.n	801485a <_dtoa_r+0xb9a>
 8014776:	3201      	adds	r2, #1
 8014778:	701a      	strb	r2, [r3, #0]
 801477a:	e746      	b.n	801460a <_dtoa_r+0x94a>
 801477c:	2a00      	cmp	r2, #0
 801477e:	dd07      	ble.n	8014790 <_dtoa_r+0xad0>
 8014780:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014784:	d0ed      	beq.n	8014762 <_dtoa_r+0xaa2>
 8014786:	f10a 0301 	add.w	r3, sl, #1
 801478a:	f88b 3000 	strb.w	r3, [fp]
 801478e:	e73c      	b.n	801460a <_dtoa_r+0x94a>
 8014790:	9b05      	ldr	r3, [sp, #20]
 8014792:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014796:	4599      	cmp	r9, r3
 8014798:	d047      	beq.n	801482a <_dtoa_r+0xb6a>
 801479a:	ee18 1a10 	vmov	r1, s16
 801479e:	2300      	movs	r3, #0
 80147a0:	220a      	movs	r2, #10
 80147a2:	4620      	mov	r0, r4
 80147a4:	f000 f8fa 	bl	801499c <__multadd>
 80147a8:	45b8      	cmp	r8, r7
 80147aa:	ee08 0a10 	vmov	s16, r0
 80147ae:	f04f 0300 	mov.w	r3, #0
 80147b2:	f04f 020a 	mov.w	r2, #10
 80147b6:	4641      	mov	r1, r8
 80147b8:	4620      	mov	r0, r4
 80147ba:	d106      	bne.n	80147ca <_dtoa_r+0xb0a>
 80147bc:	f000 f8ee 	bl	801499c <__multadd>
 80147c0:	4680      	mov	r8, r0
 80147c2:	4607      	mov	r7, r0
 80147c4:	f109 0901 	add.w	r9, r9, #1
 80147c8:	e772      	b.n	80146b0 <_dtoa_r+0x9f0>
 80147ca:	f000 f8e7 	bl	801499c <__multadd>
 80147ce:	4639      	mov	r1, r7
 80147d0:	4680      	mov	r8, r0
 80147d2:	2300      	movs	r3, #0
 80147d4:	220a      	movs	r2, #10
 80147d6:	4620      	mov	r0, r4
 80147d8:	f000 f8e0 	bl	801499c <__multadd>
 80147dc:	4607      	mov	r7, r0
 80147de:	e7f1      	b.n	80147c4 <_dtoa_r+0xb04>
 80147e0:	9b03      	ldr	r3, [sp, #12]
 80147e2:	9302      	str	r3, [sp, #8]
 80147e4:	9d01      	ldr	r5, [sp, #4]
 80147e6:	ee18 0a10 	vmov	r0, s16
 80147ea:	4631      	mov	r1, r6
 80147ec:	f7ff f9dc 	bl	8013ba8 <quorem>
 80147f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80147f4:	9b01      	ldr	r3, [sp, #4]
 80147f6:	f805 ab01 	strb.w	sl, [r5], #1
 80147fa:	1aea      	subs	r2, r5, r3
 80147fc:	9b02      	ldr	r3, [sp, #8]
 80147fe:	4293      	cmp	r3, r2
 8014800:	dd09      	ble.n	8014816 <_dtoa_r+0xb56>
 8014802:	ee18 1a10 	vmov	r1, s16
 8014806:	2300      	movs	r3, #0
 8014808:	220a      	movs	r2, #10
 801480a:	4620      	mov	r0, r4
 801480c:	f000 f8c6 	bl	801499c <__multadd>
 8014810:	ee08 0a10 	vmov	s16, r0
 8014814:	e7e7      	b.n	80147e6 <_dtoa_r+0xb26>
 8014816:	9b02      	ldr	r3, [sp, #8]
 8014818:	2b00      	cmp	r3, #0
 801481a:	bfc8      	it	gt
 801481c:	461d      	movgt	r5, r3
 801481e:	9b01      	ldr	r3, [sp, #4]
 8014820:	bfd8      	it	le
 8014822:	2501      	movle	r5, #1
 8014824:	441d      	add	r5, r3
 8014826:	f04f 0800 	mov.w	r8, #0
 801482a:	ee18 1a10 	vmov	r1, s16
 801482e:	2201      	movs	r2, #1
 8014830:	4620      	mov	r0, r4
 8014832:	f000 fa63 	bl	8014cfc <__lshift>
 8014836:	4631      	mov	r1, r6
 8014838:	ee08 0a10 	vmov	s16, r0
 801483c:	f000 face 	bl	8014ddc <__mcmp>
 8014840:	2800      	cmp	r0, #0
 8014842:	dc91      	bgt.n	8014768 <_dtoa_r+0xaa8>
 8014844:	d102      	bne.n	801484c <_dtoa_r+0xb8c>
 8014846:	f01a 0f01 	tst.w	sl, #1
 801484a:	d18d      	bne.n	8014768 <_dtoa_r+0xaa8>
 801484c:	462b      	mov	r3, r5
 801484e:	461d      	mov	r5, r3
 8014850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014854:	2a30      	cmp	r2, #48	; 0x30
 8014856:	d0fa      	beq.n	801484e <_dtoa_r+0xb8e>
 8014858:	e6d7      	b.n	801460a <_dtoa_r+0x94a>
 801485a:	9a01      	ldr	r2, [sp, #4]
 801485c:	429a      	cmp	r2, r3
 801485e:	d184      	bne.n	801476a <_dtoa_r+0xaaa>
 8014860:	9b00      	ldr	r3, [sp, #0]
 8014862:	3301      	adds	r3, #1
 8014864:	9300      	str	r3, [sp, #0]
 8014866:	2331      	movs	r3, #49	; 0x31
 8014868:	7013      	strb	r3, [r2, #0]
 801486a:	e6ce      	b.n	801460a <_dtoa_r+0x94a>
 801486c:	4b09      	ldr	r3, [pc, #36]	; (8014894 <_dtoa_r+0xbd4>)
 801486e:	f7ff ba95 	b.w	8013d9c <_dtoa_r+0xdc>
 8014872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014874:	2b00      	cmp	r3, #0
 8014876:	f47f aa6e 	bne.w	8013d56 <_dtoa_r+0x96>
 801487a:	4b07      	ldr	r3, [pc, #28]	; (8014898 <_dtoa_r+0xbd8>)
 801487c:	f7ff ba8e 	b.w	8013d9c <_dtoa_r+0xdc>
 8014880:	9b02      	ldr	r3, [sp, #8]
 8014882:	2b00      	cmp	r3, #0
 8014884:	dcae      	bgt.n	80147e4 <_dtoa_r+0xb24>
 8014886:	9b06      	ldr	r3, [sp, #24]
 8014888:	2b02      	cmp	r3, #2
 801488a:	f73f aea8 	bgt.w	80145de <_dtoa_r+0x91e>
 801488e:	e7a9      	b.n	80147e4 <_dtoa_r+0xb24>
 8014890:	08015c5f 	.word	0x08015c5f
 8014894:	08015bbc 	.word	0x08015bbc
 8014898:	08015be0 	.word	0x08015be0

0801489c <_localeconv_r>:
 801489c:	4800      	ldr	r0, [pc, #0]	; (80148a0 <_localeconv_r+0x4>)
 801489e:	4770      	bx	lr
 80148a0:	20000280 	.word	0x20000280

080148a4 <memcpy>:
 80148a4:	440a      	add	r2, r1
 80148a6:	4291      	cmp	r1, r2
 80148a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80148ac:	d100      	bne.n	80148b0 <memcpy+0xc>
 80148ae:	4770      	bx	lr
 80148b0:	b510      	push	{r4, lr}
 80148b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148ba:	4291      	cmp	r1, r2
 80148bc:	d1f9      	bne.n	80148b2 <memcpy+0xe>
 80148be:	bd10      	pop	{r4, pc}

080148c0 <__malloc_lock>:
 80148c0:	4801      	ldr	r0, [pc, #4]	; (80148c8 <__malloc_lock+0x8>)
 80148c2:	f000 bbd4 	b.w	801506e <__retarget_lock_acquire_recursive>
 80148c6:	bf00      	nop
 80148c8:	200048b8 	.word	0x200048b8

080148cc <__malloc_unlock>:
 80148cc:	4801      	ldr	r0, [pc, #4]	; (80148d4 <__malloc_unlock+0x8>)
 80148ce:	f000 bbcf 	b.w	8015070 <__retarget_lock_release_recursive>
 80148d2:	bf00      	nop
 80148d4:	200048b8 	.word	0x200048b8

080148d8 <_Balloc>:
 80148d8:	b570      	push	{r4, r5, r6, lr}
 80148da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80148dc:	4604      	mov	r4, r0
 80148de:	460d      	mov	r5, r1
 80148e0:	b976      	cbnz	r6, 8014900 <_Balloc+0x28>
 80148e2:	2010      	movs	r0, #16
 80148e4:	f7fe fbee 	bl	80130c4 <malloc>
 80148e8:	4602      	mov	r2, r0
 80148ea:	6260      	str	r0, [r4, #36]	; 0x24
 80148ec:	b920      	cbnz	r0, 80148f8 <_Balloc+0x20>
 80148ee:	4b18      	ldr	r3, [pc, #96]	; (8014950 <_Balloc+0x78>)
 80148f0:	4818      	ldr	r0, [pc, #96]	; (8014954 <_Balloc+0x7c>)
 80148f2:	2166      	movs	r1, #102	; 0x66
 80148f4:	f000 fb8a 	bl	801500c <__assert_func>
 80148f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148fc:	6006      	str	r6, [r0, #0]
 80148fe:	60c6      	str	r6, [r0, #12]
 8014900:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014902:	68f3      	ldr	r3, [r6, #12]
 8014904:	b183      	cbz	r3, 8014928 <_Balloc+0x50>
 8014906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014908:	68db      	ldr	r3, [r3, #12]
 801490a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801490e:	b9b8      	cbnz	r0, 8014940 <_Balloc+0x68>
 8014910:	2101      	movs	r1, #1
 8014912:	fa01 f605 	lsl.w	r6, r1, r5
 8014916:	1d72      	adds	r2, r6, #5
 8014918:	0092      	lsls	r2, r2, #2
 801491a:	4620      	mov	r0, r4
 801491c:	f000 fb60 	bl	8014fe0 <_calloc_r>
 8014920:	b160      	cbz	r0, 801493c <_Balloc+0x64>
 8014922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014926:	e00e      	b.n	8014946 <_Balloc+0x6e>
 8014928:	2221      	movs	r2, #33	; 0x21
 801492a:	2104      	movs	r1, #4
 801492c:	4620      	mov	r0, r4
 801492e:	f000 fb57 	bl	8014fe0 <_calloc_r>
 8014932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014934:	60f0      	str	r0, [r6, #12]
 8014936:	68db      	ldr	r3, [r3, #12]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d1e4      	bne.n	8014906 <_Balloc+0x2e>
 801493c:	2000      	movs	r0, #0
 801493e:	bd70      	pop	{r4, r5, r6, pc}
 8014940:	6802      	ldr	r2, [r0, #0]
 8014942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014946:	2300      	movs	r3, #0
 8014948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801494c:	e7f7      	b.n	801493e <_Balloc+0x66>
 801494e:	bf00      	nop
 8014950:	08015bed 	.word	0x08015bed
 8014954:	08015c70 	.word	0x08015c70

08014958 <_Bfree>:
 8014958:	b570      	push	{r4, r5, r6, lr}
 801495a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801495c:	4605      	mov	r5, r0
 801495e:	460c      	mov	r4, r1
 8014960:	b976      	cbnz	r6, 8014980 <_Bfree+0x28>
 8014962:	2010      	movs	r0, #16
 8014964:	f7fe fbae 	bl	80130c4 <malloc>
 8014968:	4602      	mov	r2, r0
 801496a:	6268      	str	r0, [r5, #36]	; 0x24
 801496c:	b920      	cbnz	r0, 8014978 <_Bfree+0x20>
 801496e:	4b09      	ldr	r3, [pc, #36]	; (8014994 <_Bfree+0x3c>)
 8014970:	4809      	ldr	r0, [pc, #36]	; (8014998 <_Bfree+0x40>)
 8014972:	218a      	movs	r1, #138	; 0x8a
 8014974:	f000 fb4a 	bl	801500c <__assert_func>
 8014978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801497c:	6006      	str	r6, [r0, #0]
 801497e:	60c6      	str	r6, [r0, #12]
 8014980:	b13c      	cbz	r4, 8014992 <_Bfree+0x3a>
 8014982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014984:	6862      	ldr	r2, [r4, #4]
 8014986:	68db      	ldr	r3, [r3, #12]
 8014988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801498c:	6021      	str	r1, [r4, #0]
 801498e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014992:	bd70      	pop	{r4, r5, r6, pc}
 8014994:	08015bed 	.word	0x08015bed
 8014998:	08015c70 	.word	0x08015c70

0801499c <__multadd>:
 801499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a0:	690d      	ldr	r5, [r1, #16]
 80149a2:	4607      	mov	r7, r0
 80149a4:	460c      	mov	r4, r1
 80149a6:	461e      	mov	r6, r3
 80149a8:	f101 0c14 	add.w	ip, r1, #20
 80149ac:	2000      	movs	r0, #0
 80149ae:	f8dc 3000 	ldr.w	r3, [ip]
 80149b2:	b299      	uxth	r1, r3
 80149b4:	fb02 6101 	mla	r1, r2, r1, r6
 80149b8:	0c1e      	lsrs	r6, r3, #16
 80149ba:	0c0b      	lsrs	r3, r1, #16
 80149bc:	fb02 3306 	mla	r3, r2, r6, r3
 80149c0:	b289      	uxth	r1, r1
 80149c2:	3001      	adds	r0, #1
 80149c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80149c8:	4285      	cmp	r5, r0
 80149ca:	f84c 1b04 	str.w	r1, [ip], #4
 80149ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80149d2:	dcec      	bgt.n	80149ae <__multadd+0x12>
 80149d4:	b30e      	cbz	r6, 8014a1a <__multadd+0x7e>
 80149d6:	68a3      	ldr	r3, [r4, #8]
 80149d8:	42ab      	cmp	r3, r5
 80149da:	dc19      	bgt.n	8014a10 <__multadd+0x74>
 80149dc:	6861      	ldr	r1, [r4, #4]
 80149de:	4638      	mov	r0, r7
 80149e0:	3101      	adds	r1, #1
 80149e2:	f7ff ff79 	bl	80148d8 <_Balloc>
 80149e6:	4680      	mov	r8, r0
 80149e8:	b928      	cbnz	r0, 80149f6 <__multadd+0x5a>
 80149ea:	4602      	mov	r2, r0
 80149ec:	4b0c      	ldr	r3, [pc, #48]	; (8014a20 <__multadd+0x84>)
 80149ee:	480d      	ldr	r0, [pc, #52]	; (8014a24 <__multadd+0x88>)
 80149f0:	21b5      	movs	r1, #181	; 0xb5
 80149f2:	f000 fb0b 	bl	801500c <__assert_func>
 80149f6:	6922      	ldr	r2, [r4, #16]
 80149f8:	3202      	adds	r2, #2
 80149fa:	f104 010c 	add.w	r1, r4, #12
 80149fe:	0092      	lsls	r2, r2, #2
 8014a00:	300c      	adds	r0, #12
 8014a02:	f7ff ff4f 	bl	80148a4 <memcpy>
 8014a06:	4621      	mov	r1, r4
 8014a08:	4638      	mov	r0, r7
 8014a0a:	f7ff ffa5 	bl	8014958 <_Bfree>
 8014a0e:	4644      	mov	r4, r8
 8014a10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014a14:	3501      	adds	r5, #1
 8014a16:	615e      	str	r6, [r3, #20]
 8014a18:	6125      	str	r5, [r4, #16]
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a20:	08015c5f 	.word	0x08015c5f
 8014a24:	08015c70 	.word	0x08015c70

08014a28 <__hi0bits>:
 8014a28:	0c03      	lsrs	r3, r0, #16
 8014a2a:	041b      	lsls	r3, r3, #16
 8014a2c:	b9d3      	cbnz	r3, 8014a64 <__hi0bits+0x3c>
 8014a2e:	0400      	lsls	r0, r0, #16
 8014a30:	2310      	movs	r3, #16
 8014a32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014a36:	bf04      	itt	eq
 8014a38:	0200      	lsleq	r0, r0, #8
 8014a3a:	3308      	addeq	r3, #8
 8014a3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014a40:	bf04      	itt	eq
 8014a42:	0100      	lsleq	r0, r0, #4
 8014a44:	3304      	addeq	r3, #4
 8014a46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014a4a:	bf04      	itt	eq
 8014a4c:	0080      	lsleq	r0, r0, #2
 8014a4e:	3302      	addeq	r3, #2
 8014a50:	2800      	cmp	r0, #0
 8014a52:	db05      	blt.n	8014a60 <__hi0bits+0x38>
 8014a54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014a58:	f103 0301 	add.w	r3, r3, #1
 8014a5c:	bf08      	it	eq
 8014a5e:	2320      	moveq	r3, #32
 8014a60:	4618      	mov	r0, r3
 8014a62:	4770      	bx	lr
 8014a64:	2300      	movs	r3, #0
 8014a66:	e7e4      	b.n	8014a32 <__hi0bits+0xa>

08014a68 <__lo0bits>:
 8014a68:	6803      	ldr	r3, [r0, #0]
 8014a6a:	f013 0207 	ands.w	r2, r3, #7
 8014a6e:	4601      	mov	r1, r0
 8014a70:	d00b      	beq.n	8014a8a <__lo0bits+0x22>
 8014a72:	07da      	lsls	r2, r3, #31
 8014a74:	d423      	bmi.n	8014abe <__lo0bits+0x56>
 8014a76:	0798      	lsls	r0, r3, #30
 8014a78:	bf49      	itett	mi
 8014a7a:	085b      	lsrmi	r3, r3, #1
 8014a7c:	089b      	lsrpl	r3, r3, #2
 8014a7e:	2001      	movmi	r0, #1
 8014a80:	600b      	strmi	r3, [r1, #0]
 8014a82:	bf5c      	itt	pl
 8014a84:	600b      	strpl	r3, [r1, #0]
 8014a86:	2002      	movpl	r0, #2
 8014a88:	4770      	bx	lr
 8014a8a:	b298      	uxth	r0, r3
 8014a8c:	b9a8      	cbnz	r0, 8014aba <__lo0bits+0x52>
 8014a8e:	0c1b      	lsrs	r3, r3, #16
 8014a90:	2010      	movs	r0, #16
 8014a92:	b2da      	uxtb	r2, r3
 8014a94:	b90a      	cbnz	r2, 8014a9a <__lo0bits+0x32>
 8014a96:	3008      	adds	r0, #8
 8014a98:	0a1b      	lsrs	r3, r3, #8
 8014a9a:	071a      	lsls	r2, r3, #28
 8014a9c:	bf04      	itt	eq
 8014a9e:	091b      	lsreq	r3, r3, #4
 8014aa0:	3004      	addeq	r0, #4
 8014aa2:	079a      	lsls	r2, r3, #30
 8014aa4:	bf04      	itt	eq
 8014aa6:	089b      	lsreq	r3, r3, #2
 8014aa8:	3002      	addeq	r0, #2
 8014aaa:	07da      	lsls	r2, r3, #31
 8014aac:	d403      	bmi.n	8014ab6 <__lo0bits+0x4e>
 8014aae:	085b      	lsrs	r3, r3, #1
 8014ab0:	f100 0001 	add.w	r0, r0, #1
 8014ab4:	d005      	beq.n	8014ac2 <__lo0bits+0x5a>
 8014ab6:	600b      	str	r3, [r1, #0]
 8014ab8:	4770      	bx	lr
 8014aba:	4610      	mov	r0, r2
 8014abc:	e7e9      	b.n	8014a92 <__lo0bits+0x2a>
 8014abe:	2000      	movs	r0, #0
 8014ac0:	4770      	bx	lr
 8014ac2:	2020      	movs	r0, #32
 8014ac4:	4770      	bx	lr
	...

08014ac8 <__i2b>:
 8014ac8:	b510      	push	{r4, lr}
 8014aca:	460c      	mov	r4, r1
 8014acc:	2101      	movs	r1, #1
 8014ace:	f7ff ff03 	bl	80148d8 <_Balloc>
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	b928      	cbnz	r0, 8014ae2 <__i2b+0x1a>
 8014ad6:	4b05      	ldr	r3, [pc, #20]	; (8014aec <__i2b+0x24>)
 8014ad8:	4805      	ldr	r0, [pc, #20]	; (8014af0 <__i2b+0x28>)
 8014ada:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014ade:	f000 fa95 	bl	801500c <__assert_func>
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	6144      	str	r4, [r0, #20]
 8014ae6:	6103      	str	r3, [r0, #16]
 8014ae8:	bd10      	pop	{r4, pc}
 8014aea:	bf00      	nop
 8014aec:	08015c5f 	.word	0x08015c5f
 8014af0:	08015c70 	.word	0x08015c70

08014af4 <__multiply>:
 8014af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af8:	4691      	mov	r9, r2
 8014afa:	690a      	ldr	r2, [r1, #16]
 8014afc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b00:	429a      	cmp	r2, r3
 8014b02:	bfb8      	it	lt
 8014b04:	460b      	movlt	r3, r1
 8014b06:	460c      	mov	r4, r1
 8014b08:	bfbc      	itt	lt
 8014b0a:	464c      	movlt	r4, r9
 8014b0c:	4699      	movlt	r9, r3
 8014b0e:	6927      	ldr	r7, [r4, #16]
 8014b10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014b14:	68a3      	ldr	r3, [r4, #8]
 8014b16:	6861      	ldr	r1, [r4, #4]
 8014b18:	eb07 060a 	add.w	r6, r7, sl
 8014b1c:	42b3      	cmp	r3, r6
 8014b1e:	b085      	sub	sp, #20
 8014b20:	bfb8      	it	lt
 8014b22:	3101      	addlt	r1, #1
 8014b24:	f7ff fed8 	bl	80148d8 <_Balloc>
 8014b28:	b930      	cbnz	r0, 8014b38 <__multiply+0x44>
 8014b2a:	4602      	mov	r2, r0
 8014b2c:	4b44      	ldr	r3, [pc, #272]	; (8014c40 <__multiply+0x14c>)
 8014b2e:	4845      	ldr	r0, [pc, #276]	; (8014c44 <__multiply+0x150>)
 8014b30:	f240 115d 	movw	r1, #349	; 0x15d
 8014b34:	f000 fa6a 	bl	801500c <__assert_func>
 8014b38:	f100 0514 	add.w	r5, r0, #20
 8014b3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014b40:	462b      	mov	r3, r5
 8014b42:	2200      	movs	r2, #0
 8014b44:	4543      	cmp	r3, r8
 8014b46:	d321      	bcc.n	8014b8c <__multiply+0x98>
 8014b48:	f104 0314 	add.w	r3, r4, #20
 8014b4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014b50:	f109 0314 	add.w	r3, r9, #20
 8014b54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014b58:	9202      	str	r2, [sp, #8]
 8014b5a:	1b3a      	subs	r2, r7, r4
 8014b5c:	3a15      	subs	r2, #21
 8014b5e:	f022 0203 	bic.w	r2, r2, #3
 8014b62:	3204      	adds	r2, #4
 8014b64:	f104 0115 	add.w	r1, r4, #21
 8014b68:	428f      	cmp	r7, r1
 8014b6a:	bf38      	it	cc
 8014b6c:	2204      	movcc	r2, #4
 8014b6e:	9201      	str	r2, [sp, #4]
 8014b70:	9a02      	ldr	r2, [sp, #8]
 8014b72:	9303      	str	r3, [sp, #12]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d80c      	bhi.n	8014b92 <__multiply+0x9e>
 8014b78:	2e00      	cmp	r6, #0
 8014b7a:	dd03      	ble.n	8014b84 <__multiply+0x90>
 8014b7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d05a      	beq.n	8014c3a <__multiply+0x146>
 8014b84:	6106      	str	r6, [r0, #16]
 8014b86:	b005      	add	sp, #20
 8014b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b8c:	f843 2b04 	str.w	r2, [r3], #4
 8014b90:	e7d8      	b.n	8014b44 <__multiply+0x50>
 8014b92:	f8b3 a000 	ldrh.w	sl, [r3]
 8014b96:	f1ba 0f00 	cmp.w	sl, #0
 8014b9a:	d024      	beq.n	8014be6 <__multiply+0xf2>
 8014b9c:	f104 0e14 	add.w	lr, r4, #20
 8014ba0:	46a9      	mov	r9, r5
 8014ba2:	f04f 0c00 	mov.w	ip, #0
 8014ba6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014baa:	f8d9 1000 	ldr.w	r1, [r9]
 8014bae:	fa1f fb82 	uxth.w	fp, r2
 8014bb2:	b289      	uxth	r1, r1
 8014bb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8014bb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8014bc0:	4461      	add	r1, ip
 8014bc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014bc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8014bca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014bce:	b289      	uxth	r1, r1
 8014bd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014bd4:	4577      	cmp	r7, lr
 8014bd6:	f849 1b04 	str.w	r1, [r9], #4
 8014bda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014bde:	d8e2      	bhi.n	8014ba6 <__multiply+0xb2>
 8014be0:	9a01      	ldr	r2, [sp, #4]
 8014be2:	f845 c002 	str.w	ip, [r5, r2]
 8014be6:	9a03      	ldr	r2, [sp, #12]
 8014be8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014bec:	3304      	adds	r3, #4
 8014bee:	f1b9 0f00 	cmp.w	r9, #0
 8014bf2:	d020      	beq.n	8014c36 <__multiply+0x142>
 8014bf4:	6829      	ldr	r1, [r5, #0]
 8014bf6:	f104 0c14 	add.w	ip, r4, #20
 8014bfa:	46ae      	mov	lr, r5
 8014bfc:	f04f 0a00 	mov.w	sl, #0
 8014c00:	f8bc b000 	ldrh.w	fp, [ip]
 8014c04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014c08:	fb09 220b 	mla	r2, r9, fp, r2
 8014c0c:	4492      	add	sl, r2
 8014c0e:	b289      	uxth	r1, r1
 8014c10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014c14:	f84e 1b04 	str.w	r1, [lr], #4
 8014c18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014c1c:	f8be 1000 	ldrh.w	r1, [lr]
 8014c20:	0c12      	lsrs	r2, r2, #16
 8014c22:	fb09 1102 	mla	r1, r9, r2, r1
 8014c26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014c2a:	4567      	cmp	r7, ip
 8014c2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014c30:	d8e6      	bhi.n	8014c00 <__multiply+0x10c>
 8014c32:	9a01      	ldr	r2, [sp, #4]
 8014c34:	50a9      	str	r1, [r5, r2]
 8014c36:	3504      	adds	r5, #4
 8014c38:	e79a      	b.n	8014b70 <__multiply+0x7c>
 8014c3a:	3e01      	subs	r6, #1
 8014c3c:	e79c      	b.n	8014b78 <__multiply+0x84>
 8014c3e:	bf00      	nop
 8014c40:	08015c5f 	.word	0x08015c5f
 8014c44:	08015c70 	.word	0x08015c70

08014c48 <__pow5mult>:
 8014c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c4c:	4615      	mov	r5, r2
 8014c4e:	f012 0203 	ands.w	r2, r2, #3
 8014c52:	4606      	mov	r6, r0
 8014c54:	460f      	mov	r7, r1
 8014c56:	d007      	beq.n	8014c68 <__pow5mult+0x20>
 8014c58:	4c25      	ldr	r4, [pc, #148]	; (8014cf0 <__pow5mult+0xa8>)
 8014c5a:	3a01      	subs	r2, #1
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c62:	f7ff fe9b 	bl	801499c <__multadd>
 8014c66:	4607      	mov	r7, r0
 8014c68:	10ad      	asrs	r5, r5, #2
 8014c6a:	d03d      	beq.n	8014ce8 <__pow5mult+0xa0>
 8014c6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014c6e:	b97c      	cbnz	r4, 8014c90 <__pow5mult+0x48>
 8014c70:	2010      	movs	r0, #16
 8014c72:	f7fe fa27 	bl	80130c4 <malloc>
 8014c76:	4602      	mov	r2, r0
 8014c78:	6270      	str	r0, [r6, #36]	; 0x24
 8014c7a:	b928      	cbnz	r0, 8014c88 <__pow5mult+0x40>
 8014c7c:	4b1d      	ldr	r3, [pc, #116]	; (8014cf4 <__pow5mult+0xac>)
 8014c7e:	481e      	ldr	r0, [pc, #120]	; (8014cf8 <__pow5mult+0xb0>)
 8014c80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014c84:	f000 f9c2 	bl	801500c <__assert_func>
 8014c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c8c:	6004      	str	r4, [r0, #0]
 8014c8e:	60c4      	str	r4, [r0, #12]
 8014c90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014c94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c98:	b94c      	cbnz	r4, 8014cae <__pow5mult+0x66>
 8014c9a:	f240 2171 	movw	r1, #625	; 0x271
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	f7ff ff12 	bl	8014ac8 <__i2b>
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	f8c8 0008 	str.w	r0, [r8, #8]
 8014caa:	4604      	mov	r4, r0
 8014cac:	6003      	str	r3, [r0, #0]
 8014cae:	f04f 0900 	mov.w	r9, #0
 8014cb2:	07eb      	lsls	r3, r5, #31
 8014cb4:	d50a      	bpl.n	8014ccc <__pow5mult+0x84>
 8014cb6:	4639      	mov	r1, r7
 8014cb8:	4622      	mov	r2, r4
 8014cba:	4630      	mov	r0, r6
 8014cbc:	f7ff ff1a 	bl	8014af4 <__multiply>
 8014cc0:	4639      	mov	r1, r7
 8014cc2:	4680      	mov	r8, r0
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	f7ff fe47 	bl	8014958 <_Bfree>
 8014cca:	4647      	mov	r7, r8
 8014ccc:	106d      	asrs	r5, r5, #1
 8014cce:	d00b      	beq.n	8014ce8 <__pow5mult+0xa0>
 8014cd0:	6820      	ldr	r0, [r4, #0]
 8014cd2:	b938      	cbnz	r0, 8014ce4 <__pow5mult+0x9c>
 8014cd4:	4622      	mov	r2, r4
 8014cd6:	4621      	mov	r1, r4
 8014cd8:	4630      	mov	r0, r6
 8014cda:	f7ff ff0b 	bl	8014af4 <__multiply>
 8014cde:	6020      	str	r0, [r4, #0]
 8014ce0:	f8c0 9000 	str.w	r9, [r0]
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	e7e4      	b.n	8014cb2 <__pow5mult+0x6a>
 8014ce8:	4638      	mov	r0, r7
 8014cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cee:	bf00      	nop
 8014cf0:	08015dc0 	.word	0x08015dc0
 8014cf4:	08015bed 	.word	0x08015bed
 8014cf8:	08015c70 	.word	0x08015c70

08014cfc <__lshift>:
 8014cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d00:	460c      	mov	r4, r1
 8014d02:	6849      	ldr	r1, [r1, #4]
 8014d04:	6923      	ldr	r3, [r4, #16]
 8014d06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d0a:	68a3      	ldr	r3, [r4, #8]
 8014d0c:	4607      	mov	r7, r0
 8014d0e:	4691      	mov	r9, r2
 8014d10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d14:	f108 0601 	add.w	r6, r8, #1
 8014d18:	42b3      	cmp	r3, r6
 8014d1a:	db0b      	blt.n	8014d34 <__lshift+0x38>
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	f7ff fddb 	bl	80148d8 <_Balloc>
 8014d22:	4605      	mov	r5, r0
 8014d24:	b948      	cbnz	r0, 8014d3a <__lshift+0x3e>
 8014d26:	4602      	mov	r2, r0
 8014d28:	4b2a      	ldr	r3, [pc, #168]	; (8014dd4 <__lshift+0xd8>)
 8014d2a:	482b      	ldr	r0, [pc, #172]	; (8014dd8 <__lshift+0xdc>)
 8014d2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014d30:	f000 f96c 	bl	801500c <__assert_func>
 8014d34:	3101      	adds	r1, #1
 8014d36:	005b      	lsls	r3, r3, #1
 8014d38:	e7ee      	b.n	8014d18 <__lshift+0x1c>
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	f100 0114 	add.w	r1, r0, #20
 8014d40:	f100 0210 	add.w	r2, r0, #16
 8014d44:	4618      	mov	r0, r3
 8014d46:	4553      	cmp	r3, sl
 8014d48:	db37      	blt.n	8014dba <__lshift+0xbe>
 8014d4a:	6920      	ldr	r0, [r4, #16]
 8014d4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d50:	f104 0314 	add.w	r3, r4, #20
 8014d54:	f019 091f 	ands.w	r9, r9, #31
 8014d58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014d60:	d02f      	beq.n	8014dc2 <__lshift+0xc6>
 8014d62:	f1c9 0e20 	rsb	lr, r9, #32
 8014d66:	468a      	mov	sl, r1
 8014d68:	f04f 0c00 	mov.w	ip, #0
 8014d6c:	681a      	ldr	r2, [r3, #0]
 8014d6e:	fa02 f209 	lsl.w	r2, r2, r9
 8014d72:	ea42 020c 	orr.w	r2, r2, ip
 8014d76:	f84a 2b04 	str.w	r2, [sl], #4
 8014d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d7e:	4298      	cmp	r0, r3
 8014d80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014d84:	d8f2      	bhi.n	8014d6c <__lshift+0x70>
 8014d86:	1b03      	subs	r3, r0, r4
 8014d88:	3b15      	subs	r3, #21
 8014d8a:	f023 0303 	bic.w	r3, r3, #3
 8014d8e:	3304      	adds	r3, #4
 8014d90:	f104 0215 	add.w	r2, r4, #21
 8014d94:	4290      	cmp	r0, r2
 8014d96:	bf38      	it	cc
 8014d98:	2304      	movcc	r3, #4
 8014d9a:	f841 c003 	str.w	ip, [r1, r3]
 8014d9e:	f1bc 0f00 	cmp.w	ip, #0
 8014da2:	d001      	beq.n	8014da8 <__lshift+0xac>
 8014da4:	f108 0602 	add.w	r6, r8, #2
 8014da8:	3e01      	subs	r6, #1
 8014daa:	4638      	mov	r0, r7
 8014dac:	612e      	str	r6, [r5, #16]
 8014dae:	4621      	mov	r1, r4
 8014db0:	f7ff fdd2 	bl	8014958 <_Bfree>
 8014db4:	4628      	mov	r0, r5
 8014db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dba:	f842 0f04 	str.w	r0, [r2, #4]!
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	e7c1      	b.n	8014d46 <__lshift+0x4a>
 8014dc2:	3904      	subs	r1, #4
 8014dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8014dcc:	4298      	cmp	r0, r3
 8014dce:	d8f9      	bhi.n	8014dc4 <__lshift+0xc8>
 8014dd0:	e7ea      	b.n	8014da8 <__lshift+0xac>
 8014dd2:	bf00      	nop
 8014dd4:	08015c5f 	.word	0x08015c5f
 8014dd8:	08015c70 	.word	0x08015c70

08014ddc <__mcmp>:
 8014ddc:	b530      	push	{r4, r5, lr}
 8014dde:	6902      	ldr	r2, [r0, #16]
 8014de0:	690c      	ldr	r4, [r1, #16]
 8014de2:	1b12      	subs	r2, r2, r4
 8014de4:	d10e      	bne.n	8014e04 <__mcmp+0x28>
 8014de6:	f100 0314 	add.w	r3, r0, #20
 8014dea:	3114      	adds	r1, #20
 8014dec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014df0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014df4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014df8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014dfc:	42a5      	cmp	r5, r4
 8014dfe:	d003      	beq.n	8014e08 <__mcmp+0x2c>
 8014e00:	d305      	bcc.n	8014e0e <__mcmp+0x32>
 8014e02:	2201      	movs	r2, #1
 8014e04:	4610      	mov	r0, r2
 8014e06:	bd30      	pop	{r4, r5, pc}
 8014e08:	4283      	cmp	r3, r0
 8014e0a:	d3f3      	bcc.n	8014df4 <__mcmp+0x18>
 8014e0c:	e7fa      	b.n	8014e04 <__mcmp+0x28>
 8014e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e12:	e7f7      	b.n	8014e04 <__mcmp+0x28>

08014e14 <__mdiff>:
 8014e14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e18:	460c      	mov	r4, r1
 8014e1a:	4606      	mov	r6, r0
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	4620      	mov	r0, r4
 8014e20:	4690      	mov	r8, r2
 8014e22:	f7ff ffdb 	bl	8014ddc <__mcmp>
 8014e26:	1e05      	subs	r5, r0, #0
 8014e28:	d110      	bne.n	8014e4c <__mdiff+0x38>
 8014e2a:	4629      	mov	r1, r5
 8014e2c:	4630      	mov	r0, r6
 8014e2e:	f7ff fd53 	bl	80148d8 <_Balloc>
 8014e32:	b930      	cbnz	r0, 8014e42 <__mdiff+0x2e>
 8014e34:	4b3a      	ldr	r3, [pc, #232]	; (8014f20 <__mdiff+0x10c>)
 8014e36:	4602      	mov	r2, r0
 8014e38:	f240 2132 	movw	r1, #562	; 0x232
 8014e3c:	4839      	ldr	r0, [pc, #228]	; (8014f24 <__mdiff+0x110>)
 8014e3e:	f000 f8e5 	bl	801500c <__assert_func>
 8014e42:	2301      	movs	r3, #1
 8014e44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e4c:	bfa4      	itt	ge
 8014e4e:	4643      	movge	r3, r8
 8014e50:	46a0      	movge	r8, r4
 8014e52:	4630      	mov	r0, r6
 8014e54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014e58:	bfa6      	itte	ge
 8014e5a:	461c      	movge	r4, r3
 8014e5c:	2500      	movge	r5, #0
 8014e5e:	2501      	movlt	r5, #1
 8014e60:	f7ff fd3a 	bl	80148d8 <_Balloc>
 8014e64:	b920      	cbnz	r0, 8014e70 <__mdiff+0x5c>
 8014e66:	4b2e      	ldr	r3, [pc, #184]	; (8014f20 <__mdiff+0x10c>)
 8014e68:	4602      	mov	r2, r0
 8014e6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014e6e:	e7e5      	b.n	8014e3c <__mdiff+0x28>
 8014e70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014e74:	6926      	ldr	r6, [r4, #16]
 8014e76:	60c5      	str	r5, [r0, #12]
 8014e78:	f104 0914 	add.w	r9, r4, #20
 8014e7c:	f108 0514 	add.w	r5, r8, #20
 8014e80:	f100 0e14 	add.w	lr, r0, #20
 8014e84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014e88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014e8c:	f108 0210 	add.w	r2, r8, #16
 8014e90:	46f2      	mov	sl, lr
 8014e92:	2100      	movs	r1, #0
 8014e94:	f859 3b04 	ldr.w	r3, [r9], #4
 8014e98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014e9c:	fa1f f883 	uxth.w	r8, r3
 8014ea0:	fa11 f18b 	uxtah	r1, r1, fp
 8014ea4:	0c1b      	lsrs	r3, r3, #16
 8014ea6:	eba1 0808 	sub.w	r8, r1, r8
 8014eaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014eae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014eb2:	fa1f f888 	uxth.w	r8, r8
 8014eb6:	1419      	asrs	r1, r3, #16
 8014eb8:	454e      	cmp	r6, r9
 8014eba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014ebe:	f84a 3b04 	str.w	r3, [sl], #4
 8014ec2:	d8e7      	bhi.n	8014e94 <__mdiff+0x80>
 8014ec4:	1b33      	subs	r3, r6, r4
 8014ec6:	3b15      	subs	r3, #21
 8014ec8:	f023 0303 	bic.w	r3, r3, #3
 8014ecc:	3304      	adds	r3, #4
 8014ece:	3415      	adds	r4, #21
 8014ed0:	42a6      	cmp	r6, r4
 8014ed2:	bf38      	it	cc
 8014ed4:	2304      	movcc	r3, #4
 8014ed6:	441d      	add	r5, r3
 8014ed8:	4473      	add	r3, lr
 8014eda:	469e      	mov	lr, r3
 8014edc:	462e      	mov	r6, r5
 8014ede:	4566      	cmp	r6, ip
 8014ee0:	d30e      	bcc.n	8014f00 <__mdiff+0xec>
 8014ee2:	f10c 0203 	add.w	r2, ip, #3
 8014ee6:	1b52      	subs	r2, r2, r5
 8014ee8:	f022 0203 	bic.w	r2, r2, #3
 8014eec:	3d03      	subs	r5, #3
 8014eee:	45ac      	cmp	ip, r5
 8014ef0:	bf38      	it	cc
 8014ef2:	2200      	movcc	r2, #0
 8014ef4:	441a      	add	r2, r3
 8014ef6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014efa:	b17b      	cbz	r3, 8014f1c <__mdiff+0x108>
 8014efc:	6107      	str	r7, [r0, #16]
 8014efe:	e7a3      	b.n	8014e48 <__mdiff+0x34>
 8014f00:	f856 8b04 	ldr.w	r8, [r6], #4
 8014f04:	fa11 f288 	uxtah	r2, r1, r8
 8014f08:	1414      	asrs	r4, r2, #16
 8014f0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014f0e:	b292      	uxth	r2, r2
 8014f10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014f14:	f84e 2b04 	str.w	r2, [lr], #4
 8014f18:	1421      	asrs	r1, r4, #16
 8014f1a:	e7e0      	b.n	8014ede <__mdiff+0xca>
 8014f1c:	3f01      	subs	r7, #1
 8014f1e:	e7ea      	b.n	8014ef6 <__mdiff+0xe2>
 8014f20:	08015c5f 	.word	0x08015c5f
 8014f24:	08015c70 	.word	0x08015c70

08014f28 <__d2b>:
 8014f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f2c:	4689      	mov	r9, r1
 8014f2e:	2101      	movs	r1, #1
 8014f30:	ec57 6b10 	vmov	r6, r7, d0
 8014f34:	4690      	mov	r8, r2
 8014f36:	f7ff fccf 	bl	80148d8 <_Balloc>
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	b930      	cbnz	r0, 8014f4c <__d2b+0x24>
 8014f3e:	4602      	mov	r2, r0
 8014f40:	4b25      	ldr	r3, [pc, #148]	; (8014fd8 <__d2b+0xb0>)
 8014f42:	4826      	ldr	r0, [pc, #152]	; (8014fdc <__d2b+0xb4>)
 8014f44:	f240 310a 	movw	r1, #778	; 0x30a
 8014f48:	f000 f860 	bl	801500c <__assert_func>
 8014f4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014f54:	bb35      	cbnz	r5, 8014fa4 <__d2b+0x7c>
 8014f56:	2e00      	cmp	r6, #0
 8014f58:	9301      	str	r3, [sp, #4]
 8014f5a:	d028      	beq.n	8014fae <__d2b+0x86>
 8014f5c:	4668      	mov	r0, sp
 8014f5e:	9600      	str	r6, [sp, #0]
 8014f60:	f7ff fd82 	bl	8014a68 <__lo0bits>
 8014f64:	9900      	ldr	r1, [sp, #0]
 8014f66:	b300      	cbz	r0, 8014faa <__d2b+0x82>
 8014f68:	9a01      	ldr	r2, [sp, #4]
 8014f6a:	f1c0 0320 	rsb	r3, r0, #32
 8014f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f72:	430b      	orrs	r3, r1
 8014f74:	40c2      	lsrs	r2, r0
 8014f76:	6163      	str	r3, [r4, #20]
 8014f78:	9201      	str	r2, [sp, #4]
 8014f7a:	9b01      	ldr	r3, [sp, #4]
 8014f7c:	61a3      	str	r3, [r4, #24]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	bf14      	ite	ne
 8014f82:	2202      	movne	r2, #2
 8014f84:	2201      	moveq	r2, #1
 8014f86:	6122      	str	r2, [r4, #16]
 8014f88:	b1d5      	cbz	r5, 8014fc0 <__d2b+0x98>
 8014f8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014f8e:	4405      	add	r5, r0
 8014f90:	f8c9 5000 	str.w	r5, [r9]
 8014f94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014f98:	f8c8 0000 	str.w	r0, [r8]
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	b003      	add	sp, #12
 8014fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014fa8:	e7d5      	b.n	8014f56 <__d2b+0x2e>
 8014faa:	6161      	str	r1, [r4, #20]
 8014fac:	e7e5      	b.n	8014f7a <__d2b+0x52>
 8014fae:	a801      	add	r0, sp, #4
 8014fb0:	f7ff fd5a 	bl	8014a68 <__lo0bits>
 8014fb4:	9b01      	ldr	r3, [sp, #4]
 8014fb6:	6163      	str	r3, [r4, #20]
 8014fb8:	2201      	movs	r2, #1
 8014fba:	6122      	str	r2, [r4, #16]
 8014fbc:	3020      	adds	r0, #32
 8014fbe:	e7e3      	b.n	8014f88 <__d2b+0x60>
 8014fc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014fc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014fc8:	f8c9 0000 	str.w	r0, [r9]
 8014fcc:	6918      	ldr	r0, [r3, #16]
 8014fce:	f7ff fd2b 	bl	8014a28 <__hi0bits>
 8014fd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014fd6:	e7df      	b.n	8014f98 <__d2b+0x70>
 8014fd8:	08015c5f 	.word	0x08015c5f
 8014fdc:	08015c70 	.word	0x08015c70

08014fe0 <_calloc_r>:
 8014fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014fe2:	fba1 2402 	umull	r2, r4, r1, r2
 8014fe6:	b94c      	cbnz	r4, 8014ffc <_calloc_r+0x1c>
 8014fe8:	4611      	mov	r1, r2
 8014fea:	9201      	str	r2, [sp, #4]
 8014fec:	f7fe f8ee 	bl	80131cc <_malloc_r>
 8014ff0:	9a01      	ldr	r2, [sp, #4]
 8014ff2:	4605      	mov	r5, r0
 8014ff4:	b930      	cbnz	r0, 8015004 <_calloc_r+0x24>
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	b003      	add	sp, #12
 8014ffa:	bd30      	pop	{r4, r5, pc}
 8014ffc:	220c      	movs	r2, #12
 8014ffe:	6002      	str	r2, [r0, #0]
 8015000:	2500      	movs	r5, #0
 8015002:	e7f8      	b.n	8014ff6 <_calloc_r+0x16>
 8015004:	4621      	mov	r1, r4
 8015006:	f7fe f86d 	bl	80130e4 <memset>
 801500a:	e7f4      	b.n	8014ff6 <_calloc_r+0x16>

0801500c <__assert_func>:
 801500c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801500e:	4614      	mov	r4, r2
 8015010:	461a      	mov	r2, r3
 8015012:	4b09      	ldr	r3, [pc, #36]	; (8015038 <__assert_func+0x2c>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	4605      	mov	r5, r0
 8015018:	68d8      	ldr	r0, [r3, #12]
 801501a:	b14c      	cbz	r4, 8015030 <__assert_func+0x24>
 801501c:	4b07      	ldr	r3, [pc, #28]	; (801503c <__assert_func+0x30>)
 801501e:	9100      	str	r1, [sp, #0]
 8015020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015024:	4906      	ldr	r1, [pc, #24]	; (8015040 <__assert_func+0x34>)
 8015026:	462b      	mov	r3, r5
 8015028:	f000 f80e 	bl	8015048 <fiprintf>
 801502c:	f000 fa5a 	bl	80154e4 <abort>
 8015030:	4b04      	ldr	r3, [pc, #16]	; (8015044 <__assert_func+0x38>)
 8015032:	461c      	mov	r4, r3
 8015034:	e7f3      	b.n	801501e <__assert_func+0x12>
 8015036:	bf00      	nop
 8015038:	2000012c 	.word	0x2000012c
 801503c:	08015dcc 	.word	0x08015dcc
 8015040:	08015dd9 	.word	0x08015dd9
 8015044:	08015e07 	.word	0x08015e07

08015048 <fiprintf>:
 8015048:	b40e      	push	{r1, r2, r3}
 801504a:	b503      	push	{r0, r1, lr}
 801504c:	4601      	mov	r1, r0
 801504e:	ab03      	add	r3, sp, #12
 8015050:	4805      	ldr	r0, [pc, #20]	; (8015068 <fiprintf+0x20>)
 8015052:	f853 2b04 	ldr.w	r2, [r3], #4
 8015056:	6800      	ldr	r0, [r0, #0]
 8015058:	9301      	str	r3, [sp, #4]
 801505a:	f000 f845 	bl	80150e8 <_vfiprintf_r>
 801505e:	b002      	add	sp, #8
 8015060:	f85d eb04 	ldr.w	lr, [sp], #4
 8015064:	b003      	add	sp, #12
 8015066:	4770      	bx	lr
 8015068:	2000012c 	.word	0x2000012c

0801506c <__retarget_lock_init_recursive>:
 801506c:	4770      	bx	lr

0801506e <__retarget_lock_acquire_recursive>:
 801506e:	4770      	bx	lr

08015070 <__retarget_lock_release_recursive>:
 8015070:	4770      	bx	lr

08015072 <__ascii_mbtowc>:
 8015072:	b082      	sub	sp, #8
 8015074:	b901      	cbnz	r1, 8015078 <__ascii_mbtowc+0x6>
 8015076:	a901      	add	r1, sp, #4
 8015078:	b142      	cbz	r2, 801508c <__ascii_mbtowc+0x1a>
 801507a:	b14b      	cbz	r3, 8015090 <__ascii_mbtowc+0x1e>
 801507c:	7813      	ldrb	r3, [r2, #0]
 801507e:	600b      	str	r3, [r1, #0]
 8015080:	7812      	ldrb	r2, [r2, #0]
 8015082:	1e10      	subs	r0, r2, #0
 8015084:	bf18      	it	ne
 8015086:	2001      	movne	r0, #1
 8015088:	b002      	add	sp, #8
 801508a:	4770      	bx	lr
 801508c:	4610      	mov	r0, r2
 801508e:	e7fb      	b.n	8015088 <__ascii_mbtowc+0x16>
 8015090:	f06f 0001 	mvn.w	r0, #1
 8015094:	e7f8      	b.n	8015088 <__ascii_mbtowc+0x16>

08015096 <__sfputc_r>:
 8015096:	6893      	ldr	r3, [r2, #8]
 8015098:	3b01      	subs	r3, #1
 801509a:	2b00      	cmp	r3, #0
 801509c:	b410      	push	{r4}
 801509e:	6093      	str	r3, [r2, #8]
 80150a0:	da08      	bge.n	80150b4 <__sfputc_r+0x1e>
 80150a2:	6994      	ldr	r4, [r2, #24]
 80150a4:	42a3      	cmp	r3, r4
 80150a6:	db01      	blt.n	80150ac <__sfputc_r+0x16>
 80150a8:	290a      	cmp	r1, #10
 80150aa:	d103      	bne.n	80150b4 <__sfputc_r+0x1e>
 80150ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150b0:	f000 b94a 	b.w	8015348 <__swbuf_r>
 80150b4:	6813      	ldr	r3, [r2, #0]
 80150b6:	1c58      	adds	r0, r3, #1
 80150b8:	6010      	str	r0, [r2, #0]
 80150ba:	7019      	strb	r1, [r3, #0]
 80150bc:	4608      	mov	r0, r1
 80150be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <__sfputs_r>:
 80150c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c6:	4606      	mov	r6, r0
 80150c8:	460f      	mov	r7, r1
 80150ca:	4614      	mov	r4, r2
 80150cc:	18d5      	adds	r5, r2, r3
 80150ce:	42ac      	cmp	r4, r5
 80150d0:	d101      	bne.n	80150d6 <__sfputs_r+0x12>
 80150d2:	2000      	movs	r0, #0
 80150d4:	e007      	b.n	80150e6 <__sfputs_r+0x22>
 80150d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150da:	463a      	mov	r2, r7
 80150dc:	4630      	mov	r0, r6
 80150de:	f7ff ffda 	bl	8015096 <__sfputc_r>
 80150e2:	1c43      	adds	r3, r0, #1
 80150e4:	d1f3      	bne.n	80150ce <__sfputs_r+0xa>
 80150e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080150e8 <_vfiprintf_r>:
 80150e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ec:	460d      	mov	r5, r1
 80150ee:	b09d      	sub	sp, #116	; 0x74
 80150f0:	4614      	mov	r4, r2
 80150f2:	4698      	mov	r8, r3
 80150f4:	4606      	mov	r6, r0
 80150f6:	b118      	cbz	r0, 8015100 <_vfiprintf_r+0x18>
 80150f8:	6983      	ldr	r3, [r0, #24]
 80150fa:	b90b      	cbnz	r3, 8015100 <_vfiprintf_r+0x18>
 80150fc:	f000 fb14 	bl	8015728 <__sinit>
 8015100:	4b89      	ldr	r3, [pc, #548]	; (8015328 <_vfiprintf_r+0x240>)
 8015102:	429d      	cmp	r5, r3
 8015104:	d11b      	bne.n	801513e <_vfiprintf_r+0x56>
 8015106:	6875      	ldr	r5, [r6, #4]
 8015108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801510a:	07d9      	lsls	r1, r3, #31
 801510c:	d405      	bmi.n	801511a <_vfiprintf_r+0x32>
 801510e:	89ab      	ldrh	r3, [r5, #12]
 8015110:	059a      	lsls	r2, r3, #22
 8015112:	d402      	bmi.n	801511a <_vfiprintf_r+0x32>
 8015114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015116:	f7ff ffaa 	bl	801506e <__retarget_lock_acquire_recursive>
 801511a:	89ab      	ldrh	r3, [r5, #12]
 801511c:	071b      	lsls	r3, r3, #28
 801511e:	d501      	bpl.n	8015124 <_vfiprintf_r+0x3c>
 8015120:	692b      	ldr	r3, [r5, #16]
 8015122:	b9eb      	cbnz	r3, 8015160 <_vfiprintf_r+0x78>
 8015124:	4629      	mov	r1, r5
 8015126:	4630      	mov	r0, r6
 8015128:	f000 f96e 	bl	8015408 <__swsetup_r>
 801512c:	b1c0      	cbz	r0, 8015160 <_vfiprintf_r+0x78>
 801512e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015130:	07dc      	lsls	r4, r3, #31
 8015132:	d50e      	bpl.n	8015152 <_vfiprintf_r+0x6a>
 8015134:	f04f 30ff 	mov.w	r0, #4294967295
 8015138:	b01d      	add	sp, #116	; 0x74
 801513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801513e:	4b7b      	ldr	r3, [pc, #492]	; (801532c <_vfiprintf_r+0x244>)
 8015140:	429d      	cmp	r5, r3
 8015142:	d101      	bne.n	8015148 <_vfiprintf_r+0x60>
 8015144:	68b5      	ldr	r5, [r6, #8]
 8015146:	e7df      	b.n	8015108 <_vfiprintf_r+0x20>
 8015148:	4b79      	ldr	r3, [pc, #484]	; (8015330 <_vfiprintf_r+0x248>)
 801514a:	429d      	cmp	r5, r3
 801514c:	bf08      	it	eq
 801514e:	68f5      	ldreq	r5, [r6, #12]
 8015150:	e7da      	b.n	8015108 <_vfiprintf_r+0x20>
 8015152:	89ab      	ldrh	r3, [r5, #12]
 8015154:	0598      	lsls	r0, r3, #22
 8015156:	d4ed      	bmi.n	8015134 <_vfiprintf_r+0x4c>
 8015158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801515a:	f7ff ff89 	bl	8015070 <__retarget_lock_release_recursive>
 801515e:	e7e9      	b.n	8015134 <_vfiprintf_r+0x4c>
 8015160:	2300      	movs	r3, #0
 8015162:	9309      	str	r3, [sp, #36]	; 0x24
 8015164:	2320      	movs	r3, #32
 8015166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801516a:	f8cd 800c 	str.w	r8, [sp, #12]
 801516e:	2330      	movs	r3, #48	; 0x30
 8015170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015334 <_vfiprintf_r+0x24c>
 8015174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015178:	f04f 0901 	mov.w	r9, #1
 801517c:	4623      	mov	r3, r4
 801517e:	469a      	mov	sl, r3
 8015180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015184:	b10a      	cbz	r2, 801518a <_vfiprintf_r+0xa2>
 8015186:	2a25      	cmp	r2, #37	; 0x25
 8015188:	d1f9      	bne.n	801517e <_vfiprintf_r+0x96>
 801518a:	ebba 0b04 	subs.w	fp, sl, r4
 801518e:	d00b      	beq.n	80151a8 <_vfiprintf_r+0xc0>
 8015190:	465b      	mov	r3, fp
 8015192:	4622      	mov	r2, r4
 8015194:	4629      	mov	r1, r5
 8015196:	4630      	mov	r0, r6
 8015198:	f7ff ff94 	bl	80150c4 <__sfputs_r>
 801519c:	3001      	adds	r0, #1
 801519e:	f000 80aa 	beq.w	80152f6 <_vfiprintf_r+0x20e>
 80151a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151a4:	445a      	add	r2, fp
 80151a6:	9209      	str	r2, [sp, #36]	; 0x24
 80151a8:	f89a 3000 	ldrb.w	r3, [sl]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	f000 80a2 	beq.w	80152f6 <_vfiprintf_r+0x20e>
 80151b2:	2300      	movs	r3, #0
 80151b4:	f04f 32ff 	mov.w	r2, #4294967295
 80151b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151bc:	f10a 0a01 	add.w	sl, sl, #1
 80151c0:	9304      	str	r3, [sp, #16]
 80151c2:	9307      	str	r3, [sp, #28]
 80151c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151c8:	931a      	str	r3, [sp, #104]	; 0x68
 80151ca:	4654      	mov	r4, sl
 80151cc:	2205      	movs	r2, #5
 80151ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151d2:	4858      	ldr	r0, [pc, #352]	; (8015334 <_vfiprintf_r+0x24c>)
 80151d4:	f7eb f824 	bl	8000220 <memchr>
 80151d8:	9a04      	ldr	r2, [sp, #16]
 80151da:	b9d8      	cbnz	r0, 8015214 <_vfiprintf_r+0x12c>
 80151dc:	06d1      	lsls	r1, r2, #27
 80151de:	bf44      	itt	mi
 80151e0:	2320      	movmi	r3, #32
 80151e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151e6:	0713      	lsls	r3, r2, #28
 80151e8:	bf44      	itt	mi
 80151ea:	232b      	movmi	r3, #43	; 0x2b
 80151ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151f0:	f89a 3000 	ldrb.w	r3, [sl]
 80151f4:	2b2a      	cmp	r3, #42	; 0x2a
 80151f6:	d015      	beq.n	8015224 <_vfiprintf_r+0x13c>
 80151f8:	9a07      	ldr	r2, [sp, #28]
 80151fa:	4654      	mov	r4, sl
 80151fc:	2000      	movs	r0, #0
 80151fe:	f04f 0c0a 	mov.w	ip, #10
 8015202:	4621      	mov	r1, r4
 8015204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015208:	3b30      	subs	r3, #48	; 0x30
 801520a:	2b09      	cmp	r3, #9
 801520c:	d94e      	bls.n	80152ac <_vfiprintf_r+0x1c4>
 801520e:	b1b0      	cbz	r0, 801523e <_vfiprintf_r+0x156>
 8015210:	9207      	str	r2, [sp, #28]
 8015212:	e014      	b.n	801523e <_vfiprintf_r+0x156>
 8015214:	eba0 0308 	sub.w	r3, r0, r8
 8015218:	fa09 f303 	lsl.w	r3, r9, r3
 801521c:	4313      	orrs	r3, r2
 801521e:	9304      	str	r3, [sp, #16]
 8015220:	46a2      	mov	sl, r4
 8015222:	e7d2      	b.n	80151ca <_vfiprintf_r+0xe2>
 8015224:	9b03      	ldr	r3, [sp, #12]
 8015226:	1d19      	adds	r1, r3, #4
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	9103      	str	r1, [sp, #12]
 801522c:	2b00      	cmp	r3, #0
 801522e:	bfbb      	ittet	lt
 8015230:	425b      	neglt	r3, r3
 8015232:	f042 0202 	orrlt.w	r2, r2, #2
 8015236:	9307      	strge	r3, [sp, #28]
 8015238:	9307      	strlt	r3, [sp, #28]
 801523a:	bfb8      	it	lt
 801523c:	9204      	strlt	r2, [sp, #16]
 801523e:	7823      	ldrb	r3, [r4, #0]
 8015240:	2b2e      	cmp	r3, #46	; 0x2e
 8015242:	d10c      	bne.n	801525e <_vfiprintf_r+0x176>
 8015244:	7863      	ldrb	r3, [r4, #1]
 8015246:	2b2a      	cmp	r3, #42	; 0x2a
 8015248:	d135      	bne.n	80152b6 <_vfiprintf_r+0x1ce>
 801524a:	9b03      	ldr	r3, [sp, #12]
 801524c:	1d1a      	adds	r2, r3, #4
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	9203      	str	r2, [sp, #12]
 8015252:	2b00      	cmp	r3, #0
 8015254:	bfb8      	it	lt
 8015256:	f04f 33ff 	movlt.w	r3, #4294967295
 801525a:	3402      	adds	r4, #2
 801525c:	9305      	str	r3, [sp, #20]
 801525e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015344 <_vfiprintf_r+0x25c>
 8015262:	7821      	ldrb	r1, [r4, #0]
 8015264:	2203      	movs	r2, #3
 8015266:	4650      	mov	r0, sl
 8015268:	f7ea ffda 	bl	8000220 <memchr>
 801526c:	b140      	cbz	r0, 8015280 <_vfiprintf_r+0x198>
 801526e:	2340      	movs	r3, #64	; 0x40
 8015270:	eba0 000a 	sub.w	r0, r0, sl
 8015274:	fa03 f000 	lsl.w	r0, r3, r0
 8015278:	9b04      	ldr	r3, [sp, #16]
 801527a:	4303      	orrs	r3, r0
 801527c:	3401      	adds	r4, #1
 801527e:	9304      	str	r3, [sp, #16]
 8015280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015284:	482c      	ldr	r0, [pc, #176]	; (8015338 <_vfiprintf_r+0x250>)
 8015286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801528a:	2206      	movs	r2, #6
 801528c:	f7ea ffc8 	bl	8000220 <memchr>
 8015290:	2800      	cmp	r0, #0
 8015292:	d03f      	beq.n	8015314 <_vfiprintf_r+0x22c>
 8015294:	4b29      	ldr	r3, [pc, #164]	; (801533c <_vfiprintf_r+0x254>)
 8015296:	bb1b      	cbnz	r3, 80152e0 <_vfiprintf_r+0x1f8>
 8015298:	9b03      	ldr	r3, [sp, #12]
 801529a:	3307      	adds	r3, #7
 801529c:	f023 0307 	bic.w	r3, r3, #7
 80152a0:	3308      	adds	r3, #8
 80152a2:	9303      	str	r3, [sp, #12]
 80152a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a6:	443b      	add	r3, r7
 80152a8:	9309      	str	r3, [sp, #36]	; 0x24
 80152aa:	e767      	b.n	801517c <_vfiprintf_r+0x94>
 80152ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80152b0:	460c      	mov	r4, r1
 80152b2:	2001      	movs	r0, #1
 80152b4:	e7a5      	b.n	8015202 <_vfiprintf_r+0x11a>
 80152b6:	2300      	movs	r3, #0
 80152b8:	3401      	adds	r4, #1
 80152ba:	9305      	str	r3, [sp, #20]
 80152bc:	4619      	mov	r1, r3
 80152be:	f04f 0c0a 	mov.w	ip, #10
 80152c2:	4620      	mov	r0, r4
 80152c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152c8:	3a30      	subs	r2, #48	; 0x30
 80152ca:	2a09      	cmp	r2, #9
 80152cc:	d903      	bls.n	80152d6 <_vfiprintf_r+0x1ee>
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d0c5      	beq.n	801525e <_vfiprintf_r+0x176>
 80152d2:	9105      	str	r1, [sp, #20]
 80152d4:	e7c3      	b.n	801525e <_vfiprintf_r+0x176>
 80152d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80152da:	4604      	mov	r4, r0
 80152dc:	2301      	movs	r3, #1
 80152de:	e7f0      	b.n	80152c2 <_vfiprintf_r+0x1da>
 80152e0:	ab03      	add	r3, sp, #12
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	462a      	mov	r2, r5
 80152e6:	4b16      	ldr	r3, [pc, #88]	; (8015340 <_vfiprintf_r+0x258>)
 80152e8:	a904      	add	r1, sp, #16
 80152ea:	4630      	mov	r0, r6
 80152ec:	f7fe f882 	bl	80133f4 <_printf_float>
 80152f0:	4607      	mov	r7, r0
 80152f2:	1c78      	adds	r0, r7, #1
 80152f4:	d1d6      	bne.n	80152a4 <_vfiprintf_r+0x1bc>
 80152f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152f8:	07d9      	lsls	r1, r3, #31
 80152fa:	d405      	bmi.n	8015308 <_vfiprintf_r+0x220>
 80152fc:	89ab      	ldrh	r3, [r5, #12]
 80152fe:	059a      	lsls	r2, r3, #22
 8015300:	d402      	bmi.n	8015308 <_vfiprintf_r+0x220>
 8015302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015304:	f7ff feb4 	bl	8015070 <__retarget_lock_release_recursive>
 8015308:	89ab      	ldrh	r3, [r5, #12]
 801530a:	065b      	lsls	r3, r3, #25
 801530c:	f53f af12 	bmi.w	8015134 <_vfiprintf_r+0x4c>
 8015310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015312:	e711      	b.n	8015138 <_vfiprintf_r+0x50>
 8015314:	ab03      	add	r3, sp, #12
 8015316:	9300      	str	r3, [sp, #0]
 8015318:	462a      	mov	r2, r5
 801531a:	4b09      	ldr	r3, [pc, #36]	; (8015340 <_vfiprintf_r+0x258>)
 801531c:	a904      	add	r1, sp, #16
 801531e:	4630      	mov	r0, r6
 8015320:	f7fe fb0c 	bl	801393c <_printf_i>
 8015324:	e7e4      	b.n	80152f0 <_vfiprintf_r+0x208>
 8015326:	bf00      	nop
 8015328:	08015f44 	.word	0x08015f44
 801532c:	08015f64 	.word	0x08015f64
 8015330:	08015f24 	.word	0x08015f24
 8015334:	08015e12 	.word	0x08015e12
 8015338:	08015e1c 	.word	0x08015e1c
 801533c:	080133f5 	.word	0x080133f5
 8015340:	080150c5 	.word	0x080150c5
 8015344:	08015e18 	.word	0x08015e18

08015348 <__swbuf_r>:
 8015348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801534a:	460e      	mov	r6, r1
 801534c:	4614      	mov	r4, r2
 801534e:	4605      	mov	r5, r0
 8015350:	b118      	cbz	r0, 801535a <__swbuf_r+0x12>
 8015352:	6983      	ldr	r3, [r0, #24]
 8015354:	b90b      	cbnz	r3, 801535a <__swbuf_r+0x12>
 8015356:	f000 f9e7 	bl	8015728 <__sinit>
 801535a:	4b21      	ldr	r3, [pc, #132]	; (80153e0 <__swbuf_r+0x98>)
 801535c:	429c      	cmp	r4, r3
 801535e:	d12b      	bne.n	80153b8 <__swbuf_r+0x70>
 8015360:	686c      	ldr	r4, [r5, #4]
 8015362:	69a3      	ldr	r3, [r4, #24]
 8015364:	60a3      	str	r3, [r4, #8]
 8015366:	89a3      	ldrh	r3, [r4, #12]
 8015368:	071a      	lsls	r2, r3, #28
 801536a:	d52f      	bpl.n	80153cc <__swbuf_r+0x84>
 801536c:	6923      	ldr	r3, [r4, #16]
 801536e:	b36b      	cbz	r3, 80153cc <__swbuf_r+0x84>
 8015370:	6923      	ldr	r3, [r4, #16]
 8015372:	6820      	ldr	r0, [r4, #0]
 8015374:	1ac0      	subs	r0, r0, r3
 8015376:	6963      	ldr	r3, [r4, #20]
 8015378:	b2f6      	uxtb	r6, r6
 801537a:	4283      	cmp	r3, r0
 801537c:	4637      	mov	r7, r6
 801537e:	dc04      	bgt.n	801538a <__swbuf_r+0x42>
 8015380:	4621      	mov	r1, r4
 8015382:	4628      	mov	r0, r5
 8015384:	f000 f93c 	bl	8015600 <_fflush_r>
 8015388:	bb30      	cbnz	r0, 80153d8 <__swbuf_r+0x90>
 801538a:	68a3      	ldr	r3, [r4, #8]
 801538c:	3b01      	subs	r3, #1
 801538e:	60a3      	str	r3, [r4, #8]
 8015390:	6823      	ldr	r3, [r4, #0]
 8015392:	1c5a      	adds	r2, r3, #1
 8015394:	6022      	str	r2, [r4, #0]
 8015396:	701e      	strb	r6, [r3, #0]
 8015398:	6963      	ldr	r3, [r4, #20]
 801539a:	3001      	adds	r0, #1
 801539c:	4283      	cmp	r3, r0
 801539e:	d004      	beq.n	80153aa <__swbuf_r+0x62>
 80153a0:	89a3      	ldrh	r3, [r4, #12]
 80153a2:	07db      	lsls	r3, r3, #31
 80153a4:	d506      	bpl.n	80153b4 <__swbuf_r+0x6c>
 80153a6:	2e0a      	cmp	r6, #10
 80153a8:	d104      	bne.n	80153b4 <__swbuf_r+0x6c>
 80153aa:	4621      	mov	r1, r4
 80153ac:	4628      	mov	r0, r5
 80153ae:	f000 f927 	bl	8015600 <_fflush_r>
 80153b2:	b988      	cbnz	r0, 80153d8 <__swbuf_r+0x90>
 80153b4:	4638      	mov	r0, r7
 80153b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153b8:	4b0a      	ldr	r3, [pc, #40]	; (80153e4 <__swbuf_r+0x9c>)
 80153ba:	429c      	cmp	r4, r3
 80153bc:	d101      	bne.n	80153c2 <__swbuf_r+0x7a>
 80153be:	68ac      	ldr	r4, [r5, #8]
 80153c0:	e7cf      	b.n	8015362 <__swbuf_r+0x1a>
 80153c2:	4b09      	ldr	r3, [pc, #36]	; (80153e8 <__swbuf_r+0xa0>)
 80153c4:	429c      	cmp	r4, r3
 80153c6:	bf08      	it	eq
 80153c8:	68ec      	ldreq	r4, [r5, #12]
 80153ca:	e7ca      	b.n	8015362 <__swbuf_r+0x1a>
 80153cc:	4621      	mov	r1, r4
 80153ce:	4628      	mov	r0, r5
 80153d0:	f000 f81a 	bl	8015408 <__swsetup_r>
 80153d4:	2800      	cmp	r0, #0
 80153d6:	d0cb      	beq.n	8015370 <__swbuf_r+0x28>
 80153d8:	f04f 37ff 	mov.w	r7, #4294967295
 80153dc:	e7ea      	b.n	80153b4 <__swbuf_r+0x6c>
 80153de:	bf00      	nop
 80153e0:	08015f44 	.word	0x08015f44
 80153e4:	08015f64 	.word	0x08015f64
 80153e8:	08015f24 	.word	0x08015f24

080153ec <__ascii_wctomb>:
 80153ec:	b149      	cbz	r1, 8015402 <__ascii_wctomb+0x16>
 80153ee:	2aff      	cmp	r2, #255	; 0xff
 80153f0:	bf85      	ittet	hi
 80153f2:	238a      	movhi	r3, #138	; 0x8a
 80153f4:	6003      	strhi	r3, [r0, #0]
 80153f6:	700a      	strbls	r2, [r1, #0]
 80153f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80153fc:	bf98      	it	ls
 80153fe:	2001      	movls	r0, #1
 8015400:	4770      	bx	lr
 8015402:	4608      	mov	r0, r1
 8015404:	4770      	bx	lr
	...

08015408 <__swsetup_r>:
 8015408:	4b32      	ldr	r3, [pc, #200]	; (80154d4 <__swsetup_r+0xcc>)
 801540a:	b570      	push	{r4, r5, r6, lr}
 801540c:	681d      	ldr	r5, [r3, #0]
 801540e:	4606      	mov	r6, r0
 8015410:	460c      	mov	r4, r1
 8015412:	b125      	cbz	r5, 801541e <__swsetup_r+0x16>
 8015414:	69ab      	ldr	r3, [r5, #24]
 8015416:	b913      	cbnz	r3, 801541e <__swsetup_r+0x16>
 8015418:	4628      	mov	r0, r5
 801541a:	f000 f985 	bl	8015728 <__sinit>
 801541e:	4b2e      	ldr	r3, [pc, #184]	; (80154d8 <__swsetup_r+0xd0>)
 8015420:	429c      	cmp	r4, r3
 8015422:	d10f      	bne.n	8015444 <__swsetup_r+0x3c>
 8015424:	686c      	ldr	r4, [r5, #4]
 8015426:	89a3      	ldrh	r3, [r4, #12]
 8015428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801542c:	0719      	lsls	r1, r3, #28
 801542e:	d42c      	bmi.n	801548a <__swsetup_r+0x82>
 8015430:	06dd      	lsls	r5, r3, #27
 8015432:	d411      	bmi.n	8015458 <__swsetup_r+0x50>
 8015434:	2309      	movs	r3, #9
 8015436:	6033      	str	r3, [r6, #0]
 8015438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801543c:	81a3      	strh	r3, [r4, #12]
 801543e:	f04f 30ff 	mov.w	r0, #4294967295
 8015442:	e03e      	b.n	80154c2 <__swsetup_r+0xba>
 8015444:	4b25      	ldr	r3, [pc, #148]	; (80154dc <__swsetup_r+0xd4>)
 8015446:	429c      	cmp	r4, r3
 8015448:	d101      	bne.n	801544e <__swsetup_r+0x46>
 801544a:	68ac      	ldr	r4, [r5, #8]
 801544c:	e7eb      	b.n	8015426 <__swsetup_r+0x1e>
 801544e:	4b24      	ldr	r3, [pc, #144]	; (80154e0 <__swsetup_r+0xd8>)
 8015450:	429c      	cmp	r4, r3
 8015452:	bf08      	it	eq
 8015454:	68ec      	ldreq	r4, [r5, #12]
 8015456:	e7e6      	b.n	8015426 <__swsetup_r+0x1e>
 8015458:	0758      	lsls	r0, r3, #29
 801545a:	d512      	bpl.n	8015482 <__swsetup_r+0x7a>
 801545c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801545e:	b141      	cbz	r1, 8015472 <__swsetup_r+0x6a>
 8015460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015464:	4299      	cmp	r1, r3
 8015466:	d002      	beq.n	801546e <__swsetup_r+0x66>
 8015468:	4630      	mov	r0, r6
 801546a:	f7fd fe43 	bl	80130f4 <_free_r>
 801546e:	2300      	movs	r3, #0
 8015470:	6363      	str	r3, [r4, #52]	; 0x34
 8015472:	89a3      	ldrh	r3, [r4, #12]
 8015474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015478:	81a3      	strh	r3, [r4, #12]
 801547a:	2300      	movs	r3, #0
 801547c:	6063      	str	r3, [r4, #4]
 801547e:	6923      	ldr	r3, [r4, #16]
 8015480:	6023      	str	r3, [r4, #0]
 8015482:	89a3      	ldrh	r3, [r4, #12]
 8015484:	f043 0308 	orr.w	r3, r3, #8
 8015488:	81a3      	strh	r3, [r4, #12]
 801548a:	6923      	ldr	r3, [r4, #16]
 801548c:	b94b      	cbnz	r3, 80154a2 <__swsetup_r+0x9a>
 801548e:	89a3      	ldrh	r3, [r4, #12]
 8015490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015498:	d003      	beq.n	80154a2 <__swsetup_r+0x9a>
 801549a:	4621      	mov	r1, r4
 801549c:	4630      	mov	r0, r6
 801549e:	f000 fa05 	bl	80158ac <__smakebuf_r>
 80154a2:	89a0      	ldrh	r0, [r4, #12]
 80154a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80154a8:	f010 0301 	ands.w	r3, r0, #1
 80154ac:	d00a      	beq.n	80154c4 <__swsetup_r+0xbc>
 80154ae:	2300      	movs	r3, #0
 80154b0:	60a3      	str	r3, [r4, #8]
 80154b2:	6963      	ldr	r3, [r4, #20]
 80154b4:	425b      	negs	r3, r3
 80154b6:	61a3      	str	r3, [r4, #24]
 80154b8:	6923      	ldr	r3, [r4, #16]
 80154ba:	b943      	cbnz	r3, 80154ce <__swsetup_r+0xc6>
 80154bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80154c0:	d1ba      	bne.n	8015438 <__swsetup_r+0x30>
 80154c2:	bd70      	pop	{r4, r5, r6, pc}
 80154c4:	0781      	lsls	r1, r0, #30
 80154c6:	bf58      	it	pl
 80154c8:	6963      	ldrpl	r3, [r4, #20]
 80154ca:	60a3      	str	r3, [r4, #8]
 80154cc:	e7f4      	b.n	80154b8 <__swsetup_r+0xb0>
 80154ce:	2000      	movs	r0, #0
 80154d0:	e7f7      	b.n	80154c2 <__swsetup_r+0xba>
 80154d2:	bf00      	nop
 80154d4:	2000012c 	.word	0x2000012c
 80154d8:	08015f44 	.word	0x08015f44
 80154dc:	08015f64 	.word	0x08015f64
 80154e0:	08015f24 	.word	0x08015f24

080154e4 <abort>:
 80154e4:	b508      	push	{r3, lr}
 80154e6:	2006      	movs	r0, #6
 80154e8:	f000 fa48 	bl	801597c <raise>
 80154ec:	2001      	movs	r0, #1
 80154ee:	f7ec feb5 	bl	800225c <_exit>
	...

080154f4 <__sflush_r>:
 80154f4:	898a      	ldrh	r2, [r1, #12]
 80154f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154fa:	4605      	mov	r5, r0
 80154fc:	0710      	lsls	r0, r2, #28
 80154fe:	460c      	mov	r4, r1
 8015500:	d458      	bmi.n	80155b4 <__sflush_r+0xc0>
 8015502:	684b      	ldr	r3, [r1, #4]
 8015504:	2b00      	cmp	r3, #0
 8015506:	dc05      	bgt.n	8015514 <__sflush_r+0x20>
 8015508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801550a:	2b00      	cmp	r3, #0
 801550c:	dc02      	bgt.n	8015514 <__sflush_r+0x20>
 801550e:	2000      	movs	r0, #0
 8015510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015516:	2e00      	cmp	r6, #0
 8015518:	d0f9      	beq.n	801550e <__sflush_r+0x1a>
 801551a:	2300      	movs	r3, #0
 801551c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015520:	682f      	ldr	r7, [r5, #0]
 8015522:	602b      	str	r3, [r5, #0]
 8015524:	d032      	beq.n	801558c <__sflush_r+0x98>
 8015526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015528:	89a3      	ldrh	r3, [r4, #12]
 801552a:	075a      	lsls	r2, r3, #29
 801552c:	d505      	bpl.n	801553a <__sflush_r+0x46>
 801552e:	6863      	ldr	r3, [r4, #4]
 8015530:	1ac0      	subs	r0, r0, r3
 8015532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015534:	b10b      	cbz	r3, 801553a <__sflush_r+0x46>
 8015536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015538:	1ac0      	subs	r0, r0, r3
 801553a:	2300      	movs	r3, #0
 801553c:	4602      	mov	r2, r0
 801553e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015540:	6a21      	ldr	r1, [r4, #32]
 8015542:	4628      	mov	r0, r5
 8015544:	47b0      	blx	r6
 8015546:	1c43      	adds	r3, r0, #1
 8015548:	89a3      	ldrh	r3, [r4, #12]
 801554a:	d106      	bne.n	801555a <__sflush_r+0x66>
 801554c:	6829      	ldr	r1, [r5, #0]
 801554e:	291d      	cmp	r1, #29
 8015550:	d82c      	bhi.n	80155ac <__sflush_r+0xb8>
 8015552:	4a2a      	ldr	r2, [pc, #168]	; (80155fc <__sflush_r+0x108>)
 8015554:	40ca      	lsrs	r2, r1
 8015556:	07d6      	lsls	r6, r2, #31
 8015558:	d528      	bpl.n	80155ac <__sflush_r+0xb8>
 801555a:	2200      	movs	r2, #0
 801555c:	6062      	str	r2, [r4, #4]
 801555e:	04d9      	lsls	r1, r3, #19
 8015560:	6922      	ldr	r2, [r4, #16]
 8015562:	6022      	str	r2, [r4, #0]
 8015564:	d504      	bpl.n	8015570 <__sflush_r+0x7c>
 8015566:	1c42      	adds	r2, r0, #1
 8015568:	d101      	bne.n	801556e <__sflush_r+0x7a>
 801556a:	682b      	ldr	r3, [r5, #0]
 801556c:	b903      	cbnz	r3, 8015570 <__sflush_r+0x7c>
 801556e:	6560      	str	r0, [r4, #84]	; 0x54
 8015570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015572:	602f      	str	r7, [r5, #0]
 8015574:	2900      	cmp	r1, #0
 8015576:	d0ca      	beq.n	801550e <__sflush_r+0x1a>
 8015578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801557c:	4299      	cmp	r1, r3
 801557e:	d002      	beq.n	8015586 <__sflush_r+0x92>
 8015580:	4628      	mov	r0, r5
 8015582:	f7fd fdb7 	bl	80130f4 <_free_r>
 8015586:	2000      	movs	r0, #0
 8015588:	6360      	str	r0, [r4, #52]	; 0x34
 801558a:	e7c1      	b.n	8015510 <__sflush_r+0x1c>
 801558c:	6a21      	ldr	r1, [r4, #32]
 801558e:	2301      	movs	r3, #1
 8015590:	4628      	mov	r0, r5
 8015592:	47b0      	blx	r6
 8015594:	1c41      	adds	r1, r0, #1
 8015596:	d1c7      	bne.n	8015528 <__sflush_r+0x34>
 8015598:	682b      	ldr	r3, [r5, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d0c4      	beq.n	8015528 <__sflush_r+0x34>
 801559e:	2b1d      	cmp	r3, #29
 80155a0:	d001      	beq.n	80155a6 <__sflush_r+0xb2>
 80155a2:	2b16      	cmp	r3, #22
 80155a4:	d101      	bne.n	80155aa <__sflush_r+0xb6>
 80155a6:	602f      	str	r7, [r5, #0]
 80155a8:	e7b1      	b.n	801550e <__sflush_r+0x1a>
 80155aa:	89a3      	ldrh	r3, [r4, #12]
 80155ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155b0:	81a3      	strh	r3, [r4, #12]
 80155b2:	e7ad      	b.n	8015510 <__sflush_r+0x1c>
 80155b4:	690f      	ldr	r7, [r1, #16]
 80155b6:	2f00      	cmp	r7, #0
 80155b8:	d0a9      	beq.n	801550e <__sflush_r+0x1a>
 80155ba:	0793      	lsls	r3, r2, #30
 80155bc:	680e      	ldr	r6, [r1, #0]
 80155be:	bf08      	it	eq
 80155c0:	694b      	ldreq	r3, [r1, #20]
 80155c2:	600f      	str	r7, [r1, #0]
 80155c4:	bf18      	it	ne
 80155c6:	2300      	movne	r3, #0
 80155c8:	eba6 0807 	sub.w	r8, r6, r7
 80155cc:	608b      	str	r3, [r1, #8]
 80155ce:	f1b8 0f00 	cmp.w	r8, #0
 80155d2:	dd9c      	ble.n	801550e <__sflush_r+0x1a>
 80155d4:	6a21      	ldr	r1, [r4, #32]
 80155d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155d8:	4643      	mov	r3, r8
 80155da:	463a      	mov	r2, r7
 80155dc:	4628      	mov	r0, r5
 80155de:	47b0      	blx	r6
 80155e0:	2800      	cmp	r0, #0
 80155e2:	dc06      	bgt.n	80155f2 <__sflush_r+0xfe>
 80155e4:	89a3      	ldrh	r3, [r4, #12]
 80155e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155ea:	81a3      	strh	r3, [r4, #12]
 80155ec:	f04f 30ff 	mov.w	r0, #4294967295
 80155f0:	e78e      	b.n	8015510 <__sflush_r+0x1c>
 80155f2:	4407      	add	r7, r0
 80155f4:	eba8 0800 	sub.w	r8, r8, r0
 80155f8:	e7e9      	b.n	80155ce <__sflush_r+0xda>
 80155fa:	bf00      	nop
 80155fc:	20400001 	.word	0x20400001

08015600 <_fflush_r>:
 8015600:	b538      	push	{r3, r4, r5, lr}
 8015602:	690b      	ldr	r3, [r1, #16]
 8015604:	4605      	mov	r5, r0
 8015606:	460c      	mov	r4, r1
 8015608:	b913      	cbnz	r3, 8015610 <_fflush_r+0x10>
 801560a:	2500      	movs	r5, #0
 801560c:	4628      	mov	r0, r5
 801560e:	bd38      	pop	{r3, r4, r5, pc}
 8015610:	b118      	cbz	r0, 801561a <_fflush_r+0x1a>
 8015612:	6983      	ldr	r3, [r0, #24]
 8015614:	b90b      	cbnz	r3, 801561a <_fflush_r+0x1a>
 8015616:	f000 f887 	bl	8015728 <__sinit>
 801561a:	4b14      	ldr	r3, [pc, #80]	; (801566c <_fflush_r+0x6c>)
 801561c:	429c      	cmp	r4, r3
 801561e:	d11b      	bne.n	8015658 <_fflush_r+0x58>
 8015620:	686c      	ldr	r4, [r5, #4]
 8015622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d0ef      	beq.n	801560a <_fflush_r+0xa>
 801562a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801562c:	07d0      	lsls	r0, r2, #31
 801562e:	d404      	bmi.n	801563a <_fflush_r+0x3a>
 8015630:	0599      	lsls	r1, r3, #22
 8015632:	d402      	bmi.n	801563a <_fflush_r+0x3a>
 8015634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015636:	f7ff fd1a 	bl	801506e <__retarget_lock_acquire_recursive>
 801563a:	4628      	mov	r0, r5
 801563c:	4621      	mov	r1, r4
 801563e:	f7ff ff59 	bl	80154f4 <__sflush_r>
 8015642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015644:	07da      	lsls	r2, r3, #31
 8015646:	4605      	mov	r5, r0
 8015648:	d4e0      	bmi.n	801560c <_fflush_r+0xc>
 801564a:	89a3      	ldrh	r3, [r4, #12]
 801564c:	059b      	lsls	r3, r3, #22
 801564e:	d4dd      	bmi.n	801560c <_fflush_r+0xc>
 8015650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015652:	f7ff fd0d 	bl	8015070 <__retarget_lock_release_recursive>
 8015656:	e7d9      	b.n	801560c <_fflush_r+0xc>
 8015658:	4b05      	ldr	r3, [pc, #20]	; (8015670 <_fflush_r+0x70>)
 801565a:	429c      	cmp	r4, r3
 801565c:	d101      	bne.n	8015662 <_fflush_r+0x62>
 801565e:	68ac      	ldr	r4, [r5, #8]
 8015660:	e7df      	b.n	8015622 <_fflush_r+0x22>
 8015662:	4b04      	ldr	r3, [pc, #16]	; (8015674 <_fflush_r+0x74>)
 8015664:	429c      	cmp	r4, r3
 8015666:	bf08      	it	eq
 8015668:	68ec      	ldreq	r4, [r5, #12]
 801566a:	e7da      	b.n	8015622 <_fflush_r+0x22>
 801566c:	08015f44 	.word	0x08015f44
 8015670:	08015f64 	.word	0x08015f64
 8015674:	08015f24 	.word	0x08015f24

08015678 <std>:
 8015678:	2300      	movs	r3, #0
 801567a:	b510      	push	{r4, lr}
 801567c:	4604      	mov	r4, r0
 801567e:	e9c0 3300 	strd	r3, r3, [r0]
 8015682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015686:	6083      	str	r3, [r0, #8]
 8015688:	8181      	strh	r1, [r0, #12]
 801568a:	6643      	str	r3, [r0, #100]	; 0x64
 801568c:	81c2      	strh	r2, [r0, #14]
 801568e:	6183      	str	r3, [r0, #24]
 8015690:	4619      	mov	r1, r3
 8015692:	2208      	movs	r2, #8
 8015694:	305c      	adds	r0, #92	; 0x5c
 8015696:	f7fd fd25 	bl	80130e4 <memset>
 801569a:	4b05      	ldr	r3, [pc, #20]	; (80156b0 <std+0x38>)
 801569c:	6263      	str	r3, [r4, #36]	; 0x24
 801569e:	4b05      	ldr	r3, [pc, #20]	; (80156b4 <std+0x3c>)
 80156a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80156a2:	4b05      	ldr	r3, [pc, #20]	; (80156b8 <std+0x40>)
 80156a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80156a6:	4b05      	ldr	r3, [pc, #20]	; (80156bc <std+0x44>)
 80156a8:	6224      	str	r4, [r4, #32]
 80156aa:	6323      	str	r3, [r4, #48]	; 0x30
 80156ac:	bd10      	pop	{r4, pc}
 80156ae:	bf00      	nop
 80156b0:	080159b5 	.word	0x080159b5
 80156b4:	080159d7 	.word	0x080159d7
 80156b8:	08015a0f 	.word	0x08015a0f
 80156bc:	08015a33 	.word	0x08015a33

080156c0 <_cleanup_r>:
 80156c0:	4901      	ldr	r1, [pc, #4]	; (80156c8 <_cleanup_r+0x8>)
 80156c2:	f000 b8af 	b.w	8015824 <_fwalk_reent>
 80156c6:	bf00      	nop
 80156c8:	08015601 	.word	0x08015601

080156cc <__sfmoreglue>:
 80156cc:	b570      	push	{r4, r5, r6, lr}
 80156ce:	2268      	movs	r2, #104	; 0x68
 80156d0:	1e4d      	subs	r5, r1, #1
 80156d2:	4355      	muls	r5, r2
 80156d4:	460e      	mov	r6, r1
 80156d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80156da:	f7fd fd77 	bl	80131cc <_malloc_r>
 80156de:	4604      	mov	r4, r0
 80156e0:	b140      	cbz	r0, 80156f4 <__sfmoreglue+0x28>
 80156e2:	2100      	movs	r1, #0
 80156e4:	e9c0 1600 	strd	r1, r6, [r0]
 80156e8:	300c      	adds	r0, #12
 80156ea:	60a0      	str	r0, [r4, #8]
 80156ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80156f0:	f7fd fcf8 	bl	80130e4 <memset>
 80156f4:	4620      	mov	r0, r4
 80156f6:	bd70      	pop	{r4, r5, r6, pc}

080156f8 <__sfp_lock_acquire>:
 80156f8:	4801      	ldr	r0, [pc, #4]	; (8015700 <__sfp_lock_acquire+0x8>)
 80156fa:	f7ff bcb8 	b.w	801506e <__retarget_lock_acquire_recursive>
 80156fe:	bf00      	nop
 8015700:	200048b9 	.word	0x200048b9

08015704 <__sfp_lock_release>:
 8015704:	4801      	ldr	r0, [pc, #4]	; (801570c <__sfp_lock_release+0x8>)
 8015706:	f7ff bcb3 	b.w	8015070 <__retarget_lock_release_recursive>
 801570a:	bf00      	nop
 801570c:	200048b9 	.word	0x200048b9

08015710 <__sinit_lock_acquire>:
 8015710:	4801      	ldr	r0, [pc, #4]	; (8015718 <__sinit_lock_acquire+0x8>)
 8015712:	f7ff bcac 	b.w	801506e <__retarget_lock_acquire_recursive>
 8015716:	bf00      	nop
 8015718:	200048ba 	.word	0x200048ba

0801571c <__sinit_lock_release>:
 801571c:	4801      	ldr	r0, [pc, #4]	; (8015724 <__sinit_lock_release+0x8>)
 801571e:	f7ff bca7 	b.w	8015070 <__retarget_lock_release_recursive>
 8015722:	bf00      	nop
 8015724:	200048ba 	.word	0x200048ba

08015728 <__sinit>:
 8015728:	b510      	push	{r4, lr}
 801572a:	4604      	mov	r4, r0
 801572c:	f7ff fff0 	bl	8015710 <__sinit_lock_acquire>
 8015730:	69a3      	ldr	r3, [r4, #24]
 8015732:	b11b      	cbz	r3, 801573c <__sinit+0x14>
 8015734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015738:	f7ff bff0 	b.w	801571c <__sinit_lock_release>
 801573c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015740:	6523      	str	r3, [r4, #80]	; 0x50
 8015742:	4b13      	ldr	r3, [pc, #76]	; (8015790 <__sinit+0x68>)
 8015744:	4a13      	ldr	r2, [pc, #76]	; (8015794 <__sinit+0x6c>)
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	62a2      	str	r2, [r4, #40]	; 0x28
 801574a:	42a3      	cmp	r3, r4
 801574c:	bf04      	itt	eq
 801574e:	2301      	moveq	r3, #1
 8015750:	61a3      	streq	r3, [r4, #24]
 8015752:	4620      	mov	r0, r4
 8015754:	f000 f820 	bl	8015798 <__sfp>
 8015758:	6060      	str	r0, [r4, #4]
 801575a:	4620      	mov	r0, r4
 801575c:	f000 f81c 	bl	8015798 <__sfp>
 8015760:	60a0      	str	r0, [r4, #8]
 8015762:	4620      	mov	r0, r4
 8015764:	f000 f818 	bl	8015798 <__sfp>
 8015768:	2200      	movs	r2, #0
 801576a:	60e0      	str	r0, [r4, #12]
 801576c:	2104      	movs	r1, #4
 801576e:	6860      	ldr	r0, [r4, #4]
 8015770:	f7ff ff82 	bl	8015678 <std>
 8015774:	68a0      	ldr	r0, [r4, #8]
 8015776:	2201      	movs	r2, #1
 8015778:	2109      	movs	r1, #9
 801577a:	f7ff ff7d 	bl	8015678 <std>
 801577e:	68e0      	ldr	r0, [r4, #12]
 8015780:	2202      	movs	r2, #2
 8015782:	2112      	movs	r1, #18
 8015784:	f7ff ff78 	bl	8015678 <std>
 8015788:	2301      	movs	r3, #1
 801578a:	61a3      	str	r3, [r4, #24]
 801578c:	e7d2      	b.n	8015734 <__sinit+0xc>
 801578e:	bf00      	nop
 8015790:	08015ba8 	.word	0x08015ba8
 8015794:	080156c1 	.word	0x080156c1

08015798 <__sfp>:
 8015798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801579a:	4607      	mov	r7, r0
 801579c:	f7ff ffac 	bl	80156f8 <__sfp_lock_acquire>
 80157a0:	4b1e      	ldr	r3, [pc, #120]	; (801581c <__sfp+0x84>)
 80157a2:	681e      	ldr	r6, [r3, #0]
 80157a4:	69b3      	ldr	r3, [r6, #24]
 80157a6:	b913      	cbnz	r3, 80157ae <__sfp+0x16>
 80157a8:	4630      	mov	r0, r6
 80157aa:	f7ff ffbd 	bl	8015728 <__sinit>
 80157ae:	3648      	adds	r6, #72	; 0x48
 80157b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80157b4:	3b01      	subs	r3, #1
 80157b6:	d503      	bpl.n	80157c0 <__sfp+0x28>
 80157b8:	6833      	ldr	r3, [r6, #0]
 80157ba:	b30b      	cbz	r3, 8015800 <__sfp+0x68>
 80157bc:	6836      	ldr	r6, [r6, #0]
 80157be:	e7f7      	b.n	80157b0 <__sfp+0x18>
 80157c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80157c4:	b9d5      	cbnz	r5, 80157fc <__sfp+0x64>
 80157c6:	4b16      	ldr	r3, [pc, #88]	; (8015820 <__sfp+0x88>)
 80157c8:	60e3      	str	r3, [r4, #12]
 80157ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80157ce:	6665      	str	r5, [r4, #100]	; 0x64
 80157d0:	f7ff fc4c 	bl	801506c <__retarget_lock_init_recursive>
 80157d4:	f7ff ff96 	bl	8015704 <__sfp_lock_release>
 80157d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80157dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80157e0:	6025      	str	r5, [r4, #0]
 80157e2:	61a5      	str	r5, [r4, #24]
 80157e4:	2208      	movs	r2, #8
 80157e6:	4629      	mov	r1, r5
 80157e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80157ec:	f7fd fc7a 	bl	80130e4 <memset>
 80157f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80157f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80157f8:	4620      	mov	r0, r4
 80157fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157fc:	3468      	adds	r4, #104	; 0x68
 80157fe:	e7d9      	b.n	80157b4 <__sfp+0x1c>
 8015800:	2104      	movs	r1, #4
 8015802:	4638      	mov	r0, r7
 8015804:	f7ff ff62 	bl	80156cc <__sfmoreglue>
 8015808:	4604      	mov	r4, r0
 801580a:	6030      	str	r0, [r6, #0]
 801580c:	2800      	cmp	r0, #0
 801580e:	d1d5      	bne.n	80157bc <__sfp+0x24>
 8015810:	f7ff ff78 	bl	8015704 <__sfp_lock_release>
 8015814:	230c      	movs	r3, #12
 8015816:	603b      	str	r3, [r7, #0]
 8015818:	e7ee      	b.n	80157f8 <__sfp+0x60>
 801581a:	bf00      	nop
 801581c:	08015ba8 	.word	0x08015ba8
 8015820:	ffff0001 	.word	0xffff0001

08015824 <_fwalk_reent>:
 8015824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015828:	4606      	mov	r6, r0
 801582a:	4688      	mov	r8, r1
 801582c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015830:	2700      	movs	r7, #0
 8015832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015836:	f1b9 0901 	subs.w	r9, r9, #1
 801583a:	d505      	bpl.n	8015848 <_fwalk_reent+0x24>
 801583c:	6824      	ldr	r4, [r4, #0]
 801583e:	2c00      	cmp	r4, #0
 8015840:	d1f7      	bne.n	8015832 <_fwalk_reent+0xe>
 8015842:	4638      	mov	r0, r7
 8015844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015848:	89ab      	ldrh	r3, [r5, #12]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d907      	bls.n	801585e <_fwalk_reent+0x3a>
 801584e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015852:	3301      	adds	r3, #1
 8015854:	d003      	beq.n	801585e <_fwalk_reent+0x3a>
 8015856:	4629      	mov	r1, r5
 8015858:	4630      	mov	r0, r6
 801585a:	47c0      	blx	r8
 801585c:	4307      	orrs	r7, r0
 801585e:	3568      	adds	r5, #104	; 0x68
 8015860:	e7e9      	b.n	8015836 <_fwalk_reent+0x12>

08015862 <__swhatbuf_r>:
 8015862:	b570      	push	{r4, r5, r6, lr}
 8015864:	460e      	mov	r6, r1
 8015866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801586a:	2900      	cmp	r1, #0
 801586c:	b096      	sub	sp, #88	; 0x58
 801586e:	4614      	mov	r4, r2
 8015870:	461d      	mov	r5, r3
 8015872:	da08      	bge.n	8015886 <__swhatbuf_r+0x24>
 8015874:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015878:	2200      	movs	r2, #0
 801587a:	602a      	str	r2, [r5, #0]
 801587c:	061a      	lsls	r2, r3, #24
 801587e:	d410      	bmi.n	80158a2 <__swhatbuf_r+0x40>
 8015880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015884:	e00e      	b.n	80158a4 <__swhatbuf_r+0x42>
 8015886:	466a      	mov	r2, sp
 8015888:	f000 f8fa 	bl	8015a80 <_fstat_r>
 801588c:	2800      	cmp	r0, #0
 801588e:	dbf1      	blt.n	8015874 <__swhatbuf_r+0x12>
 8015890:	9a01      	ldr	r2, [sp, #4]
 8015892:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015896:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801589a:	425a      	negs	r2, r3
 801589c:	415a      	adcs	r2, r3
 801589e:	602a      	str	r2, [r5, #0]
 80158a0:	e7ee      	b.n	8015880 <__swhatbuf_r+0x1e>
 80158a2:	2340      	movs	r3, #64	; 0x40
 80158a4:	2000      	movs	r0, #0
 80158a6:	6023      	str	r3, [r4, #0]
 80158a8:	b016      	add	sp, #88	; 0x58
 80158aa:	bd70      	pop	{r4, r5, r6, pc}

080158ac <__smakebuf_r>:
 80158ac:	898b      	ldrh	r3, [r1, #12]
 80158ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158b0:	079d      	lsls	r5, r3, #30
 80158b2:	4606      	mov	r6, r0
 80158b4:	460c      	mov	r4, r1
 80158b6:	d507      	bpl.n	80158c8 <__smakebuf_r+0x1c>
 80158b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80158bc:	6023      	str	r3, [r4, #0]
 80158be:	6123      	str	r3, [r4, #16]
 80158c0:	2301      	movs	r3, #1
 80158c2:	6163      	str	r3, [r4, #20]
 80158c4:	b002      	add	sp, #8
 80158c6:	bd70      	pop	{r4, r5, r6, pc}
 80158c8:	ab01      	add	r3, sp, #4
 80158ca:	466a      	mov	r2, sp
 80158cc:	f7ff ffc9 	bl	8015862 <__swhatbuf_r>
 80158d0:	9900      	ldr	r1, [sp, #0]
 80158d2:	4605      	mov	r5, r0
 80158d4:	4630      	mov	r0, r6
 80158d6:	f7fd fc79 	bl	80131cc <_malloc_r>
 80158da:	b948      	cbnz	r0, 80158f0 <__smakebuf_r+0x44>
 80158dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158e0:	059a      	lsls	r2, r3, #22
 80158e2:	d4ef      	bmi.n	80158c4 <__smakebuf_r+0x18>
 80158e4:	f023 0303 	bic.w	r3, r3, #3
 80158e8:	f043 0302 	orr.w	r3, r3, #2
 80158ec:	81a3      	strh	r3, [r4, #12]
 80158ee:	e7e3      	b.n	80158b8 <__smakebuf_r+0xc>
 80158f0:	4b0d      	ldr	r3, [pc, #52]	; (8015928 <__smakebuf_r+0x7c>)
 80158f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80158f4:	89a3      	ldrh	r3, [r4, #12]
 80158f6:	6020      	str	r0, [r4, #0]
 80158f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158fc:	81a3      	strh	r3, [r4, #12]
 80158fe:	9b00      	ldr	r3, [sp, #0]
 8015900:	6163      	str	r3, [r4, #20]
 8015902:	9b01      	ldr	r3, [sp, #4]
 8015904:	6120      	str	r0, [r4, #16]
 8015906:	b15b      	cbz	r3, 8015920 <__smakebuf_r+0x74>
 8015908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801590c:	4630      	mov	r0, r6
 801590e:	f000 f8c9 	bl	8015aa4 <_isatty_r>
 8015912:	b128      	cbz	r0, 8015920 <__smakebuf_r+0x74>
 8015914:	89a3      	ldrh	r3, [r4, #12]
 8015916:	f023 0303 	bic.w	r3, r3, #3
 801591a:	f043 0301 	orr.w	r3, r3, #1
 801591e:	81a3      	strh	r3, [r4, #12]
 8015920:	89a0      	ldrh	r0, [r4, #12]
 8015922:	4305      	orrs	r5, r0
 8015924:	81a5      	strh	r5, [r4, #12]
 8015926:	e7cd      	b.n	80158c4 <__smakebuf_r+0x18>
 8015928:	080156c1 	.word	0x080156c1

0801592c <_raise_r>:
 801592c:	291f      	cmp	r1, #31
 801592e:	b538      	push	{r3, r4, r5, lr}
 8015930:	4604      	mov	r4, r0
 8015932:	460d      	mov	r5, r1
 8015934:	d904      	bls.n	8015940 <_raise_r+0x14>
 8015936:	2316      	movs	r3, #22
 8015938:	6003      	str	r3, [r0, #0]
 801593a:	f04f 30ff 	mov.w	r0, #4294967295
 801593e:	bd38      	pop	{r3, r4, r5, pc}
 8015940:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015942:	b112      	cbz	r2, 801594a <_raise_r+0x1e>
 8015944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015948:	b94b      	cbnz	r3, 801595e <_raise_r+0x32>
 801594a:	4620      	mov	r0, r4
 801594c:	f000 f830 	bl	80159b0 <_getpid_r>
 8015950:	462a      	mov	r2, r5
 8015952:	4601      	mov	r1, r0
 8015954:	4620      	mov	r0, r4
 8015956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801595a:	f000 b817 	b.w	801598c <_kill_r>
 801595e:	2b01      	cmp	r3, #1
 8015960:	d00a      	beq.n	8015978 <_raise_r+0x4c>
 8015962:	1c59      	adds	r1, r3, #1
 8015964:	d103      	bne.n	801596e <_raise_r+0x42>
 8015966:	2316      	movs	r3, #22
 8015968:	6003      	str	r3, [r0, #0]
 801596a:	2001      	movs	r0, #1
 801596c:	e7e7      	b.n	801593e <_raise_r+0x12>
 801596e:	2400      	movs	r4, #0
 8015970:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015974:	4628      	mov	r0, r5
 8015976:	4798      	blx	r3
 8015978:	2000      	movs	r0, #0
 801597a:	e7e0      	b.n	801593e <_raise_r+0x12>

0801597c <raise>:
 801597c:	4b02      	ldr	r3, [pc, #8]	; (8015988 <raise+0xc>)
 801597e:	4601      	mov	r1, r0
 8015980:	6818      	ldr	r0, [r3, #0]
 8015982:	f7ff bfd3 	b.w	801592c <_raise_r>
 8015986:	bf00      	nop
 8015988:	2000012c 	.word	0x2000012c

0801598c <_kill_r>:
 801598c:	b538      	push	{r3, r4, r5, lr}
 801598e:	4d07      	ldr	r5, [pc, #28]	; (80159ac <_kill_r+0x20>)
 8015990:	2300      	movs	r3, #0
 8015992:	4604      	mov	r4, r0
 8015994:	4608      	mov	r0, r1
 8015996:	4611      	mov	r1, r2
 8015998:	602b      	str	r3, [r5, #0]
 801599a:	f7ec fc4f 	bl	800223c <_kill>
 801599e:	1c43      	adds	r3, r0, #1
 80159a0:	d102      	bne.n	80159a8 <_kill_r+0x1c>
 80159a2:	682b      	ldr	r3, [r5, #0]
 80159a4:	b103      	cbz	r3, 80159a8 <_kill_r+0x1c>
 80159a6:	6023      	str	r3, [r4, #0]
 80159a8:	bd38      	pop	{r3, r4, r5, pc}
 80159aa:	bf00      	nop
 80159ac:	200048b4 	.word	0x200048b4

080159b0 <_getpid_r>:
 80159b0:	f7ec bc3c 	b.w	800222c <_getpid>

080159b4 <__sread>:
 80159b4:	b510      	push	{r4, lr}
 80159b6:	460c      	mov	r4, r1
 80159b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159bc:	f000 f894 	bl	8015ae8 <_read_r>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	bfab      	itete	ge
 80159c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80159c6:	89a3      	ldrhlt	r3, [r4, #12]
 80159c8:	181b      	addge	r3, r3, r0
 80159ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80159ce:	bfac      	ite	ge
 80159d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80159d2:	81a3      	strhlt	r3, [r4, #12]
 80159d4:	bd10      	pop	{r4, pc}

080159d6 <__swrite>:
 80159d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159da:	461f      	mov	r7, r3
 80159dc:	898b      	ldrh	r3, [r1, #12]
 80159de:	05db      	lsls	r3, r3, #23
 80159e0:	4605      	mov	r5, r0
 80159e2:	460c      	mov	r4, r1
 80159e4:	4616      	mov	r6, r2
 80159e6:	d505      	bpl.n	80159f4 <__swrite+0x1e>
 80159e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159ec:	2302      	movs	r3, #2
 80159ee:	2200      	movs	r2, #0
 80159f0:	f000 f868 	bl	8015ac4 <_lseek_r>
 80159f4:	89a3      	ldrh	r3, [r4, #12]
 80159f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80159fe:	81a3      	strh	r3, [r4, #12]
 8015a00:	4632      	mov	r2, r6
 8015a02:	463b      	mov	r3, r7
 8015a04:	4628      	mov	r0, r5
 8015a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a0a:	f000 b817 	b.w	8015a3c <_write_r>

08015a0e <__sseek>:
 8015a0e:	b510      	push	{r4, lr}
 8015a10:	460c      	mov	r4, r1
 8015a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a16:	f000 f855 	bl	8015ac4 <_lseek_r>
 8015a1a:	1c43      	adds	r3, r0, #1
 8015a1c:	89a3      	ldrh	r3, [r4, #12]
 8015a1e:	bf15      	itete	ne
 8015a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8015a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015a2a:	81a3      	strheq	r3, [r4, #12]
 8015a2c:	bf18      	it	ne
 8015a2e:	81a3      	strhne	r3, [r4, #12]
 8015a30:	bd10      	pop	{r4, pc}

08015a32 <__sclose>:
 8015a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a36:	f000 b813 	b.w	8015a60 <_close_r>
	...

08015a3c <_write_r>:
 8015a3c:	b538      	push	{r3, r4, r5, lr}
 8015a3e:	4d07      	ldr	r5, [pc, #28]	; (8015a5c <_write_r+0x20>)
 8015a40:	4604      	mov	r4, r0
 8015a42:	4608      	mov	r0, r1
 8015a44:	4611      	mov	r1, r2
 8015a46:	2200      	movs	r2, #0
 8015a48:	602a      	str	r2, [r5, #0]
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	f7ec fc2d 	bl	80022aa <_write>
 8015a50:	1c43      	adds	r3, r0, #1
 8015a52:	d102      	bne.n	8015a5a <_write_r+0x1e>
 8015a54:	682b      	ldr	r3, [r5, #0]
 8015a56:	b103      	cbz	r3, 8015a5a <_write_r+0x1e>
 8015a58:	6023      	str	r3, [r4, #0]
 8015a5a:	bd38      	pop	{r3, r4, r5, pc}
 8015a5c:	200048b4 	.word	0x200048b4

08015a60 <_close_r>:
 8015a60:	b538      	push	{r3, r4, r5, lr}
 8015a62:	4d06      	ldr	r5, [pc, #24]	; (8015a7c <_close_r+0x1c>)
 8015a64:	2300      	movs	r3, #0
 8015a66:	4604      	mov	r4, r0
 8015a68:	4608      	mov	r0, r1
 8015a6a:	602b      	str	r3, [r5, #0]
 8015a6c:	f7ec fc39 	bl	80022e2 <_close>
 8015a70:	1c43      	adds	r3, r0, #1
 8015a72:	d102      	bne.n	8015a7a <_close_r+0x1a>
 8015a74:	682b      	ldr	r3, [r5, #0]
 8015a76:	b103      	cbz	r3, 8015a7a <_close_r+0x1a>
 8015a78:	6023      	str	r3, [r4, #0]
 8015a7a:	bd38      	pop	{r3, r4, r5, pc}
 8015a7c:	200048b4 	.word	0x200048b4

08015a80 <_fstat_r>:
 8015a80:	b538      	push	{r3, r4, r5, lr}
 8015a82:	4d07      	ldr	r5, [pc, #28]	; (8015aa0 <_fstat_r+0x20>)
 8015a84:	2300      	movs	r3, #0
 8015a86:	4604      	mov	r4, r0
 8015a88:	4608      	mov	r0, r1
 8015a8a:	4611      	mov	r1, r2
 8015a8c:	602b      	str	r3, [r5, #0]
 8015a8e:	f7ec fc34 	bl	80022fa <_fstat>
 8015a92:	1c43      	adds	r3, r0, #1
 8015a94:	d102      	bne.n	8015a9c <_fstat_r+0x1c>
 8015a96:	682b      	ldr	r3, [r5, #0]
 8015a98:	b103      	cbz	r3, 8015a9c <_fstat_r+0x1c>
 8015a9a:	6023      	str	r3, [r4, #0]
 8015a9c:	bd38      	pop	{r3, r4, r5, pc}
 8015a9e:	bf00      	nop
 8015aa0:	200048b4 	.word	0x200048b4

08015aa4 <_isatty_r>:
 8015aa4:	b538      	push	{r3, r4, r5, lr}
 8015aa6:	4d06      	ldr	r5, [pc, #24]	; (8015ac0 <_isatty_r+0x1c>)
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	4604      	mov	r4, r0
 8015aac:	4608      	mov	r0, r1
 8015aae:	602b      	str	r3, [r5, #0]
 8015ab0:	f7ec fc33 	bl	800231a <_isatty>
 8015ab4:	1c43      	adds	r3, r0, #1
 8015ab6:	d102      	bne.n	8015abe <_isatty_r+0x1a>
 8015ab8:	682b      	ldr	r3, [r5, #0]
 8015aba:	b103      	cbz	r3, 8015abe <_isatty_r+0x1a>
 8015abc:	6023      	str	r3, [r4, #0]
 8015abe:	bd38      	pop	{r3, r4, r5, pc}
 8015ac0:	200048b4 	.word	0x200048b4

08015ac4 <_lseek_r>:
 8015ac4:	b538      	push	{r3, r4, r5, lr}
 8015ac6:	4d07      	ldr	r5, [pc, #28]	; (8015ae4 <_lseek_r+0x20>)
 8015ac8:	4604      	mov	r4, r0
 8015aca:	4608      	mov	r0, r1
 8015acc:	4611      	mov	r1, r2
 8015ace:	2200      	movs	r2, #0
 8015ad0:	602a      	str	r2, [r5, #0]
 8015ad2:	461a      	mov	r2, r3
 8015ad4:	f7ec fc2c 	bl	8002330 <_lseek>
 8015ad8:	1c43      	adds	r3, r0, #1
 8015ada:	d102      	bne.n	8015ae2 <_lseek_r+0x1e>
 8015adc:	682b      	ldr	r3, [r5, #0]
 8015ade:	b103      	cbz	r3, 8015ae2 <_lseek_r+0x1e>
 8015ae0:	6023      	str	r3, [r4, #0]
 8015ae2:	bd38      	pop	{r3, r4, r5, pc}
 8015ae4:	200048b4 	.word	0x200048b4

08015ae8 <_read_r>:
 8015ae8:	b538      	push	{r3, r4, r5, lr}
 8015aea:	4d07      	ldr	r5, [pc, #28]	; (8015b08 <_read_r+0x20>)
 8015aec:	4604      	mov	r4, r0
 8015aee:	4608      	mov	r0, r1
 8015af0:	4611      	mov	r1, r2
 8015af2:	2200      	movs	r2, #0
 8015af4:	602a      	str	r2, [r5, #0]
 8015af6:	461a      	mov	r2, r3
 8015af8:	f7ec fbba 	bl	8002270 <_read>
 8015afc:	1c43      	adds	r3, r0, #1
 8015afe:	d102      	bne.n	8015b06 <_read_r+0x1e>
 8015b00:	682b      	ldr	r3, [r5, #0]
 8015b02:	b103      	cbz	r3, 8015b06 <_read_r+0x1e>
 8015b04:	6023      	str	r3, [r4, #0]
 8015b06:	bd38      	pop	{r3, r4, r5, pc}
 8015b08:	200048b4 	.word	0x200048b4

08015b0c <_init>:
 8015b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0e:	bf00      	nop
 8015b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b12:	bc08      	pop	{r3}
 8015b14:	469e      	mov	lr, r3
 8015b16:	4770      	bx	lr

08015b18 <_fini>:
 8015b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b1a:	bf00      	nop
 8015b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b1e:	bc08      	pop	{r3}
 8015b20:	469e      	mov	lr, r3
 8015b22:	4770      	bx	lr
